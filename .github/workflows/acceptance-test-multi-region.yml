# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
# This pipeline runs parallel sets of tests:
#   - the known flaky tests until they can be properly triaged and corrected 
#     through API improvements, test improvements, and so on
#   - tests in which the flaky tests are skipped, for a "clean job" run
# All flaky tests expect the TESTACC_FLAKY environment variable set to true
# in order to be executed.
name: Multi-region Acceptance Tests
on:
  workflow_dispatch:
  # For systems with an upstream API that could drift unexpectedly (like most SaaS systems, etc.),
  # we recommend testing at a regular interval not necessarily tied to code changes. This will 
  # ensure you are alerted to something breaking due to an API change, even if the code did not
  # change.
  schedule:
    - cron: '0 3 * * *'
jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Pretend to build
        run: |
          echo "Pretending to build the code"

  prepare:
    name: Prepare ${{ matrix.region }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: [AP, CA, EU, NA]

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets[format('{0}_PINGONE_CLIENT_ID', matrix.region)] }}
      PINGONE_CLIENT_SECRET: ${{ secrets[format('{0}_PINGONE_CLIENT_SECRET', matrix.region)] }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets[format('{0}_PINGONE_ENVIRONMENT_ID', matrix.region)] }}
      PINGONE_REGION_CODE: ${{ matrix.region }}
      PINGONE_LICENSE_ID: ${{ secrets[format('{0}_PINGONE_LICENSE_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_ID: ${{ secrets[format('{0}_PINGONE_ORGANIZATION_ID', matrix.region)] }}

    timeout-minutes: 10

    steps:
      - name: Pretend to prepare
        run: |
          echo "Preparing environment for ${{ matrix.region }}"

  # run acceptance tests in a matrix with Terraform core versions and regions
  test:
    name: Acceptance Test ${{ matrix.region }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: [AP, CA, EU, NA]
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.11.*'
      # If we have issues due to simultaneous tests across regions, max-parallel can be set to 1 to run sequentially
      #max-parallel: 1

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets[format('{0}_PINGONE_CLIENT_ID', matrix.region)] }}
      PINGONE_CLIENT_SECRET: ${{ secrets[format('{0}_PINGONE_CLIENT_SECRET', matrix.region)] }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets[format('{0}_PINGONE_ENVIRONMENT_ID', matrix.region)] }}
      PINGONE_REGION_CODE: ${{ matrix.region }}
      PINGONE_LICENSE_ID: ${{ secrets[format('{0}_PINGONE_LICENSE_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_ID: ${{ secrets[format('{0}_PINGONE_ORGANIZATION_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets[format('{0}_PINGONE_ORGANIZATION_NAME', matrix.region)] }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180

    steps:
      - name: Succeed intentionally
        run: exit 0

  # run acceptance tests in a matrix with Terraform core versions and regions
  # flaky flag set
  test-flaky:
    name: Acceptance Test ${{ matrix.region }} (FLAKY)
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: [AP, CA, EU, NA]
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.11.*'
      # If we have issues due to simultaneous tests across regions, max-parallel can be set to 1 to run sequentially
      #max-parallel: 1

    env:
      TESTACC_FLAKY: true
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets[format('{0}_PINGONE_CLIENT_ID', matrix.region)] }}
      PINGONE_CLIENT_SECRET: ${{ secrets[format('{0}_PINGONE_CLIENT_SECRET', matrix.region)] }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets[format('{0}_PINGONE_ENVIRONMENT_ID', matrix.region)] }}
      PINGONE_REGION_CODE: ${{ matrix.region }}
      PINGONE_LICENSE_ID: ${{ secrets[format('{0}_PINGONE_LICENSE_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_ID: ${{ secrets[format('{0}_PINGONE_ORGANIZATION_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets[format('{0}_PINGONE_ORGANIZATION_NAME', matrix.region)] }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180

    steps:
      - name: Fail intentionally
        continue-on-error: true
        timeout-minutes: 180
        run: |
          exit 1

  cleanup:
    name: Clean up ${{ matrix.region }}
    needs: [test, test-flaky]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      fail-fast: false
      matrix:
        region: [AP, CA, EU, NA]

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets[format('{0}_PINGONE_CLIENT_ID', matrix.region)] }}
      PINGONE_CLIENT_SECRET: ${{ secrets[format('{0}_PINGONE_CLIENT_SECRET', matrix.region)] }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets[format('{0}_PINGONE_ENVIRONMENT_ID', matrix.region)] }}
      PINGONE_REGION_CODE: ${{ matrix.region }}
      PINGONE_LICENSE_ID: ${{ secrets[format('{0}_PINGONE_LICENSE_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_ID: ${{ secrets[format('{0}_PINGONE_ORGANIZATION_ID', matrix.region)] }}

    timeout-minutes: 10

    steps:
      - name: Pretend to do something
        run: |
          echo "Cleaning up resources in ${{ matrix.region }}"

  onfailure:
    if: ${{ failure() }}
    needs: [build, prepare, test, test-flaky, cleanup]
    name: Send failure webhook
    runs-on: ubuntu-latest
    steps:
      - run: |
          curl --silent --request POST "${{ secrets.FAILURE_WEBHOOK_URL }}" \
          --header 'Accept: application/json' \
          --header 'Content-Type: text/plain' \
          --data-raw '{
              "WorkflowName": "${{ github.workflow }}",
              "WorkflowURL": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "RepoName" : "${{ github.repository }}",
          }'