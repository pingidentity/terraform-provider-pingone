# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
# This pipeline runs parallel sets of tests:
#   - the known flaky tests until they can be properly triaged and corrected 
#     through API improvements, test improvements, and so on
#   - tests in which the flaky tests are skipped, for a "clean job" run
# All flaky tests expect the TESTACC_FLAKY environment variable set to true
# in order to be executed.
name: Multi-region Acceptance Tests
on:
  workflow_dispatch:
  # For systems with an upstream API that could drift unexpectedly (like most SaaS systems, etc.),
  # we recommend testing at a regular interval not necessarily tied to code changes. This will 
  # ensure you are alerted to something breaking due to an API change, even if the code did not
  # change.
  schedule:
    - cron: '0 3 * * *'
jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Build
        run: |
          make build

  prepare-ap:
    name: Prepare AP
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.AP_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.AP_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.AP_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "AP"
      PINGONE_LICENSE_ID: ${{ secrets.AP_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.AP_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  # run acceptance tests in a matrix with Terraform core versions
  test-ap:
    name: Acceptance Test AP
    needs: [build, prepare-ap]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.AP_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.AP_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.AP_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "AP"
      PINGONE_LICENSE_ID: ${{ secrets.AP_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.AP_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.AP_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests
        timeout-minutes: 180
        run: |
          make testacc

  # run acceptance tests in a matrix with Terraform core versions
  # flaky flag set
  test-ap-flaky:
    name: Acceptance Test AP (FLAKY)
    needs: [build, prepare-ap]
    runs-on: ubuntu-latest

    env:
      TESTACC_FLAKY: true
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.AP_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.AP_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.AP_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "AP"
      PINGONE_LICENSE_ID: ${{ secrets.AP_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.AP_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.AP_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests (FLAKY)
        id: tf-flaky-acc-test-ap
        continue-on-error: true
        timeout-minutes: 180
        run: |
          make testacc

      - name: Check flaky step status
        run: |
          echo "ACCTEST-AP-FLAKY step outcome: ${{ steps.tf-flaky-acc-test-ap }}"
           if [[ "${{ steps.tf-flaky-acc-test-ap }}" == "failure" ]]; then
            echo "Flaky acceptance tests in AP failed: Continuing..."
          fi

  cleanup-ap:
    name: Clean up AP
    needs: [test-ap, test-ap-flaky]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.AP_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.AP_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.AP_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "AP"
      PINGONE_LICENSE_ID: ${{ secrets.AP_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.AP_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  prepare-ca:
    name: Prepare CA
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.CA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.CA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.CA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "CA"
      PINGONE_LICENSE_ID: ${{ secrets.CA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.CA_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  # run acceptance tests in a matrix with Terraform core versions
  test-ca:
    name: Acceptance Test CA
    needs: [build, prepare-ca]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.CA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.CA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.CA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "CA"
      PINGONE_LICENSE_ID: ${{ secrets.CA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.CA_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.CA_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests
        timeout-minutes: 180
        run: |
          make testacc

  # run acceptance tests in a matrix with Terraform core versions
  # flaky flag set
  test-ca-flaky:
    name: Acceptance Test CA (FLAKY)
    needs: [build, prepare-ca]
    runs-on: ubuntu-latest

    env:
      TESTACC_FLAKY: true
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.CA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.CA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.CA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "CA"
      PINGONE_LICENSE_ID: ${{ secrets.CA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.CA_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.CA_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests (FLAKY)
        id: tf-flaky-acc-test-ca
        continue-on-error: true
        timeout-minutes: 180
        run: |
          make testacc

      - name: Check flaky step status
        run: |
          echo "ACCTEST-CA-FLAKY step outcome: ${{ steps.tf-flaky-acc-test-ca }}"
           if [[ "${{ steps.tf-flaky-acc-test-ca }}" == "failure" ]]; then
            echo "Flaky acceptance tests in CA failed: Continuing..."
          fi

  cleanup-ca:
    name: Clean up CA
    needs: [test-ca, test-ca-flaky]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.CA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.CA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.CA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "CA"
      PINGONE_LICENSE_ID: ${{ secrets.CA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.CA_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  prepare-eu:
    name: Prepare EU
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.EU_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.EU_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.EU_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "EU"
      PINGONE_LICENSE_ID: ${{ secrets.EU_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.EU_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  # run acceptance tests in a matrix with Terraform core versions
  test-eu:
    name: Acceptance Test EU
    needs: [build, prepare-eu]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.EU_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.EU_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.EU_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "EU"
      PINGONE_LICENSE_ID: ${{ secrets.EU_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.EU_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.EU_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests
        timeout-minutes: 180
        run: |
          make testacc
  
  # run acceptance tests in a matrix with Terraform core versions
  # flaky flag set
  test-eu-flaky:
    name: Acceptance Test EU (FLAKY)
    needs: [build, prepare-eu]
    runs-on: ubuntu-latest

    env:
      TESTACC_FLAKY: true
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.EU_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.EU_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.EU_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "EU"
      PINGONE_LICENSE_ID: ${{ secrets.EU_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.EU_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.EU_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests (FLAKY)
        id: tf-flaky-acc-test-eu
        continue-on-error: true
        timeout-minutes: 180
        run: |
          make testacc

      - name: Check flaky step status
        run: |
          echo "ACCTEST-EU-FLAKY step outcome: ${{ steps.tf-flaky-acc-test-eu }}"
           if [[ "${{ steps.tf-flaky-acc-test-eu }}" == "failure" ]]; then
            echo "Flaky acceptance tests in EU failed: Continuing..."
          fi

  cleanup-eu:
    name: Clean up EU
    needs: [test-eu, test-eu-flaky]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.EU_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.EU_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.EU_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "EU"
      PINGONE_LICENSE_ID: ${{ secrets.EU_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.EU_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  prepare-na:
    name: Prepare NA
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.NA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.NA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.NA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "NA"
      PINGONE_LICENSE_ID: ${{ secrets.NA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.NA_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  # run acceptance tests in a matrix with Terraform core versions
  test-na:
    name: Acceptance Test NA
    needs: [build, prepare-na]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.NA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.NA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.NA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "NA"
      PINGONE_LICENSE_ID: ${{ secrets.NA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.NA_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.NA_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests
        timeout-minutes: 180
        run: |
          make testacc

  # run acceptance tests in a matrix with Terraform core versions
  # flaky flag set
  test-na-flaky:
    name: Acceptance Test NA (FLAKY)
    needs: [build, prepare-na]
    runs-on: ubuntu-latest

    env:
      TESTACC_FLAKY: true
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.NA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.NA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.NA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "NA"
      PINGONE_LICENSE_ID: ${{ secrets.NA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.NA_PINGONE_ORGANIZATION_ID }}
      PINGONE_ORGANIZATION_NAME: ${{ secrets.NA_PINGONE_ORGANIZATION_NAME }}
      PINGONE_KEY_PKCS12_UNENCRYPTED: ${{ secrets.PINGONE_KEY_PKCS12_UNENCRYPTED }}
      PINGONE_KEY_PKCS12: ${{ secrets.PINGONE_KEY_PKCS12 }}
      PINGONE_KEY_PKCS12_PASSWORD:  ${{ secrets.PINGONE_KEY_PKCS12_PASSWORD }}
      PINGONE_KEY_PKCS10_CSR: ${{ secrets.PINGONE_KEY_PKCS10_CSR }}
      PINGONE_KEY_PEM_CSR: ${{ secrets.PINGONE_KEY_PEM_CSR }}
      PINGONE_KEY_PEM_CSR_RESPONSE: ${{ secrets.PINGONE_KEY_PEM_CSR_RESPONSE }}
      PINGONE_KEY_PKCS7_CERT: ${{ secrets.PINGONE_KEY_PKCS7_CERT }}
      PINGONE_KEY_PEM_CERT: ${{ secrets.PINGONE_KEY_PEM_CERT }}
      PINGONE_DOMAIN_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM: ${{ secrets.PINGONE_DOMAIN_INTERMEDIATE_CERTIFICATE_PEM }}
      PINGONE_DOMAIN_KEY_PEM: ${{ secrets.PINGONE_DOMAIN_KEY_PEM }}
      PINGONE_VERIFIED_EMAIL_DOMAIN: ${{ secrets.PINGONE_VERIFIED_EMAIL_DOMAIN }}
      PINGONE_GOOGLE_JSON_KEY: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_GOOGLE_FIREBASE_CREDENTIALS: ${{ secrets.PINGONE_GOOGLE_JSON_KEY }}
      PINGONE_KEY_PKCS8: ${{ secrets.PINGONE_KEY_PKCS8 }}
      PINGONE_TWILIO_TEST_SKIP: true
      PINGONE_SYNIVERSE_TEST_SKIP: true
      PINGONE_EMAIL_DOMAIN_TEST_SKIP: true

    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.10.*'

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests (FLAKY)
        id: tf-flaky-acc-test-na
        continue-on-error: true
        timeout-minutes: 180
        run: |
          make testacc

      - name: Check flaky test status
        run: |
          echo "ACCTEST-NA-FLAKY step outcome: ${{ steps.tf-flaky-acc-test-na }}"
           if [[ "${{ steps.tf-flaky-acc-test-na }}" == "failure" ]]; then
            echo "Flaky acceptance tests in NA failed: Continuing..."
          fi

  cleanup-na:
    name: Clean up NA
    needs: [test-na, test-na-flaky]
    runs-on: ubuntu-latest

    env:
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets.NA_PINGONE_CLIENT_ID }}
      PINGONE_CLIENT_SECRET: ${{ secrets.NA_PINGONE_CLIENT_SECRET }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets.NA_PINGONE_ENVIRONMENT_ID }}
      PINGONE_REGION_CODE: "NA"
      PINGONE_LICENSE_ID: ${{ secrets.NA_PINGONE_LICENSE_ID }}
      PINGONE_ORGANIZATION_ID: ${{ secrets.NA_PINGONE_ORGANIZATION_ID }}

    timeout-minutes: 5

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  onfailure:
    if: ${{ always() && github.event_name == 'schedule' && contains(needs.*.result, 'failure') }}
    needs: [build,
            prepare-ap, test-ap, test-ap-flaky, cleanup-ap,
            prepare-ca, test-ca, test-ca-flaky, cleanup-ca,
            prepare-eu, test-eu, test-eu-flaky, cleanup-eu,
            prepare-na, test-na, test-na-flaky, cleanup-na]
    name: Send failure webhook
    runs-on: ubuntu-latest
    steps:
      - run: |
          curl --silent --request POST "${{ secrets.FAILURE_WEBHOOK_URL }}" \
          --header 'Accept: application/json' \
          --header 'Content-Type: text/plain' \
          --data-raw '{
              "WorkflowName": "${{ github.workflow }}",
              "WorkflowURL": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "RepoName" : "${{ github.repository }}",
          }'