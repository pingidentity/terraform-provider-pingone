# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
name: Multi-region Acceptance Tests (Feature Flagged)
on:
  workflow_dispatch:
  # For systems with an upstream API that could drift unexpectedly (like most SaaS systems, etc.),
  # we recommend testing at a regular interval not necessarily tied to code changes. This will 
  # ensure you are alerted to something breaking due to an API change, even if the code did not
  # change.
  schedule:
    - cron: '0 3 * * *'
jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Build
        run: |
          make build

  prepare:
    name: Prepare ${{ matrix.region }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: [AP, CA, EU, NA]

    env:
      FEATURE_FLAG: DAVINCI
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets[format('{0}_PINGONE_FF_CLIENT_ID', matrix.region)] }}
      PINGONE_CLIENT_SECRET: ${{ secrets[format('{0}_PINGONE_FF_CLIENT_SECRET', matrix.region)] }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets[format('{0}_PINGONE_FF_ENVIRONMENT_ID', matrix.region)] }}
      PINGONE_REGION_CODE: ${{ matrix.region }}
      PINGONE_LICENSE_ID: ${{ secrets[format('{0}_PINGONE_FF_LICENSE_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_ID: ${{ secrets[format('{0}_PINGONE_FF_ORGANIZATION_ID', matrix.region)] }}

    timeout-minutes: 10

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to prepare
        run: |
          make sweep

  # run acceptance tests in a matrix with Terraform core versions and regions
  test:
    name: Acceptance Test ${{ matrix.region }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: [AP, CA, EU, NA]
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.11.*'
      # If we have issues due to simultaneous tests across regions, max-parallel can be set to 1 to run sequentially
      #max-parallel: 1

    env:
      FEATURE_FLAG: DAVINCI
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets[format('{0}_PINGONE_FF_CLIENT_ID', matrix.region)] }}
      PINGONE_CLIENT_SECRET: ${{ secrets[format('{0}_PINGONE_FF_CLIENT_SECRET', matrix.region)] }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets[format('{0}_PINGONE_FF_ENVIRONMENT_ID', matrix.region)] }}
      PINGONE_REGION_CODE: ${{ matrix.region }}
      PINGONE_LICENSE_ID: ${{ secrets[format('{0}_PINGONE_FF_LICENSE_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_ID: ${{ secrets[format('{0}_PINGONE_FF_ORGANIZATION_ID', matrix.region)] }}

    timeout-minutes: 45

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests
        timeout-minutes: 45
        run: |
          make testacc

  cleanup:
    name: Clean up ${{ matrix.region }}
    needs: [test]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      fail-fast: false
      matrix:
        region: [AP, CA, EU, NA]

    env:
      FEATURE_FLAG: DAVINCI
      PINGONE_TESTING_PROVIDER_VERSION: test
      PINGONE_CLIENT_ID: ${{ secrets[format('{0}_PINGONE_FF_CLIENT_ID', matrix.region)] }}
      PINGONE_CLIENT_SECRET: ${{ secrets[format('{0}_PINGONE_FF_CLIENT_SECRET', matrix.region)] }}
      PINGONE_ENVIRONMENT_ID: ${{ secrets[format('{0}_PINGONE_FF_ENVIRONMENT_ID', matrix.region)] }}
      PINGONE_REGION_CODE: ${{ matrix.region }}
      PINGONE_LICENSE_ID: ${{ secrets[format('{0}_PINGONE_FF_LICENSE_ID', matrix.region)] }}
      PINGONE_ORGANIZATION_ID: ${{ secrets[format('{0}_PINGONE_FF_ORGANIZATION_ID', matrix.region)] }}

    timeout-minutes: 10

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Sweep to cleanup
        run: |
          make sweep

  onfailure:
    if: ${{ always() && github.event_name == 'schedule' && contains(needs.*.outcome, 'failure') }}
    needs: [build, prepare, test, cleanup]
    name: Send failure webhook
    runs-on: ubuntu-latest
    steps:
      - run: |
          curl --silent --request POST "${{ secrets.FAILURE_WEBHOOK_URL }}" \
          --header 'Accept: application/json' \
          --header 'Content-Type: text/plain' \
          --data-raw '{
              "WorkflowName": "${{ github.workflow }}",
              "WorkflowURL": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "RepoName" : "${{ github.repository }}",
          }'
