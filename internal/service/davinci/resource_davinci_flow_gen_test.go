// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"context"
	"fmt"
	"os"
	"regexp"
	"testing"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	acctestlegacysdk "github.com/pingidentity/terraform-provider-pingone/internal/acctest/legacysdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest/service/base"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest/testhcl"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

func TestAccDavinciFlow_RemovalDrift(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_flow.%s", resourceName)

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")
	var environmentId string
	var id string

	var p1Client *pingone.APIClient
	var ctx = context.Background()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)

			p1Client = acctest.PreCheckTestClient(ctx, t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciFlow_MinimalHCL(resourceName, false),
				Check:  davinciFlow_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					davinciFlow_Delete(ctx, p1Client, t, environmentId, id)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
			// Test removal of the environment
			{
				Config: davinciFlow_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciFlow_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					base.Environment_RemovalDrift_PreConfig(ctx, p1Client, t, environmentId)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccDavinciFlow_MinimalMaximalClean(t *testing.T) {
	testAccDavinciFlow_MinimalMaximal(t, false)
}

func TestAccDavinciFlow_MinimalMaximalWithBootstrap(t *testing.T) {
	testAccDavinciFlow_MinimalMaximal(t, true)
}

func testAccDavinciFlow_MinimalMaximal(t *testing.T, withBootstrap bool) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_flow.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: davinciFlow_MinimalHCL(resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Delete the minimal model
				Config:  davinciFlow_MinimalHCL(resourceName, withBootstrap),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: davinciFlow_DeviceManagementMainFlowHCL(t, resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesComplete(resourceName),
			},
			{
				// Back to minimal model
				Config: davinciFlow_MinimalHCL(resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Back to complete model
				Config: davinciFlow_DeviceManagementMainFlowHCL(t, resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesComplete(resourceName),
			},
			{
				// Complete model with reordering of lists and sets
				Config: davinciFlow_DeviceManagementMainFlowReorderedHCL(t, resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesComplete(resourceName),
			},
			{
				// Test importing the resource
				Config:       davinciFlow_DeviceManagementMainFlowHCL(t, resourceName, withBootstrap),
				ResourceName: fmt.Sprintf("pingone_davinci_flow.%s", resourceName),
				ImportStateIdFunc: func() resource.ImportStateIdFunc {
					return func(s *terraform.State) (string, error) {
						rs, ok := s.RootModule().Resources[resourceFullName]
						if !ok {
							return "", fmt.Errorf("Resource Not found: %s", resourceFullName)
						}

						return fmt.Sprintf("%s/%s", rs.Primary.Attributes["environment_id"], rs.Primary.Attributes["id"]), nil
					}
				}(),
				ImportStateVerifyIdentifierAttribute: "id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func TestAccDavinciFlow_NewEnv(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: davinciFlow_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciFlow_CheckComputedValuesMinimal(resourceName),
			},
		},
	})
}

func TestAccDavinciFlow_BadParameters(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_flow.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciFlow_MinimalHCL(resourceName, true),
			},
			// Errors
			{
				ResourceName: resourceFullName,
				ImportState:  true,
				ExpectError:  regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "/",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "badformat/badformat",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
		},
	})
}

// Minimal HCL with a one-node "flow"
func davinciFlow_MinimalHCL(resourceName string, withBootstrap bool) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_flow" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  name          = "%[2]s"
  description   = "This is a demo flow"
  color         = "#00FF00"
  
  graph_data = {
    elements = {
      edges = []
      nodes  = [{
        data = {
          id        = "8bnj41592a"
          node_type = "CONNECTION"
          connector_id = "pingOneSSOConnector"
          label     = "PingOne"
          status    = "configured"
          capability_name = "userLookup"
          type      = "action"
          properties = jsonencode({
            "additionalUserProperties": {
              "value": []
            },
            "username": {
              "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"5282e30d-6e05-499c-ae68-0069fba776f1\"\n      }\n    ]\n  }\n]"
            },
            "population": {
              "value": "c9f3fb3f-11e9-4eb0-b4ba-9fb7789a8418"
            },
            "userIdentifierForFindUser": {
              "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"5282e30d-6e05-499c-ae68-0069fba776f1\"\n      }\n    ]\n  }\n]"
            }
          })
        }
        position = {
          x = 420
          y = 360
        }
        group       = "nodes"
        removed     = false
        selected    = false
        selectable  = true
        locked      = false
        grabbable   = true
        pannable    = false
        classes     = ""
      }]
    }

    data = "{}"
    
    box_selection_enabled = true
    user_zooming_enabled  = true
    zooming_enabled = true
    zoom                  = 1
    min_zoom              = 0.01
    max_zoom              = 10000
    panning_enabled       = true
    user_panning_enabled  = true
    
    pan = {
      x = 0
      y = 0
    }
    
    renderer = jsonencode({
      "name": "null"
    })
  }
  
  settings = {
    csp = "worker-src 'self' blob:; script-src 'self' https://cdn.jsdelivr.net https://code.jquery.com https://devsdk.singularkey.com http://cdnjs.cloudflare.com 'unsafe-inline' 'unsafe-eval';"
    intermediate_loading_screen_css  = ""
    intermediate_loading_screen_html = ""
    log_level                        = 2
  }
  
  output_schema = {
    output = jsonencode({
      "type": "object",
      "properties": {},
      "additionalProperties": true
    })
  }
  
  trigger = {
    type = "AUTHENTICATION"
  }
}
`, acctest.DaVinciSandboxEnvironment(withBootstrap), resourceName)
}

// HCL for the OOTB "Device Management - Main Flow" flow
func davinciFlow_DeviceManagementMainFlowHCL(t *testing.T, resourceName string, withBootstrap bool) string {
	hcl, err := testhcl.ReadTestHcl("pingone_davinci_flow/ootb_device_management.tf")
	if err != nil {
		t.Fatalf("failed to read HCL in davinciFlow_DeviceManagementMainFlowHCL: %v", err)
	}
	return fmt.Sprintf(hcl, acctest.DaVinciSandboxEnvironment(withBootstrap), resourceName)
}

// HCL for the OOTB "Device Management - Main Flow" flow with reorderings for lists and sets
func davinciFlow_DeviceManagementMainFlowReorderedHCL(t *testing.T, resourceName string, withBootstrap bool) string {
	hcl, err := testhcl.ReadTestHcl("pingone_davinci_flow/ootb_device_management_reordered.tf")
	if err != nil {
		t.Fatalf("failed to read HCL in davinciFlow_DeviceManagementMainFlowReorderedHCL: %v", err)
	}
	return fmt.Sprintf(hcl, acctest.DaVinciSandboxEnvironment(withBootstrap), resourceName)
}

func davinciFlow_NewEnvHCL(environmentName, licenseID, resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_flow" "%[3]s" {
  environment_id = pingone_environment.%[2]s.id
  name          = "%[3]s"
  description   = "This is a demo flow"
  color         = "#00FF00"
  
  graph_data = {
    elements = {
      edges = []
      nodes  = [{
        data = {
          id        = "8bnj41592a"
          node_type = "CONNECTION"
		  // connection_id will be computed
          connector_id = "pingOneSSOConnector"
          label     = "PingOne"
          status    = "configured"
          capability_name = "userLookup"
          type      = "action"
          properties = jsonencode({
            "additionalUserProperties": {
              "value": []
            },
            "username": {
              "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"5282e30d-6e05-499c-ae68-0069fba776f1\"\n      }\n    ]\n  }\n]"
            },
            "population": {
              "value": "c9f3fb3f-11e9-4eb0-b4ba-9fb7789a8418"
            },
            "userIdentifierForFindUser": {
              "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"5282e30d-6e05-499c-ae68-0069fba776f1\"\n      }\n    ]\n  }\n]"
            }
          })
        }
        position = {
          x = 420
          y = 360
        }
        group       = "nodes"
        removed     = false
        selected    = false
        selectable  = true
        locked      = false
        grabbable   = true
        pannable    = false
        classes     = ""
      }]
    }

    data = "{}"
    
    box_selection_enabled = true
    user_zooming_enabled  = true
    zooming_enabled = true
    zoom                  = 1
    min_zoom              = 0.01
    max_zoom              = 10000
    pannable              = true
    panning_enabled       = true
    user_panning_enabled  = true
    
    pan = {
      x = 0
      y = 0
    }
    
    renderer = jsonencode({
      "name": "null"
    })
  }
  
  settings = {
    csp = "worker-src 'self' blob:; script-src 'self' https://cdn.jsdelivr.net https://code.jquery.com https://devsdk.singularkey.com http://cdnjs.cloudflare.com 'unsafe-inline' 'unsafe-eval';"
    intermediate_loading_screen_css  = ""
    intermediate_loading_screen_html = ""
    log_level                        = 2
  }
  
  output_schema = {
    output = jsonencode({
      "type": "object",
      "properties": {},
      "additionalProperties": true
    })
  }
  
  trigger = {
    type = "AUTHENTICATION"
  }
}
`, acctestlegacysdk.MinimalSandboxEnvironment(environmentName, licenseID), environmentName, resourceName)
}

// Validate any computed values when applying minimal HCL
func davinciFlow_CheckComputedValuesMinimal(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.#", "1"),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "pingOneSSOConnector",
		}),
		resource.TestCheckResourceAttrSet(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "current_version"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "enabled", "true"),
		resource.TestMatchResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "id", verify.P1DVResourceIDRegexp),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "input_schema.*", map[string]string{
			"description":            "A string that specifies an identifier to pre-fill the username field of a sign-on screen.",
			"is_expanded":            "true",
			"preferred_control_type": "textField",
			"preferred_data_type":    "string",
			"property_name":          "loginHint",
			"required":               "false",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "input_schema.*", map[string]string{
			"description":            "An integer that specifies the maximum amount of time allowed (in seconds) since the user last authenticated. If the user's last sign on in the session is greater than the integer value specified in this property, then existing session information cannot be used to skip authentication or influence any authentication logic. This value is set automatically to 0 if prompt=login is set for an OIDC application or if ForceAuthn=true is set for a SAML application. Otherwise, this value is set to the max_age property value for OIDC applications, if present, or omitted otherwise.",
			"is_expanded":            "true",
			"preferred_control_type": "textField",
			"preferred_data_type":    "number",
			"property_name":          "maxSecondsSinceLastSignOn",
			"required":               "false",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "input_schema.*", map[string]string{
			"description":            "An object that specifies all the parameters from the OIDC authorization request.",
			"is_expanded":            "true",
			"preferred_control_type": "textField",
			"preferred_data_type":    "object",
			"property_name":          "authorizationRequest",
			"required":               "false",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "input_schema.*", map[string]string{
			"description":            "An object that specifies all the parameters from the SAML request.",
			"is_expanded":            "true",
			"preferred_control_type": "textField",
			"preferred_data_type":    "object",
			"property_name":          "samlRequest",
			"required":               "false",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "input_schema.*", map[string]string{
			"description":            "An object that specifies all the parameters from the WS-FED request.",
			"is_expanded":            "true",
			"preferred_control_type": "textField",
			"preferred_data_type":    "object",
			"property_name":          "wsFedRequest",
			"required":               "false",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "input_schema.*", map[string]string{
			"description":            "An object that specifies the configuration information about the PingOne application that initiated the authentication request.",
			"is_expanded":            "true",
			"preferred_control_type": "textField",
			"preferred_data_type":    "object",
			"property_name":          "application",
			"required":               "true",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "input_schema.*", map[string]string{
			"description":            "Internal information that is only useful to P1. This is meant to be opaque and may be changed or removed in the future.",
			"is_expanded":            "true",
			"preferred_control_type": "textField",
			"preferred_data_type":    "object",
			"property_name":          "relayState",
			"required":               "true",
		}),
	)
}

// Validate any computed values when applying complete HCL
// TODO add any remaining computed attributes here and above
func davinciFlow_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.#", "7"),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "annotationConnector",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "flowConnector",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "functionsConnector",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "httpConnector",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "nodeConnector",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "pingOneMfaConnector",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "connectors.*", map[string]string{
			"id": "pingOneSSOConnector",
		}),
		resource.TestCheckResourceAttrSet(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "current_version"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "enabled", "true"),
		resource.TestMatchResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "id", verify.P1DVResourceIDRegexp),
	)
}

func davinciFlow_GetIDs(resourceName string, environmentId, id *string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Resource Not found: %s", resourceName)
		}
		if environmentId != nil {
			*environmentId = rs.Primary.Attributes["environment_id"]
		}
		if id != nil {
			*id = rs.Primary.Attributes["id"]
		}

		return nil
	}
}

// Delete the resource
func davinciFlow_Delete(ctx context.Context, apiClient *pingone.APIClient, t *testing.T, environmentId, id string) {
	if environmentId == "" || id == "" {
		t.Fatalf("One of the identifier attributes can't be determined. environmentId: '%s' id: '%s'", environmentId, id)
	}

	_, err := apiClient.DaVinciFlowsApi.DeleteFlowById(ctx, uuid.MustParse(environmentId), id).Execute()
	if err != nil {
		t.Fatalf("Failed to delete davinci_flow: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func davinciFlow_CheckDestroy(s *terraform.State) error {
	var ctx = context.Background()

	p1Client, err := acctest.TestClient(ctx)

	if err != nil {
		return err
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "pingone_davinci_flow" {
			continue
		}
		shouldContinue, err := acctest.CheckParentEnvironmentDestroy(ctx, p1Client, rs.Primary.Attributes["environment_id"])
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		_, r, err := p1Client.DaVinciFlowsApi.GetFlowById(ctx, uuid.MustParse(rs.Primary.Attributes["environment_id"]), rs.Primary.Attributes["id"]).Execute()

		shouldContinue, err = acctest.CheckForResourceDestroy(r, err)
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		return fmt.Errorf("PingOne davinci_flow Instance %s still exists", rs.Primary.ID)
	}

	return nil
}
