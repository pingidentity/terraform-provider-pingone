// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"context"
	"fmt"
	"os"
	"regexp"
	"testing"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	acctestlegacysdk "github.com/pingidentity/terraform-provider-pingone/internal/acctest/legacysdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest/service/base"
)

func TestAccDavinciFlow_RemovalDrift(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_flow.%s", resourceName)

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")
	var environmentId string
	var id string

	var p1Client *pingone.APIClient
	var ctx = context.Background()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)

			p1Client = acctest.PreCheckTestClient(ctx, t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciFlow_MinimalHCL(resourceName, false),
				Check:  davinciFlow_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					davinciFlow_Delete(ctx, p1Client, t, environmentId, id)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
			// Test removal of the environment
			{
				Config: davinciFlow_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciFlow_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					base.Environment_RemovalDrift_PreConfig(ctx, p1Client, t, environmentId)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccDavinciFlow_MinimalMaximalClean(t *testing.T) {
	testAccDavinciFlow_MinimalMaximal(t, false)
}

func TestAccDavinciFlow_MinimalMaximalWithBootstrap(t *testing.T) {
	testAccDavinciFlow_MinimalMaximal(t, true)
}

func testAccDavinciFlow_MinimalMaximal(t *testing.T, withBootstrap bool) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_flow.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: davinciFlow_MinimalHCL(resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Delete the minimal model
				Config:  davinciFlow_MinimalHCL(resourceName, withBootstrap),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: davinciFlow_CompleteHCL(resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesComplete(resourceName),
			},
			{
				// Back to minimal model
				Config: davinciFlow_MinimalHCL(resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Back to complete model
				Config: davinciFlow_CompleteHCL(resourceName, withBootstrap),
				Check:  davinciFlow_CheckComputedValuesComplete(resourceName),
			},
			{
				// Complete model with reordering of lists and sets
				Config: davinciFlow_CompleteReorderedHCL(resourceName, withBootstrap),
				//TODO update checks if different results are expected after reordering
				Check: davinciFlow_CheckComputedValuesComplete(resourceName),
			},
			{
				// Test importing the resource
				Config:       davinciFlow_CompleteHCL(resourceName, withBootstrap),
				ResourceName: fmt.Sprintf("pingone_davinci_flow.%s", resourceName),
				ImportStateIdFunc: func() resource.ImportStateIdFunc {
					return func(s *terraform.State) (string, error) {
						rs, ok := s.RootModule().Resources[resourceFullName]
						if !ok {
							return "", fmt.Errorf("Resource Not found: %s", resourceFullName)
						}

						return fmt.Sprintf("%s/%s", rs.Primary.Attributes["environment_id"], rs.Primary.Attributes["id"]), nil
					}
				}(),
				ImportStateVerifyIdentifierAttribute: "id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func TestAccDavinciFlow_NewEnv(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: davinciFlow_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciFlow_CheckComputedValuesMinimal(resourceName),
			},
		},
	})
}

func TestAccDavinciFlow_BadParameters(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_flow.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciFlow_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciFlow_MinimalHCL(resourceName, true),
			},
			// Errors
			{
				ResourceName: resourceFullName,
				ImportState:  true,
				ExpectError:  regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "/",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "badformat/badformat",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
		},
	})
}

// Minimal HCL with only required values set
func davinciFlow_MinimalHCL(resourceName string, withBootstrap bool) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_flow" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  id = //TODO
  // TODO set values for minimal fields
  name = //TODO
}
`, acctest.DaVinciSandboxEnvironment(withBootstrap), resourceName)
}

// Maximal HCL with all values set where possible
func davinciFlow_CompleteHCL(resourceName string, withBootstrap bool) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_flow" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  id = //TODO
  // TODO set values for complete fields
  color = //TODO
  description = //TODO
  graph_data = {
    box_selection_enabled = //TODO
    data = //TODO
    elements = {
      edges = [
        {
          classes = //TODO
          data = {
            id = //TODO
            source = //TODO
            target = //TODO
          }
          grabbable = //TODO
          group = //TODO
          locked = //TODO
          pannable = //TODO
          position = {
            x = //TODO
            y = //TODO
          }
          removed = //TODO
          selectable = //TODO
          selected = //TODO
        }
      ]
      nodes = [
        {
          classes = //TODO
          data = {
            capability_name = //TODO
            connection_id = //TODO
            connector_id = //TODO
            id = //TODO
            label = //TODO
            name = //TODO
            node_type = //TODO
            properties = //TODO
            status = //TODO
            type = //TODO
          }
          grabbable = //TODO
          group = //TODO
          locked = //TODO
          pannable = //TODO
          position = {
            x = //TODO
            y = //TODO
          }
          removed = //TODO
          selectable = //TODO
          selected = //TODO
        }
      ]
    }
    max_zoom = //TODO
    min_zoom = //TODO
    pan = {
      x = //TODO
      y = //TODO
    }
    panning_enabled = //TODO
    renderer = //TODO
    user_panning_enabled = //TODO
    user_zooming_enabled = //TODO
    zoom = //TODO
    zooming_enabled = //TODO
  }
  input_schema = [
    {
      description = //TODO
      preferred_control_type = //TODO
      preferred_data_type = //TODO
      property_name = //TODO
      required = //TODO
    }
  ]
  name = //TODO
  output_schema = {
    output = //TODO
  }
  settings = {
    csp = //TODO
    css = //TODO
    css_links = //TODO
    custom_error_screen_brand_logo_url = //TODO
    custom_error_show_footer = //TODO
    custom_favicon_link = //TODO
    custom_logo_urlselection = //TODO
    custom_title = //TODO
    default_error_screen_brand_logo = //TODO
    flow_http_timeout_in_seconds = //TODO
    flow_timeout_in_seconds = //TODO
    intermediate_loading_screen_css = //TODO
    intermediate_loading_screen_html = //TODO
    js_custom_flow_player = //TODO
    js_links = [
      {
        crossorigin = //TODO
        defer = //TODO
        integrity = //TODO
        label = //TODO
        referrerpolicy = //TODO
        type = //TODO
        value = //TODO
      }
    ]
    log_level = //TODO
    require_authentication_to_initiate = //TODO
    scrub_sensitive_info = //TODO
    sensitive_info_fields = //TODO
    use_csp = //TODO
    use_custom_css = //TODO
    use_custom_flow_player = //TODO
    use_custom_script = //TODO
    use_intermediate_loading_screen = //TODO
    validate_on_save = //TODO
  }
  trigger = {
    type = //TODO
  }
}
`, acctest.DaVinciSandboxEnvironment(withBootstrap), resourceName)
}

// Maximal HCL with all values set, with ordering changes in lists and sets from the default CompleteHCL
func davinciFlow_CompleteReorderedHCL(resourceName string, withBootstrap bool) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_flow" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  id = //TODO
  // TODO set values for complete fields, with ordering changes
  color = //TODO
  description = //TODO
  graph_data = {
    box_selection_enabled = //TODO
    data = //TODO
    elements = {
      edges = [
        {
          classes = //TODO
          data = {
            id = //TODO
            source = //TODO
            target = //TODO
          }
          grabbable = //TODO
          group = //TODO
          locked = //TODO
          pannable = //TODO
          position = {
            x = //TODO
            y = //TODO
          }
          removed = //TODO
          selectable = //TODO
          selected = //TODO
        }
      ]
      nodes = [
        {
          classes = //TODO
          data = {
            capability_name = //TODO
            connection_id = //TODO
            connector_id = //TODO
            id = //TODO
            label = //TODO
            name = //TODO
            node_type = //TODO
            properties = //TODO
            status = //TODO
            type = //TODO
          }
          grabbable = //TODO
          group = //TODO
          locked = //TODO
          pannable = //TODO
          position = {
            x = //TODO
            y = //TODO
          }
          removed = //TODO
          selectable = //TODO
          selected = //TODO
        }
      ]
    }
    max_zoom = //TODO
    min_zoom = //TODO
    pan = {
      x = //TODO
      y = //TODO
    }
    panning_enabled = //TODO
    renderer = //TODO
    user_panning_enabled = //TODO
    user_zooming_enabled = //TODO
    zoom = //TODO
    zooming_enabled = //TODO
  }
  input_schema = [
    {
      description = //TODO
      preferred_control_type = //TODO
      preferred_data_type = //TODO
      property_name = //TODO
      required = //TODO
    }
  ]
  name = //TODO
  output_schema = {
    output = //TODO
  }
  settings = {
    csp = //TODO
    css = //TODO
    css_links = //TODO
    custom_error_screen_brand_logo_url = //TODO
    custom_error_show_footer = //TODO
    custom_favicon_link = //TODO
    custom_logo_urlselection = //TODO
    custom_title = //TODO
    default_error_screen_brand_logo = //TODO
    flow_http_timeout_in_seconds = //TODO
    flow_timeout_in_seconds = //TODO
    intermediate_loading_screen_css = //TODO
    intermediate_loading_screen_html = //TODO
    js_custom_flow_player = //TODO
    js_links = [
      {
        crossorigin = //TODO
        defer = //TODO
        integrity = //TODO
        label = //TODO
        referrerpolicy = //TODO
        type = //TODO
        value = //TODO
      }
    ]
    log_level = //TODO
    require_authentication_to_initiate = //TODO
    scrub_sensitive_info = //TODO
    sensitive_info_fields = //TODO
    use_csp = //TODO
    use_custom_css = //TODO
    use_custom_flow_player = //TODO
    use_custom_script = //TODO
    use_intermediate_loading_screen = //TODO
    validate_on_save = //TODO
  }
  trigger = {
    type = //TODO
  }
}
`, acctest.DaVinciSandboxEnvironment(withBootstrap), resourceName)
}

func davinciFlow_NewEnvHCL(environmentName, licenseID, resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_flow" "%[3]s" {
  environment_id = pingone_environment.%[2]s.id
  id = //TODO
  // TODO set values for minimal fields
  name = //TODO
}
`, acctestlegacysdk.MinimalSandboxEnvironment(environmentName, licenseID), environmentName, resourceName)
}

// Validate any computed values when applying minimal HCL
// TODO remove any values that are not computed from this check
// TODO set expected values
func davinciFlow_CheckComputedValuesMinimal(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "color", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "current_version", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "deployed_at", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "description", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "dvlinter_error_count", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "dvlinter_warning_count", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.box_selection_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.data", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.max_zoom", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.min_zoom", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.panning_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.renderer", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.user_panning_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.user_zooming_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.zoom", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.zooming_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "output_schema.output", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "published_version", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.csp", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.css", "expected_value"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.css_links.*", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_error_screen_brand_logo_url", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_error_show_footer", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_favicon_link", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_logo_urlselection", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_title", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.default_error_screen_brand_logo", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.flow_http_timeout_in_seconds", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.flow_timeout_in_seconds", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.intermediate_loading_screen_css", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.intermediate_loading_screen_html", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.js_custom_flow_player", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.log_level", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.require_authentication_to_initiate", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.scrub_sensitive_info", "expected_value"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.sensitive_info_fields.*", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_csp", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_custom_css", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_custom_flow_player", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_custom_script", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_intermediate_loading_screen", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.validate_on_save", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.mfa.enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.mfa.time", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.mfa.time_format", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.pwd.enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.pwd.time", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.pwd.time_format", "expected_value"),
	)
}

// Validate any computed values when applying complete HCL
// TODO This may not be needed as a separate function from minimal HCL if the expected values match
// TODO remove any values that are not computed from this check
// TODO set expected values
func davinciFlow_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "color", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "current_version", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "deployed_at", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "description", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "dvlinter_error_count", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "dvlinter_warning_count", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.box_selection_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.data", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.max_zoom", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.min_zoom", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.panning_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.renderer", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.user_panning_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.user_zooming_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.zoom", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "graph_data.zooming_enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "output_schema.output", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "published_version", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.csp", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.css", "expected_value"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.css_links.*", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_error_screen_brand_logo_url", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_error_show_footer", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_favicon_link", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_logo_urlselection", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.custom_title", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.default_error_screen_brand_logo", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.flow_http_timeout_in_seconds", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.flow_timeout_in_seconds", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.intermediate_loading_screen_css", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.intermediate_loading_screen_html", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.js_custom_flow_player", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.log_level", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.require_authentication_to_initiate", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.scrub_sensitive_info", "expected_value"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.sensitive_info_fields.*", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_csp", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_custom_css", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_custom_flow_player", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_custom_script", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.use_intermediate_loading_screen", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "settings.validate_on_save", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.mfa.enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.mfa.time", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.mfa.time_format", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.pwd.enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.pwd.time", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_flow.%s", resourceName), "trigger.configuration.pwd.time_format", "expected_value"),
	)
}

func davinciFlow_GetIDs(resourceName string, environmentId, id *string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Resource Not found: %s", resourceName)
		}
		if environmentId != nil {
			*environmentId = rs.Primary.Attributes["environment_id"]
		}
		if id != nil {
			*id = rs.Primary.Attributes["id"]
		}

		return nil
	}
}

// Delete the resource
func davinciFlow_Delete(ctx context.Context, apiClient *pingone.APIClient, t *testing.T, environmentId, id string) {
	if environmentId == "" || id == "" {
		t.Fatalf("One of the identifier attributes can't be determined. environmentId: '%s' id: '%s'", environmentId, id)
	}

	_, err := apiClient.DaVinciFlowsApi.DeleteFlowById(ctx, uuid.MustParse(environmentId), id).Execute()
	if err != nil {
		t.Fatalf("Failed to delete davinci_flow: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func davinciFlow_CheckDestroy(s *terraform.State) error {
	var ctx = context.Background()

	p1Client, err := acctest.TestClient(ctx)

	if err != nil {
		return err
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "pingone_davinci_flow" {
			continue
		}
		shouldContinue, err := acctest.CheckParentEnvironmentDestroy(ctx, p1Client, rs.Primary.Attributes["environment_id"])
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		_, r, err := p1Client.DaVinciFlowsApi.GetFlowById(ctx, uuid.MustParse(rs.Primary.Attributes["environment_id"]), rs.Primary.Attributes["id"]).Execute()

		shouldContinue, err = acctest.CheckForResourceDestroy(r, err)
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		return fmt.Errorf("PingOne davinci_flow Instance %s still exists", rs.Primary.ID)
	}

	return nil
}
