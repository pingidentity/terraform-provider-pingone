// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
)

func TestAccDavinciConnectorInstanceDataSource_ByIDFull(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy, //TODO this method should exist in the generated resource acceptance test
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDavinciConnectorInstanceDataSourceConfig_ByIDFull(resourceName),
				Check:  davinciConnectorInstanceDataSource_CheckComputedValuesComplete(resourceName),
			},
		},
	})
}

//TODO test for selecting by other attributes, if applicable

func TestAccDavinciConnectorInstanceDataSource_NotFound(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy, //TODO this method should exist in the generated resource acceptance test
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config:      testAccDavinciConnectorInstanceDataSourceConfig_NotFoundByID(resourceName),
				ExpectError: regexp.MustCompile("There is no role with id"),
			},
			//TODO add other checks for selecting by other attributes, if applicable
		},
	})
}

func testAccDavinciConnectorInstanceDataSourceConfig_Full(resourceName string) string {
	return fmt.Sprintf(`
resource "pingone_davinci_connector_instance" "%[1]s" {
  environment_id = data.pingone_environment.general_test.id
  connector_instance_id = //TODO
  // TODO set values for complete fields
  instance_id = //TODO
  name = //TODO
}
`, resourceName)
}

func testAccDavinciConnectorInstanceDataSourceConfig_ByIDFull(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

    %[3]s

data "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector_instance_id = pingone_davinci_connector_instance.%[2]s.id
}`, acctest.GenericSandboxEnvironment(), resourceName, testAccDavinciConnectorInstanceDataSourceConfig_Full(resourceName))
}

// Validate any computed values when applying complete HCL
// TODO remove any values that are not computed from this check
// TODO set expected values
func davinciConnectorInstanceDataSource_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "connector.id", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "id", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "instance_id", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "name", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "properties", "expected_value"),
	)
}
