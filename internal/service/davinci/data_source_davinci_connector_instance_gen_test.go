// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

func TestAccDavinciConnectorInstanceDataSource_ByIDFull(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDavinciConnectorInstanceDataSourceConfig_ByIDFull(resourceName),
				Check:  davinciConnectorInstanceDataSource_CheckComputedValuesComplete(resourceName),
			},
		},
	})
}

//TODO test for selecting by other attributes, if applicable

func TestAccDavinciConnectorInstanceDataSource_NotFound(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config:      testAccDavinciConnectorInstanceDataSourceConfig_NotFoundByID(resourceName),
				ExpectError: regexp.MustCompile("The requested resource was not found"),
			},
		},
	})
}

func testAccDavinciConnectorInstanceDataSourceConfig_Full(resourceName string) string {
	return fmt.Sprintf(`
resource "pingone_davinci_connector_instance" "%[1]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "webhookConnector"
  }
  name = "%[1]s"
  properties = jsonencode({
        "urls": {
            "type": "string",
            "displayName": "Register URLs",
            "createdDate": 12345,
            "customerId": "12345",
            "companyId": "singularkey",
            "preferredControlType": "urlsTableView",
            "info": "POST requests will be made to these registered url as selected later.",
            "required": true,
            "value": [
                {
                    "name": "example",
                    "url": "https://example.com",
                    "token": "mytoken",
                    "value": "https://example.com"
                }
            ]
        }
    })
}
`, resourceName)
}

func testAccDavinciConnectorInstanceDataSourceConfig_ByIDFull(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

    %[3]s

data "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  instance_id = pingone_davinci_connector_instance.%[2]s.id
}`, acctest.GenericSandboxEnvironment(), resourceName, testAccDavinciConnectorInstanceDataSourceConfig_Full(resourceName))
}

func testAccDavinciConnectorInstanceDataSourceConfig_NotFoundByID(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

data "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  instance_id = "9c052a8a14be44e48f072662569994ce" // dummy generic ID
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Validate any computed values when applying complete HCL
func davinciConnectorInstanceDataSource_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "connector.id", "webhookConnector"),
		resource.TestMatchResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "id", verify.P1DVResourceIDRegexp),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "name", resourceName),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector_instance.%s", resourceName), "properties",
			"{\"urls\":{\"companyId\":\"singularkey\",\"createdDate\":12345,\"customerId\":\"12345\",\"displayName\":\"Register URLs\",\"info\":\"POST requests will be made to these registered url as selected later.\",\"preferredControlType\":\"urlsTableView\",\"required\":true,\"type\":\"string\",\"value\":[{\"name\":\"example\",\"token\":\"mytoken\",\"url\":\"https://example.com\",\"value\":\"https://example.com\"}]}}"),
	)
}
