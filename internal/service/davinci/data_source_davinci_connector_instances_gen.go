// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"regexp"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
)

var (
	_ datasource.DataSource              = &davinciConnectorInstancesDataSource{}
	_ datasource.DataSourceWithConfigure = &davinciConnectorInstancesDataSource{}
)

func NewDavinciConnectorInstancesDataSource() datasource.DataSource {
	return &davinciConnectorInstancesDataSource{}
}

type davinciConnectorInstancesDataSource serviceClientType

func (r *davinciConnectorInstancesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_connector_instances"
}

func (r *davinciConnectorInstancesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciConnectorInstancesDataSourceModel struct {
	ConnectorInstances types.Set    `tfsdk:"connector_instances"`
	EnvironmentId      types.String `tfsdk:"environment_id"`
	Id                 types.String `tfsdk:"id"`
}

func (r *davinciConnectorInstancesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source to retrieve all DaVinci connector instances.",
		Attributes: map[string]schema.Attribute{
			"connector_instances": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"connector": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
							},
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"properties": schema.StringAttribute{
							CustomType: jsontypes.NormalizedType{},
							Computed:   true,
						},
					},
				},
				Computed: true,
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment to read instances from. Must be a valid PingOne resource ID.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this data source.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
		},
	}
}

func (state *davinciConnectorInstancesDataSourceModel) readClientResponse(response *pingone.DaVinciConnectorInstanceCollectionResponse) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// connector_instances
	connectorInstancesConnectorAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	connectorInstancesAttrTypes := map[string]attr.Type{
		"connector":  types.ObjectType{AttrTypes: connectorInstancesConnectorAttrTypes},
		"id":         types.StringType,
		"name":       types.StringType,
		"properties": jsontypes.NormalizedType{},
	}
	connectorInstancesElementType := types.ObjectType{AttrTypes: connectorInstancesAttrTypes}
	var connectorInstancesValues []attr.Value
	for _, connectorInstancesResponseValue := range response.Embedded.ConnectorInstances {
		connectorInstancesConnectorValue, diags := types.ObjectValue(connectorInstancesConnectorAttrTypes, map[string]attr.Value{
			"id": types.StringValue(connectorInstancesResponseValue.Connector.Id),
		})
		respDiags.Append(diags...)
		connectorInstancesPropertiesValue := jsontypes.NewNormalizedNull()
		if connectorInstancesResponseValue.Properties != nil {
			propertiesBytes, err := json.Marshal(connectorInstancesResponseValue.Properties)
			if err != nil {
				respDiags.AddError(
					"Error Marshaling Properties",
					fmt.Sprintf("An error occurred while marshaling the connector instance properties: %s", err.Error()),
				)
			} else {
				connectorInstancesPropertiesValue = jsontypes.NewNormalizedValue(string(propertiesBytes))
			}
		}
		connectorInstancesValue, diags := types.ObjectValue(connectorInstancesAttrTypes, map[string]attr.Value{
			"connector":  connectorInstancesConnectorValue,
			"id":         types.StringValue(connectorInstancesResponseValue.Id),
			"name":       types.StringValue(connectorInstancesResponseValue.Name),
			"properties": connectorInstancesPropertiesValue,
		})
		respDiags.Append(diags...)
		connectorInstancesValues = append(connectorInstancesValues, connectorInstancesValue)
	}
	connectorInstancesValue, diags := types.SetValue(connectorInstancesElementType, connectorInstancesValues)
	respDiags.Append(diags...)
	state.ConnectorInstances = connectorInstancesValue
	// id
	state.Id = types.StringValue(uuid.New().String())
	return respDiags
}

func (r *davinciConnectorInstancesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data davinciConnectorInstancesDataSourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciConnectorInstanceCollectionResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciConnectorsApi.GetConnectorInstances(ctx, environmentIdUuid).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetConnectorInstances",
		framework.DefaultCustomError,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
