// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
)

var (
	_ resource.ResourceWithValidateConfig = &davinciVariableResource{}
)

func (r *davinciVariableResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	var data davinciVariableResourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Ensure the specific value types correspond to the data_type
	if !data.DataType.IsNull() && !data.DataType.IsUnknown() {
		if !data.Value.IsNull() && !data.Value.IsUnknown() {
			valueAttrs := data.Value.Attributes()
			switch data.DataType.ValueString() {
			case "boolean":
				if valueAttrs["bool"].IsNull() {
					resp.Diagnostics.AddAttributeError(
						path.Root("value"),
						"Invalid Value for Data Type",
						"The `value.bool` attribute must be set when `data_type` is set to `boolean`",
					)
				}
			case "number":
				if valueAttrs["float32"].IsNull() {
					resp.Diagnostics.AddAttributeError(
						path.Root("value"),
						"Invalid Value for Data Type",
						"The `value.float32` attribute must be set when `data_type` is set to `number`",
					)
				}
			case "object":
				if valueAttrs["json_object"].IsNull() {
					resp.Diagnostics.AddAttributeError(
						path.Root("value"),
						"Invalid Value for Data Type",
						"The `value.json_object` attribute must be set when `data_type` is set to `object`",
					)
				}
			case "secret":
				if valueAttrs["secret_string"].IsNull() {
					resp.Diagnostics.AddAttributeError(
						path.Root("value"),
						"Invalid Value for Data Type",
						"The `value.secret_string` attribute must be set when `data_type` is set to `secret`",
					)
				}
			case "string":
				if valueAttrs["string"].IsNull() {
					resp.Diagnostics.AddAttributeError(
						path.Root("value"),
						"Invalid Value for Data Type",
						"The `value.string` attribute must be set when `data_type` is set to `string`",
					)
				}
			}
		}
		// Ensure context is "company" when using secret variables
		if data.DataType.ValueString() == "secret" && !data.Context.IsNull() && !data.Context.IsUnknown() {
			if data.Context.ValueString() != "company" {
				resp.Diagnostics.AddAttributeError(
					path.Root("context"),
					"Invalid Context for Data Type",
					"The `context` attribute must be set to `company` when `data_type` is set to `secret`",
				)
			}
		}
	}

	// Ensure flow is set if and only if context is "flow"
	if !data.Context.IsNull() && !data.Context.IsUnknown() {
		if data.Context.ValueString() == "flow" {
			if data.Flow.IsNull() {
				resp.Diagnostics.AddAttributeError(
					path.Root("flow"),
					"Flow Required for Context",
					"The `flow` attribute must be set when `context` is set to `flow`.",
				)
			}
		} else {
			if !data.Flow.IsNull() && !data.Flow.IsUnknown() {
				resp.Diagnostics.AddAttributeError(
					path.Root("flow"),
					"Flow Not Applicable for Context",
					"The `flow` attribute must not be set when `context` is not set to `flow`.",
				)
			}
		}
	}

	// Ensure mutable is true if there is no value set
	if data.Value.IsNull() && !data.Mutable.IsNull() && !data.Mutable.IsUnknown() && !data.Mutable.ValueBool() {
		resp.Diagnostics.AddAttributeError(
			path.Root("mutable"),
			"Invalid Mutable Value",
			"The `mutable` attribute must be set to `true` when no `value` is set.",
		)
	}
}
