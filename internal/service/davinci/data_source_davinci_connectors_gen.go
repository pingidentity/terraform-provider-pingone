// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"fmt"
	"net/http"
	"regexp"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
)

var (
	_ datasource.DataSource              = &davinciConnectorsDataSource{}
	_ datasource.DataSourceWithConfigure = &davinciConnectorsDataSource{}
)

func NewDavinciConnectorsDataSource() datasource.DataSource {
	return &davinciConnectorsDataSource{}
}

type davinciConnectorsDataSource serviceClientType

func (r *davinciConnectorsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_connectors"
}

func (r *davinciConnectorsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciConnectorsDataSourceModel struct {
	Connectors    types.Set    `tfsdk:"connectors"`
	EnvironmentId types.String `tfsdk:"environment_id"`
	Id            types.String `tfsdk:"id"`
}

func (r *davinciConnectorsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source to retrieve all DaVinci connectors.",
		Attributes: map[string]schema.Attribute{
			"connectors": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"metadata": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"colors": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"canvas": schema.StringAttribute{
											Computed: true,
										},
										"canvas_text": schema.StringAttribute{
											Computed: true,
										},
										"dark": schema.StringAttribute{
											Computed: true,
										},
									},
									Computed: true,
								},
								"logos": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"canvas": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{
												"image_file_name": schema.StringAttribute{
													Computed: true,
												},
											},
											Computed: true,
										},
									},
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed:            true,
									Description:         "Options are \"core\", \"ping\", \"service\".",
									MarkdownDescription: "Options are `core`, `ping`, `service`.",
								},
								"vendor": schema.StringAttribute{
									Computed: true,
								},
							},
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"version": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				Computed: true,
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment to read connectors from. Must be a valid PingOne resource ID.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this data source.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
		},
	}
}

func (state *davinciConnectorsDataSourceModel) readClientResponse(response *pingone.DaVinciConnectorCollectionMinimalResponse) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// connectors
	connectorsMetadataColorsAttrTypes := map[string]attr.Type{
		"canvas":      types.StringType,
		"canvas_text": types.StringType,
		"dark":        types.StringType,
	}
	connectorsMetadataLogosCanvasAttrTypes := map[string]attr.Type{
		"image_file_name": types.StringType,
	}
	connectorsMetadataLogosAttrTypes := map[string]attr.Type{
		"canvas": types.ObjectType{AttrTypes: connectorsMetadataLogosCanvasAttrTypes},
	}
	connectorsMetadataAttrTypes := map[string]attr.Type{
		"colors": types.ObjectType{AttrTypes: connectorsMetadataColorsAttrTypes},
		"logos":  types.ObjectType{AttrTypes: connectorsMetadataLogosAttrTypes},
		"type":   types.StringType,
		"vendor": types.StringType,
	}
	connectorsAttrTypes := map[string]attr.Type{
		"description": types.StringType,
		"id":          types.StringType,
		"metadata":    types.ObjectType{AttrTypes: connectorsMetadataAttrTypes},
		"name":        types.StringType,
		"version":     types.StringType,
	}
	connectorsElementType := types.ObjectType{AttrTypes: connectorsAttrTypes}
	var connectorsValues []attr.Value
	for _, connectorsResponseValue := range response.Embedded.Connectors {
		var connectorsMetadataColorsValue types.Object
		if connectorsResponseValue.Metadata.Colors == nil {
			connectorsMetadataColorsValue = types.ObjectNull(connectorsMetadataColorsAttrTypes)
		} else {
			connectorsMetadataColorsValue, diags = types.ObjectValue(connectorsMetadataColorsAttrTypes, map[string]attr.Value{
				"canvas":      types.StringPointerValue(connectorsResponseValue.Metadata.Colors.Canvas),
				"canvas_text": types.StringPointerValue(connectorsResponseValue.Metadata.Colors.CanvasText),
				"dark":        types.StringPointerValue(connectorsResponseValue.Metadata.Colors.Dark),
			})
			respDiags.Append(diags...)
		}
		var connectorsMetadataLogosValue types.Object
		if connectorsResponseValue.Metadata.Logos == nil {
			connectorsMetadataLogosValue = types.ObjectNull(connectorsMetadataLogosAttrTypes)
		} else {
			var connectorsMetadataLogosCanvasValue types.Object
			if connectorsResponseValue.Metadata.Logos.Canvas == nil {
				connectorsMetadataLogosCanvasValue = types.ObjectNull(connectorsMetadataLogosCanvasAttrTypes)
			} else {
				connectorsMetadataLogosCanvasValue, diags = types.ObjectValue(connectorsMetadataLogosCanvasAttrTypes, map[string]attr.Value{
					"image_file_name": types.StringPointerValue(connectorsResponseValue.Metadata.Logos.Canvas.ImageFileName),
				})
				respDiags.Append(diags...)
			}
			connectorsMetadataLogosValue, diags = types.ObjectValue(connectorsMetadataLogosAttrTypes, map[string]attr.Value{
				"canvas": connectorsMetadataLogosCanvasValue,
			})
			respDiags.Append(diags...)
		}
		var connectorsMetadataTypePtrValue *string
		if connectorsResponseValue.Metadata.Type != nil {
			connectorsMetadataTypeStringValue := string(*connectorsResponseValue.Metadata.Type)
			connectorsMetadataTypePtrValue = &connectorsMetadataTypeStringValue
		}
		connectorsMetadataTypeValue := types.StringPointerValue(connectorsMetadataTypePtrValue)
		connectorsMetadataValue, diags := types.ObjectValue(connectorsMetadataAttrTypes, map[string]attr.Value{
			"colors": connectorsMetadataColorsValue,
			"logos":  connectorsMetadataLogosValue,
			"type":   connectorsMetadataTypeValue,
			"vendor": types.StringPointerValue(connectorsResponseValue.Metadata.Vendor),
		})
		respDiags.Append(diags...)
		connectorsValue, diags := types.ObjectValue(connectorsAttrTypes, map[string]attr.Value{
			"description": types.StringValue(connectorsResponseValue.Description),
			"id":          types.StringValue(connectorsResponseValue.Id),
			"metadata":    connectorsMetadataValue,
			"name":        types.StringValue(connectorsResponseValue.Name),
			"version":     types.StringValue(connectorsResponseValue.Version),
		})
		respDiags.Append(diags...)
		connectorsValues = append(connectorsValues, connectorsValue)
	}
	connectorsValue, diags := types.SetValue(connectorsElementType, connectorsValues)
	respDiags.Append(diags...)
	state.Connectors = connectorsValue
	// id
	state.Id = types.StringValue(uuid.New().String())
	return respDiags
}

func (r *davinciConnectorsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data davinciConnectorsDataSourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciConnectorCollectionMinimalResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciConnectorsApi.GetConnectors(ctx, environmentIdUuid).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetConnectors",
		framework.DefaultCustomError,
		framework.InsufficientPrivilegeRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
