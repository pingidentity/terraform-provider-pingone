// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"fmt"
	"net/http"
	"regexp"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
)

var (
	_ datasource.DataSource              = &davinciApplicationsDataSource{}
	_ datasource.DataSourceWithConfigure = &davinciApplicationsDataSource{}
)

func NewDavinciApplicationsDataSource() datasource.DataSource {
	return &davinciApplicationsDataSource{}
}

type davinciApplicationsDataSource serviceClientType

func (r *davinciApplicationsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_applications"
}

func (r *davinciApplicationsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciApplicationsDataSourceModel struct {
	DavinciApplications types.Set    `tfsdk:"davinci_applications"`
	EnvironmentId       types.String `tfsdk:"environment_id"`
	Id                  types.String `tfsdk:"id"`
}

func (r *davinciApplicationsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source to retrieve all DaVinci applications.",
		Attributes: map[string]schema.Attribute{
			"davinci_applications": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"api_key": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
								"value": schema.StringAttribute{
									Computed: true,
								},
							},
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"oauth": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"client_secret": schema.StringAttribute{
									Computed: true,
								},
								"enforce_signed_request_openid": schema.BoolAttribute{
									Computed: true,
								},
								"grant_types": schema.SetAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "Options are \"authorizationCode\", \"clientCredentials\", \"implicit\".",
									MarkdownDescription: "Options are `authorizationCode`, `clientCredentials`, `implicit`.",
								},
								"logout_uris": schema.SetAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"redirect_uris": schema.SetAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"scopes": schema.SetAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "Options are \"flow_analytics\", \"offline_access\", \"openid\", \"profile\".",
									MarkdownDescription: "Options are `flow_analytics`, `offline_access`, `openid`, `profile`.",
								},
								"sp_jwks_openid": schema.StringAttribute{
									Computed: true,
								},
								"sp_jwks_url": schema.StringAttribute{
									Computed: true,
								},
							},
							Computed: true,
						},
					},
				},
				Computed: true,
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment to read applications from. Must be a valid PingOne resource ID.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this data source.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
		},
	}
}

func (state *davinciApplicationsDataSourceModel) readClientResponse(response *pingone.DaVinciApplicationCollectionResponse) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// davinci_applications
	davinciApplicationsApiKeyAttrTypes := map[string]attr.Type{
		"enabled": types.BoolType,
		"value":   types.StringType,
	}
	davinciApplicationsOauthAttrTypes := map[string]attr.Type{
		"client_secret":                 types.StringType,
		"enforce_signed_request_openid": types.BoolType,
		"grant_types":                   types.SetType{ElemType: types.StringType},
		"logout_uris":                   types.SetType{ElemType: types.StringType},
		"redirect_uris":                 types.SetType{ElemType: types.StringType},
		"scopes":                        types.SetType{ElemType: types.StringType},
		"sp_jwks_openid":                types.StringType,
		"sp_jwks_url":                   types.StringType,
	}
	davinciApplicationsAttrTypes := map[string]attr.Type{
		"api_key": types.ObjectType{AttrTypes: davinciApplicationsApiKeyAttrTypes},
		"id":      types.StringType,
		"name":    types.StringType,
		"oauth":   types.ObjectType{AttrTypes: davinciApplicationsOauthAttrTypes},
	}
	davinciApplicationsElementType := types.ObjectType{AttrTypes: davinciApplicationsAttrTypes}
	var davinciApplicationsValues []attr.Value
	for _, davinciApplicationsResponseValue := range response.Embedded.DavinciApplications {
		davinciApplicationsApiKeyValue, diags := types.ObjectValue(davinciApplicationsApiKeyAttrTypes, map[string]attr.Value{
			"enabled": types.BoolValue(davinciApplicationsResponseValue.ApiKey.Enabled),
			"value":   types.StringValue(davinciApplicationsResponseValue.ApiKey.Value),
		})
		respDiags.Append(diags...)
		davinciApplicationsOauthGrantTypesValue, diags := types.SetValueFrom(context.Background(), types.StringType, davinciApplicationsResponseValue.Oauth.GrantTypes)
		respDiags.Append(diags...)
		davinciApplicationsOauthLogoutUrisValue, diags := types.SetValueFrom(context.Background(), types.StringType, davinciApplicationsResponseValue.Oauth.LogoutUris)
		respDiags.Append(diags...)
		davinciApplicationsOauthRedirectUrisValue, diags := types.SetValueFrom(context.Background(), types.StringType, davinciApplicationsResponseValue.Oauth.RedirectUris)
		respDiags.Append(diags...)
		davinciApplicationsOauthScopesValue, diags := types.SetValueFrom(context.Background(), types.StringType, davinciApplicationsResponseValue.Oauth.Scopes)
		respDiags.Append(diags...)
		davinciApplicationsOauthValue, diags := types.ObjectValue(davinciApplicationsOauthAttrTypes, map[string]attr.Value{
			"client_secret":                 types.StringValue(davinciApplicationsResponseValue.Oauth.ClientSecret),
			"enforce_signed_request_openid": types.BoolPointerValue(davinciApplicationsResponseValue.Oauth.EnforceSignedRequestOpenid),
			"grant_types":                   davinciApplicationsOauthGrantTypesValue,
			"logout_uris":                   davinciApplicationsOauthLogoutUrisValue,
			"redirect_uris":                 davinciApplicationsOauthRedirectUrisValue,
			"scopes":                        davinciApplicationsOauthScopesValue,
			"sp_jwks_openid":                types.StringPointerValue(davinciApplicationsResponseValue.Oauth.SpJwksOpenid),
			"sp_jwks_url":                   types.StringPointerValue(davinciApplicationsResponseValue.Oauth.SpjwksUrl),
		})
		respDiags.Append(diags...)
		davinciApplicationsValue, diags := types.ObjectValue(davinciApplicationsAttrTypes, map[string]attr.Value{
			"api_key": davinciApplicationsApiKeyValue,
			"id":      types.StringValue(davinciApplicationsResponseValue.Id),
			"name":    types.StringValue(davinciApplicationsResponseValue.Name),
			"oauth":   davinciApplicationsOauthValue,
		})
		respDiags.Append(diags...)
		davinciApplicationsValues = append(davinciApplicationsValues, davinciApplicationsValue)
	}
	davinciApplicationsValue, diags := types.SetValue(davinciApplicationsElementType, davinciApplicationsValues)
	respDiags.Append(diags...)
	state.DavinciApplications = davinciApplicationsValue
	// id
	state.Id = types.StringValue(uuid.New().String())
	return respDiags
}

func (r *davinciApplicationsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data davinciApplicationsDataSourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciApplicationCollectionResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciApplicationsApi.GetDavinciApplications(ctx, environmentIdUuid).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetDavinciApplications",
		framework.DefaultCustomError,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
