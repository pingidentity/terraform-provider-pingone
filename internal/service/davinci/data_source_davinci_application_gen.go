// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"fmt"
	"net/http"
	"regexp"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
)

var (
	_ datasource.DataSource              = &davinciApplicationDataSource{}
	_ datasource.DataSourceWithConfigure = &davinciApplicationDataSource{}
)

func NewDavinciApplicationDataSource() datasource.DataSource {
	return &davinciApplicationDataSource{}
}

type davinciApplicationDataSource serviceClientType

func (r *davinciApplicationDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_application"
}

func (r *davinciApplicationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciApplicationDataSourceModel struct {
	ApiKey        types.Object `tfsdk:"api_key"`
	ApplicationId types.String `tfsdk:"application_id"`
	EnvironmentId types.String `tfsdk:"environment_id"`
	Id            types.String `tfsdk:"id"`
	Name          types.String `tfsdk:"name"`
	Oauth         types.Object `tfsdk:"oauth"`
}

func (r *davinciApplicationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source to retrieve a davinci_application.",
		Attributes: map[string]schema.Attribute{
			"api_key": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed: true,
					},
					"value": schema.StringAttribute{
						Computed: true,
					},
				},
				Computed: true,
			},
			"application_id": schema.StringAttribute{
				Required:    true,
				Description: "A string that specifies the ID of the application to retrieve configuration for.",
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment that is configured with the application. Must be a valid PingOne resource ID.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this data source.",
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"oauth": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"client_secret": schema.StringAttribute{
						Computed: true,
					},
					"enforce_signed_request_openid": schema.BoolAttribute{
						Computed: true,
					},
					"grant_types": schema.SetAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "Options are \"authorizationCode\", \"clientCredentials\", \"implicit\".",
						MarkdownDescription: "Options are `authorizationCode`, `clientCredentials`, `implicit`.",
					},
					"logout_uris": schema.SetAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"redirect_uris": schema.SetAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"scopes": schema.SetAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "Options are \"flow_analytics\", \"offline_access\", \"openid\", \"profile\".",
						MarkdownDescription: "Options are `flow_analytics`, `offline_access`, `openid`, `profile`.",
					},
					"sp_jwks_openid": schema.StringAttribute{
						Computed: true,
					},
					"sp_jwks_url": schema.StringAttribute{
						Computed: true,
					},
				},
				Computed: true,
			},
		},
	}
}

func (state *davinciApplicationDataSourceModel) readClientResponse(response *pingone.DaVinciApplication) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// api_key
	apiKeyAttrTypes := map[string]attr.Type{
		"enabled": types.BoolType,
		"value":   types.StringType,
	}
	apiKeyValue, diags := types.ObjectValue(apiKeyAttrTypes, map[string]attr.Value{
		"enabled": types.BoolValue(response.ApiKey.Enabled),
		"value":   types.StringValue(response.ApiKey.Value),
	})
	respDiags.Append(diags...)
	state.ApiKey = apiKeyValue
	// id
	state.Id = types.StringValue(response.Id)
	// name
	state.Name = types.StringValue(response.Name)
	// oauth
	oauthAttrTypes := map[string]attr.Type{
		"client_secret":                 types.StringType,
		"enforce_signed_request_openid": types.BoolType,
		"grant_types":                   types.SetType{ElemType: types.StringType},
		"logout_uris":                   types.SetType{ElemType: types.StringType},
		"redirect_uris":                 types.SetType{ElemType: types.StringType},
		"scopes":                        types.SetType{ElemType: types.StringType},
		"sp_jwks_openid":                types.StringType,
		"sp_jwks_url":                   types.StringType,
	}
	oauthGrantTypesValue, diags := types.SetValueFrom(context.Background(), types.StringType, response.Oauth.GrantTypes)
	respDiags.Append(diags...)
	oauthLogoutUrisValue, diags := types.SetValueFrom(context.Background(), types.StringType, response.Oauth.LogoutUris)
	respDiags.Append(diags...)
	oauthRedirectUrisValue, diags := types.SetValueFrom(context.Background(), types.StringType, response.Oauth.RedirectUris)
	respDiags.Append(diags...)
	oauthScopesValue, diags := types.SetValueFrom(context.Background(), types.StringType, response.Oauth.Scopes)
	respDiags.Append(diags...)
	oauthValue, diags := types.ObjectValue(oauthAttrTypes, map[string]attr.Value{
		"client_secret":                 types.StringValue(response.Oauth.ClientSecret),
		"enforce_signed_request_openid": types.BoolPointerValue(response.Oauth.EnforceSignedRequestOpenid),
		"grant_types":                   oauthGrantTypesValue,
		"logout_uris":                   oauthLogoutUrisValue,
		"redirect_uris":                 oauthRedirectUrisValue,
		"scopes":                        oauthScopesValue,
		"sp_jwks_openid":                types.StringPointerValue(response.Oauth.SpJwksOpenid),
		"sp_jwks_url":                   types.StringPointerValue(response.Oauth.SpjwksUrl),
	})
	respDiags.Append(diags...)
	state.Oauth = oauthValue
	return respDiags
}

func (r *davinciApplicationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data davinciApplicationDataSourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciApplication
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciApplicationApi.GetDavinciApplicationById(ctx, environmentIdUuid, data.ApplicationId.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetDavinciApplicationById",
		framework.DefaultCustomError,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
