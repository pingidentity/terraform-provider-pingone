// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"context"
	"fmt"
	"os"
	"regexp"
	"testing"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	acctestlegacysdk "github.com/pingidentity/terraform-provider-pingone/internal/acctest/legacysdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest/service/base"
)

func TestAccDavinciConnectorInstance_RemovalDrift(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_connector_instance.%s", resourceName)

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")
	var environmentId string
	var id string

	var p1Client *pingone.APIClient
	var ctx = context.Background()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)

			p1Client = acctest.PreCheckTestClient(ctx, t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciConnectorInstance_MinimalHCL(resourceName),
				Check:  davinciConnectorInstance_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					davinciConnectorInstance_Delete(ctx, p1Client, t, environmentId, id)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
			// Test removal of the environment
			{
				Config: davinciConnectorInstance_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciConnectorInstance_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					base.Environment_RemovalDrift_PreConfig(ctx, p1Client, t, environmentId)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccDavinciConnectorInstance_MinimalMaximal(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_connector_instance.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: davinciConnectorInstance_MinimalHCL(resourceName),
				Check:  davinciConnectorInstance_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Delete the minimal model
				Config:  davinciConnectorInstance_MinimalHCL(resourceName),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: davinciConnectorInstance_CompleteHCL(resourceName),
			},
			{
				// Back to minimal model
				Config: davinciConnectorInstance_MinimalHCL(resourceName),
				Check:  davinciConnectorInstance_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Back to complete model
				Config: davinciConnectorInstance_CompleteHCL(resourceName),
			},
			{
				// Test importing the resource
				Config:       davinciConnectorInstance_CompleteHCL(resourceName),
				ResourceName: fmt.Sprintf("pingone_davinci_connector_instance.%s", resourceName),
				ImportStateIdFunc: func() resource.ImportStateIdFunc {
					return func(s *terraform.State) (string, error) {
						rs, ok := s.RootModule().Resources[resourceFullName]
						if !ok {
							return "", fmt.Errorf("Resource Not found: %s", resourceFullName)
						}

						return fmt.Sprintf("%s/%s", rs.Primary.Attributes["environment_id"], rs.Primary.Attributes["id"]), nil
					}
				}(),
				ImportStateVerifyIdentifierAttribute: "id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func TestAccDavinciConnectorInstance_NewEnv(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: davinciConnectorInstance_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciConnectorInstance_CheckComputedValuesMinimal(resourceName),
			},
		},
	})
}

func TestAccDavinciConnectorInstance_ComplexProperties(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_connector_instance.%s", resourceName)

	mixedTypeStep := resource.TestStep{
		Config: davinciConnectorInstance_PropertyDataTypesMixed_HCL(resourceName),
		Check: resource.ComposeTestCheckFunc(
			resource.TestCheckResourceAttrSet(resourceFullName, "properties"),
			// We can't easily check the exact properties value as it's a JSON string
			// and the formatting might be different, but we can check that it's set
		),
	}

	// The following test steps will be uncommented as we implement them

	jsonCustomAttributesTypeStep := resource.TestStep{
		Config: davinciConnectorInstance_PropertyDataTypesJsonCustomAttributes_HCL(resourceName),
		Check: resource.ComposeTestCheckFunc(
			resource.TestCheckResourceAttrSet(resourceFullName, "properties"),
		),
	}

	// jsonOpenIDTypeStep := resource.TestStep{
	// 	Config: davinciConnectorInstance_PropertyDataTypesJsonOpenID_HCL(resourceName),
	// 	Check: resource.ComposeTestCheckFunc(
	// 		resource.TestCheckResourceAttrSet(resourceFullName, "properties"),
	// 	),
	// }

	// jsonCustomAuthTypeStep := resource.TestStep{
	// 	Config: davinciConnectorInstance_PropertyDataTypesJsonCustomAuth_HCL(resourceName),
	// 	Check: resource.ComposeTestCheckFunc(
	// 		resource.TestCheckResourceAttrSet(resourceFullName, "properties"),
	// 	),
	// }

	// jsonOAuth2TypeStep := resource.TestStep{
	// 	Config: davinciConnectorInstance_PropertyDataTypesJsonOAuth2_HCL(resourceName),
	// 	Check: resource.ComposeTestCheckFunc(
	// 		resource.TestCheckResourceAttrSet(resourceFullName, "properties"),
	// 	),
	// }

	jsonSAMLTypeStep := resource.TestStep{
		Config: davinciConnectorInstance_PropertyDataTypesJsonSAML_HCL(resourceName),
		Check: resource.ComposeTestCheckFunc(
			resource.TestCheckResourceAttrSet(resourceFullName, "properties"),
		),
	}

	importStateFunc := func() resource.ImportStateIdFunc {
		return func(s *terraform.State) (string, error) {
			rs, ok := s.RootModule().Resources[resourceFullName]
			if !ok {
				return "", fmt.Errorf("Resource Not found: %s", resourceFullName)
			}

			return fmt.Sprintf("%s/%s", rs.Primary.Attributes["environment_id"], rs.Primary.Attributes["id"]), nil
		}
	}

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Test for mixed types (string, number, boolean)
			mixedTypeStep,
			{
				ResourceName:      resourceFullName,
				ImportStateIdFunc: importStateFunc(),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config:  davinciConnectorInstance_PropertyDataTypesMixed_HCL(resourceName),
				Destroy: true,
			},

			// Test for JSON custom attributes type
			jsonCustomAttributesTypeStep,
			{
				ResourceName:      resourceFullName,
				ImportStateIdFunc: importStateFunc(),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config:  davinciConnectorInstance_PropertyDataTypesJsonCustomAttributes_HCL(resourceName),
				Destroy: true,
			},

			// Test for JSON OpenID type
			// jsonOpenIDTypeStep,
			// {
			// 	ResourceName:      resourceFullName,
			// 	ImportStateIdFunc: importStateFunc(),
			// 	ImportState:       true,
			// 	ImportStateVerify: true,
			// 	ImportStateVerifyIgnore: []string{
			// 		"properties",
			// 	},
			// },
			// {
			// 	Config:  davinciConnectorInstance_PropertyDataTypesJsonOpenID_HCL(resourceName),
			// 	Destroy: true,
			// },

			// Test for JSON custom auth type
			// jsonCustomAuthTypeStep,
			// {
			// 	ResourceName:      resourceFullName,
			// 	ImportStateIdFunc: importStateFunc(),
			// 	ImportState:       true,
			// 	ImportStateVerify: true,
			// 	ImportStateVerifyIgnore: []string{
			// 		"properties",
			// 	},
			// },
			// {
			// 	Config:  davinciConnectorInstance_PropertyDataTypesJsonCustomAuth_HCL(resourceName),
			// 	Destroy: true,
			// },

			// Test for JSON OAuth2 type
			// jsonOAuth2TypeStep,
			// {
			// 	ResourceName:      resourceFullName,
			// 	ImportStateIdFunc: importStateFunc(),
			// 	ImportState:       true,
			// 	ImportStateVerify: true,
			// 	ImportStateVerifyIgnore: []string{
			// 		"properties",
			// 	},
			// },
			// {
			// 	Config:  davinciConnectorInstance_PropertyDataTypesJsonOAuth2_HCL(resourceName),
			// 	Destroy: true,
			// },

			// Test for JSON SAML type
			jsonSAMLTypeStep,
			{
				ResourceName:      resourceFullName,
				ImportStateIdFunc: importStateFunc(),
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					"properties",
				},
			},
		},
	})
}

func TestAccDavinciConnectorInstance_BadParameters(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_connector_instance.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciConnectorInstance_MinimalHCL(resourceName),
			},
			// Errors
			{
				ResourceName: resourceFullName,
				ImportState:  true,
				ExpectError:  regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "/",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "badformat/badformat",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
		},
	})
}

// Minimal HCL with only required values set
func davinciConnectorInstance_MinimalHCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "webhookConnector"
  }
  name = "%[2]s"
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Maximal HCL with all values set where possible
func davinciConnectorInstance_CompleteHCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "webhookConnector"
  }
  name = "%[2]s"
  properties = jsonencode({
    "urls" : {
      "type" : "string",
      "displayName" : "Register URLs",
      "createdDate" : 12345,
      "customerId" : "12345",
      "companyId" : "singularkey",
      "preferredControlType" : "urlsTableView",
      "info" : "POST requests will be made to these registered url as selected later.",
      "required" : true,
      "value" : [
        {
          "name" : "example",
          "url" : "https://example.com",
          "token" : "mytoken",
          "value" : "https://example.com"
        }
      ]
    }
  })
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciConnectorInstance_NewEnvHCL(environmentName, licenseID, resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[3]s" {
  environment_id = pingone_environment.%[2]s.id
  connector = {
    id = "haveIBeenPwnedConnector"
  }
  name = "%[3]s"
}
`, acctestlegacysdk.MinimalSandboxDaVinciEnvironment(environmentName, licenseID), environmentName, resourceName)
}

func davinciConnectorInstance_PropertyDataTypesMixed_HCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "smtpConnector"
  }
  name = "%[2]s"
  
  properties = jsonencode({
    "name": {
      "type": "string",
      "value": "test"
    },
    "hostname": {
      "type": "string",
      "value": "localhost"
    },
    "port": {
      "type": "number",
      "value": 2525
    },
    "secureFlag": {
      "type": "boolean",
      "value": true
    },
    "username": {
      "type": "string",
      "value": "test"
    },
    "password": {
      "type": "string",
      "value": "test"
    }
  })
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciConnectorInstance_PropertyDataTypesJsonCustomAttributes_HCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "skUserPool"
  }
  name = "%[2]s"
  
  properties = jsonencode({
    "customAttributes": {
      "type": "array",
      "preferredControlType": "tableViewAttributes",
      "sections": [
        "connectorAttributes"
      ],
      "value": [
        {
          "name": "username",
          "description": "Username",
          "type": "string",
          "value": null,
          "minLength": "1",
          "maxLength": "300",
          "required": true,
          "attributeType": "sk"
        },
        {
          "name": "firstName",
          "description": "First Name",
          "type": "string",
          "value": null,
          "minLength": "1",
          "maxLength": "100",
          "required": false,
          "attributeType": "sk"
        },
        {
          "name": "lastName",
          "description": "Last Name",
          "type": "string",
          "value": null,
          "minLength": "1",
          "maxLength": "100",
          "required": false,
          "attributeType": "sk"
        },
        {
          "name": "name",
          "description": "Display Name",
          "type": "string",
          "value": null,
          "minLength": "1",
          "maxLength": "250",
          "required": false,
          "attributeType": "sk"
        },
        {
          "name": "email",
          "description": "Email",
          "type": "string",
          "value": null,
          "minLength": "1",
          "maxLength": "250",
          "required": false,
          "attributeType": "sk"
        }
      ]
    }
  })
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciConnectorInstance_PropertyDataTypesJsonOpenID_HCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "pingFederateConnectorV2"
  }
  name = "%[2]s"
  
  properties = jsonencode({
    "openId": {
      "properties": {
        "skRedirectUri": {
          "type": "string",
          "displayName": "Redirect URL",
          "info": "Enter this in your identity provider configuration to allow it to redirect the browser back to DaVinci. If you use a custom PingOne domain, modify the URL accordingly.",
          "preferredControlType": "textField",
          "disabled": true,
          "initializeValue": "SINGULARKEY_REDIRECT_URI",
          "copyToClip": true
        },
        "clientId": {
          "type": "string",
          "displayName": "Client ID",
          "placeholder": "",
          "preferredControlType": "textField",
          "required": true,
          "value": "test"
        },
        "clientSecret": {
          "type": "string",
          "displayName": "Client Secret",
          "preferredControlType": "textField",
          "secure": true,
          "required": true,
          "value": "test"
        },
        "scope": {
          "type": "string",
          "displayName": "Scope",
          "preferredControlType": "textField",
          "requiredValue": "openid",
          "value": "openid",
          "required": true
        },
        "issuerUrl": {
          "type": "string",
          "displayName": "Base URL",
          "preferredControlType": "textField",
          "value": "https://ping-eng.com",
          "required": true
        },
        "returnToUrl": {
          "displayName": "Application Return To URL",
          "preferredControlType": "textField",
          "info": "When using the embedded flow player widget and an IDP/Social Login connector, provide a callback URL to return back to the application.",
          "value": "https://ping-eng.com/callback"
        }
      }
    }
  })
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciConnectorInstance_PropertyDataTypesJsonCustomAuth_HCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "genericConnector"
  }
  name = "%[2]s"
  
  properties = jsonencode({
    "customAuth": {
      "properties": {
        "customAttributes": {
          "type": "array",
          "displayName": "Connector Attributes",
          "preferredControlType": "tableViewAttributes",
          "info": "These attributes will be available in User Connector Attribute Mapping.",
          "sections": [
            "connectorAttributes"
          ],
          "value": [
            {
              "name": "id",
              "description": "ID",
              "type": "string",
              "value": null,
              "minLength": "1",
              "maxLength": "300",
              "required": true,
              "attributeType": "sk"
            },
            {
              "name": "name",
              "description": "Display Name",
              "type": "string",
              "value": null,
              "minLength": "1",
              "maxLength": "250",
              "required": false,
              "attributeType": "sk"
            },
            {
              "name": "email",
              "description": "Email",
              "type": "string",
              "value": null,
              "minLength": "1",
              "maxLength": "250",
              "required": false,
              "attributeType": "sk"
            }
          ]
        },
        "userConnectorAttributeMapping": {
          "type": "object",
          "preferredControlType": "userConnectorAttributeMapping",
          "newMappingAllowed": true,
          "title1": null,
          "title2": null,
          "sections": [
            "attributeMapping"
          ]
        },
        "providerName": {
          "displayName": "Provider Name",
          "preferredControlType": "textField",
          "required": true,
          "value": "fdfs"
        },
        "authTypeDropdown": {
          "displayName": "Auth Type",
          "preferredControlType": "dropDown",
          "required": true,
          "options": [
            {
              "name": "Oauth2",
              "value": "oauth2"
            },
            {
              "name": "OpenId",
              "value": "openId"
            }
          ],
          "enum": [
            "oauth2",
            "openId"
          ],
          "value": "oauth2"
        },
        "issuerUrl": {
          "preferredControlType": "textField",
          "displayName": "Issuer URL",
          "info": "Required if auth type is OpenID",
          "value": "fdsfs"
        },
        "skRedirectUri": {
          "displayName": "Redirect URL",
          "preferredControlType": "textField",
          "disabled": true,
          "initializeValue": "SINGULARKEY_REDIRECT_URI",
          "copyToClip": true
        },
        "clientId": {
          "displayName": "App ID",
          "preferredControlType": "textField",
          "required": true,
          "value": "fdsfs"
        },
        "clientSecret": {
          "displayName": "Client Secret",
          "preferredControlType": "textField",
          "secure": true,
          "required": true,
          "value": "testDummySecret"
        },
        "scope": {
          "displayName": "Scope",
          "preferredControlType": "textField",
          "required": true,
          "value": "myscope"
        },
        "authorizationEndpoint": {
          "displayName": "Authorization Endpoint",
          "preferredControlType": "textField",
          "required": true,
          "value": "fdsfs"
        },
        "tokenEndpoint": {
          "displayName": "Token Endpoint",
          "preferredControlType": "textField",
          "required": true,
          "value": "fdsfs"
        },
        "bearerToken": {
          "preferredControlType": "textField",
          "type": "boolean",
          "displayName": "Token Attachment",
          "info": "Optional field. Prepend token with this value. Example: Bearer or Token"
        },
        "userInfoEndpoint": {
          "displayName": "User Info Endpoint",
          "preferredControlType": "textFieldArrayView",
          "required": true,
          "value": [
            "fdsdsfs"
          ]
        },
        "returnToUrl": {
          "displayName": "Application Return To URL",
          "preferredControlType": "textField",
          "info": "When using the embedded flow player widget and an IdP/Social Login connector, provide a callback URL to return back to the application.",
          "value": "test"
        }
      }
    }
  })
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciConnectorInstance_PropertyDataTypesJsonOAuth2_HCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "githubIdpConnector"
  }
  name = "%[2]s"
  
  properties = jsonencode({
    "oauth2": {
      "properties": {
        "providerName": {
          "type": "string",
          "displayName": "Provider Name",
          "preferredControlType": "textField",
          "value": "Login with GitHub"
        },
        "skRedirectUri": {
          "type": "string",
          "displayName": "DaVinci Redirect URL",
          "info": "Enter this in your identity provider configuration to allow it to redirect the browser back to DaVinci. If you use a custom PingOne domain, modify the URL accordingly.",
          "preferredControlType": "textField",
          "disabled": true,
          "initializeValue": "SINGULARKEY_REDIRECT_URI",
          "copyToClip": true
        },
        "clientId": {
          "type": "string",
          "displayName": "Application ID",
          "preferredControlType": "textField",
          "required": true,
          "value": "applicationID"
        },
        "clientSecret": {
          "type": "string",
          "displayName": "Client Secret",
          "preferredControlType": "textField",
          "secure": true,
          "required": true,
          "value": "dummyClientSecret"
        },
        "scope": {
          "type": "string",
          "displayName": "Scope",
          "preferredControlType": "textField",
          "requiredValue": "email",
          "required": true,
          "value": "myscope"
        },
        "customAttributes": {
          "type": "array",
          "displayName": "Connector Attributes",
          "preferredControlType": "tableViewAttributes",
          "info": "These attributes will be available in User Connector Attribute Mapping.",
          "sections": [
            "connectorAttributes"
          ],
          "value": [
            {
              "name": "id",
              "description": "ID",
              "type": "string",
              "value": null,
              "minLength": "1",
              "maxLength": "300",
              "required": true,
              "attributeType": "sk"
            },
            {
              "name": "name",
              "description": "Display Name",
              "type": "string",
              "value": null,
              "minLength": "1",
              "maxLength": "250",
              "required": false,
              "attributeType": "sk"
            },
            {
              "name": "email",
              "description": "Email",
              "type": "string",
              "value": null,
              "minLength": "1",
              "maxLength": "250",
              "required": false,
              "attributeType": "sk"
            }
          ]
        },
        "userConnectorAttributeMapping": {
          "type": "object",
          "preferredControlType": "userConnectorAttributeMapping",
          "newMappingAllowed": true,
          "title1": null,
          "title2": null,
          "sections": [
            "attributeMapping"
          ],
          "value": {
            "userPoolConnectionId": "defaultUserPool",
            "mapping": {
              "username": {
                "value1": "id"
              },
              "name": {
                "value1": "name"
              },
              "email": {
                "value1": "email"
              }
            }
          }
        },
        "disableCreateUser": {
          "displayName": "Disable Shadow User Creation",
          "preferredControlType": "toggleSwitch",
          "value": true,
          "info": "A shadow user is implicitly created, unless disabled."
        },
        "returnToUrl": {
          "displayName": "Application Return To URL",
          "preferredControlType": "textField",
          "info": "When using the embedded flow player widget and an IDP/Social Login connector, provide a callback URL to return back to the application.",
          "value": "https://ping-eng.com/callback"
        }
      }
    }
  })
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciConnectorInstance_PropertyDataTypesJsonSAML_HCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_connector_instance" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "samlIdpConnector"
  }
  name = "%[2]s"
  
  properties = jsonencode({
    "saml": {
      "properties": {
        "dvSamlSpMetadataUrl": {
          "displayName": "DaVinci SAML SP Metadata URL",
          "info": "Your DaVinci SAML SP Metadata URL. This allows an identity provider to redirect the browser back to DaVinci.",
          "preferredControlType": "textField",
          "disabled": true,
          "initializeValue": "DAVINCI_SAML_SP_METADATA_URI",
          "copyToClip": true
        },
        "providerName": {
          "type": "string",
          "displayName": "Provider Name",
          "value": "SAML Test Provider"
        },
        "metadataXml": {
          "type": "string",
          "displayName": "Identity Provider SAML Metadata",
          "info": "Paste the SAML metadata provided by the identity provider.",
          "preferredControlType": "textArea",
          "value": "metadata"
        },
        "returnToUrl": {
          "displayName": "Application Redirect URL",
          "preferredControlType": "textField",
          "info": "Your application's redirect URL, such as \"https://app.yourorganization.com/\". Enter this URL if you embed the DaVinci widget in your application. This allows DaVinci to redirect the browser back to your application.",
          "value": "https://ping-eng.com/callback"
        },
        "userConnectorAttributeMapping": {
          "type": "object",
          "preferredControlType": "userConnectorAttributeMapping",
          "newMappingAllowed": true,
          "title1": "Identity Provider Attributes",
          "title2": null,
          "sections": [
            "attributeMapping"
          ],
          "value": {
            "userPoolConnectionId": "defaultUserPool",
            "mapping": {
              "username": {
                "value1": "saml_subject"
              }
            }
          }
        },
        "customAttributes": {
          "type": "array",
          "displayName": "Connector Attributes",
          "preferredControlType": "tableViewAttributes",
          "info": "Add the attributes that you expect to receive from the identity provider. This allows you to map them on the Attribute Mapping tab.",
          "sections": [
            "connectorAttributes"
          ],
          "value": [
            {
              "name": "saml_subject",
              "description": "Subject",
              "type": "string",
              "value": null,
              "minLength": "1",
              "maxLength": "300",
              "required": true,
              "attributeType": "sk"
            }
          ]
        }
      }
    }
  })
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Validate any computed values when applying minimal HCL
func davinciConnectorInstance_CheckComputedValuesMinimal(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr(fmt.Sprintf("pingone_davinci_connector_instance.%s", resourceName), "properties"),
	)
}

func davinciConnectorInstance_GetIDs(resourceName string, environmentId, id *string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Resource Not found: %s", resourceName)
		}
		if environmentId != nil {
			*environmentId = rs.Primary.Attributes["environment_id"]
		}
		if id != nil {
			*id = rs.Primary.Attributes["id"]
		}

		return nil
	}
}

// Delete the resource
func davinciConnectorInstance_Delete(ctx context.Context, apiClient *pingone.APIClient, t *testing.T, environmentId, id string) {
	if environmentId == "" || id == "" {
		t.Fatalf("One of the identifier attributes can't be determined. environmentId: '%s' id: '%s'", environmentId, id)
	}

	_, err := apiClient.DaVinciConnectorApi.DeleteConnectorInstanceById(ctx, uuid.MustParse(environmentId), id).Execute()
	if err != nil {
		t.Fatalf("Failed to delete davinci_connector_instance: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func davinciConnectorInstance_CheckDestroy(s *terraform.State) error {
	var ctx = context.Background()

	p1Client, err := acctest.TestClient(ctx)

	if err != nil {
		return err
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "pingone_davinci_connector_instance" {
			continue
		}
		shouldContinue, err := acctest.CheckParentEnvironmentDestroy(ctx, p1Client, rs.Primary.Attributes["environment_id"])
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		_, r, err := p1Client.DaVinciConnectorApi.GetConnectorInstanceById(ctx, uuid.MustParse(rs.Primary.Attributes["environment_id"]), rs.Primary.Attributes["id"]).Execute()

		shouldContinue, err = acctest.CheckForResourceDestroy(r, err)
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		return fmt.Errorf("PingOne davinci_connector_instance Instance %s still exists", rs.Primary.ID)
	}

	return nil
}
