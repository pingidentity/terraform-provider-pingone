// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

func TestAccDavinciConnectorsDataSource_Get(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDavinciConnectorsDataSourceConfig_Get(resourceName),
				Check:  davinciConnectorsDataSource_CheckComputedValuesComplete(resourceName),
			},
		},
	})
}

func testAccDavinciConnectorsDataSourceConfig_Get(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

data "pingone_davinci_connectors" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Validate any computed values when applying complete HCL
func davinciConnectorsDataSource_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestMatchResourceAttr(fmt.Sprintf("data.pingone_davinci_connectors.%s", resourceName), "id", verify.P1ResourceIDRegexp),
		// Check for a few known connectors. There are over 200 available.
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_connectors.%s", resourceName), "connectors.*", map[string]string{
			"id":                                    "httpConnector",
			"description":                           "Create forms and custom HTML pages, or make REST API calls.",
			"metadata.colors.canvas":                "#AFD5FF",
			"metadata.colors.canvas_text":           "#253746",
			"metadata.colors.dark":                  "#2E5EA6",
			"metadata.logos.canvas.image_file_name": "http.svg",
			"metadata.type":                         "core",
			"name":                                  "HTTP",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_connectors.%s", resourceName), "connectors.*", map[string]string{
			"id":                                    "connector-oai-github",
			"description":                           "Create integrations, retrieve data, and automate your workflows with the GitHub REST API.",
			"metadata.colors.canvas":                "#dde0de",
			"metadata.colors.canvas_text":           "#000000",
			"metadata.colors.dark":                  "#50C3D5",
			"metadata.logos.canvas.image_file_name": "github.svg",
			"metadata.type":                         "service",
			"metadata.vendor":                       "github",
			"name":                                  "GitHub API",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_connectors.%s", resourceName), "connectors.*", map[string]string{
			"id":                                    "connectorJiraServiceDesk",
			"description":                           "Create, manage, and resolve service requests submitted by your customers.",
			"metadata.colors.canvas":                "#deebff",
			"metadata.colors.canvas_text":           "#000000",
			"metadata.colors.dark":                  "#858A96",
			"metadata.logos.canvas.image_file_name": "jira.svg",
			"metadata.type":                         "service",
			"metadata.vendor":                       "atlassian",
			"name":                                  "Jira Service Desk",
		}),
	)
}
