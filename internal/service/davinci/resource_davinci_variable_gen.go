// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"fmt"
	"net/http"
	"regexp"

	"encoding/json"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/float32validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

var (
	_ resource.Resource                = &davinciVariableResource{}
	_ resource.ResourceWithConfigure   = &davinciVariableResource{}
	_ resource.ResourceWithImportState = &davinciVariableResource{}
)

func NewDavinciVariableResource() resource.Resource {
	return &davinciVariableResource{}
}

type davinciVariableResource serviceClientType

func (r *davinciVariableResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_variable"
}

func (r *davinciVariableResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciVariableResourceModel struct {
	Context       types.String `tfsdk:"context"`
	DataType      types.String `tfsdk:"data_type"`
	DisplayName   types.String `tfsdk:"display_name"`
	EnvironmentId types.String `tfsdk:"environment_id"`
	Flow          types.Object `tfsdk:"flow"`
	Id            types.String `tfsdk:"id"`
	Max           types.Int32  `tfsdk:"max"`
	Min           types.Int32  `tfsdk:"min"`
	Mutable       types.Bool   `tfsdk:"mutable"`
	Name          types.String `tfsdk:"name"`
	Value         types.Object `tfsdk:"value"`
}

func (r *davinciVariableResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a davinci variable.",
		Attributes: map[string]schema.Attribute{
			"context": schema.StringAttribute{
				Required:            true,
				Description:         "Options are \"company\", \"flow\", \"flowInstance\", \"user\".",
				MarkdownDescription: "Options are `company`, `flow`, `flowInstance`, `user`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"company",
						"flow",
						"flowInstance",
						"user",
					),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"data_type": schema.StringAttribute{
				Required:            true,
				Description:         "Options are \"boolean\", \"number\", \"object\", \"secret\", \"string\".",
				MarkdownDescription: "Options are `boolean`, `number`, `object`, `secret`, `string`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"boolean",
						"number",
						"object",
						"secret",
						"string",
					),
				},
			},
			"display_name": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(256),
					//TODO this syntax from the api spec may not be valid in go
					//stringvalidator.RegexMatches(regexp.MustCompile("^(?=\\S)[\\p{L}\\p{M}\\p{N}\\p{So}/.'_ -]*(?!.*((<)|(\\$\\{)))"), ""),
				},
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment to create and manage the davinci_variable in.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"flow": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:   true,
						Validators: []validator.String{
							//stringvalidator.RegexMatches(regexp.MustCompile("^(?=\\S)[\\p{L}\\p{M}\\p{N}\\p{So}/.'_ -]*(?!.*((<)|(\\$\\{)))"), ""),
						},
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this resource.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"max": schema.Int32Attribute{
				Optional: true,
				Computed: true,
				Default:  int32default.StaticInt32(2000),
			},
			"min": schema.Int32Attribute{
				Optional: true,
				Computed: true,
				Default:  int32default.StaticInt32(0),
			},
			"mutable": schema.BoolAttribute{
				Required: true,
			},
			"name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(256),
					//stringvalidator.RegexMatches(regexp.MustCompile("^(?=\\S)[\\p{L}\\p{M}\\p{N}\\p{So}/.'_ -]*(?!.*((<)|(\\$\\{)))"), ""),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"value": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"bool": schema.BoolAttribute{
						Optional: true,
						Validators: []validator.Bool{
							boolvalidator.ExactlyOneOf(
								path.MatchRelative().AtParent().AtName("float32"),
								path.MatchRelative().AtParent().AtName("json_object"),
								path.MatchRelative().AtParent().AtName("string"),
								path.MatchRelative().AtParent().AtName("secret_string"),
							),
						},
					},
					"float32": schema.Float32Attribute{
						Optional: true,
						Validators: []validator.Float32{
							float32validator.ExactlyOneOf(
								path.MatchRelative().AtParent().AtName("bool"),
								path.MatchRelative().AtParent().AtName("json_object"),
								path.MatchRelative().AtParent().AtName("string"),
								path.MatchRelative().AtParent().AtName("secret_string"),
							),
						},
					},
					"json_object": schema.StringAttribute{
						CustomType: jsontypes.NormalizedType{},
						Optional:   true,
						Validators: []validator.String{
							stringvalidator.ExactlyOneOf(
								path.MatchRelative().AtParent().AtName("bool"),
								path.MatchRelative().AtParent().AtName("float32"),
								path.MatchRelative().AtParent().AtName("string"),
								path.MatchRelative().AtParent().AtName("secret_string"),
							),
						},
					},
					"string": schema.StringAttribute{
						Optional: true,
						Validators: []validator.String{
							stringvalidator.ExactlyOneOf(
								path.MatchRelative().AtParent().AtName("bool"),
								path.MatchRelative().AtParent().AtName("float32"),
								path.MatchRelative().AtParent().AtName("json_object"),
								path.MatchRelative().AtParent().AtName("secret_string"),
							),
						},
					},
					"secret_string": schema.StringAttribute{
						Optional:  true,
						Sensitive: true,
						Validators: []validator.String{
							stringvalidator.ExactlyOneOf(
								path.MatchRelative().AtParent().AtName("bool"),
								path.MatchRelative().AtParent().AtName("float32"),
								path.MatchRelative().AtParent().AtName("json_object"),
								path.MatchRelative().AtParent().AtName("string"),
							),
						},
					},
				},
				Optional: true,
			},
		},
	}
}

func (model *davinciVariableResourceModel) buildClientStructPost() (*pingone.DaVinciVariableCreateRequest, diag.Diagnostics) {
	result := &pingone.DaVinciVariableCreateRequest{}
	var respDiags diag.Diagnostics
	var err error
	// context
	contextValue, err := pingone.NewDaVinciVariableCreateRequestContextFromValue(model.Context.ValueString())
	if err != nil {
		respDiags.AddAttributeError(
			path.Root("context"),
			"Provided value is not valid",
			fmt.Sprintf("The value provided for context is not valid: %s", err.Error()),
		)
	} else {
		result.Context = *contextValue
	}

	// data_type
	dataTypeValue, err := pingone.NewDaVinciVariableCreateRequestDataTypeFromValue(model.DataType.ValueString())
	if err != nil {
		respDiags.AddAttributeError(
			path.Root("data_type"),
			"Provided value is not valid",
			fmt.Sprintf("The value provided for data_type is not valid: %s", err.Error()),
		)
	} else {
		result.DataType = *dataTypeValue
	}

	// display_name
	if !model.DisplayName.IsNull() && !model.DisplayName.IsUnknown() {
		result.DisplayName = model.DisplayName.ValueStringPointer()
	}
	// flow
	if !model.Flow.IsNull() && !model.Flow.IsUnknown() {
		flowValue := &pingone.ResourceRelationshipDaVinci{}
		flowAttrs := model.Flow.Attributes()
		flowValue.Id = flowAttrs["id"].(types.String).ValueString()
		result.Flow = flowValue
	}

	// max
	if !model.Max.IsNull() && !model.Max.IsUnknown() {
		result.Max = model.Max.ValueInt32Pointer()
	}
	// min
	if !model.Min.IsNull() && !model.Min.IsUnknown() {
		result.Min = model.Min.ValueInt32Pointer()
	}
	// mutable
	result.Mutable = model.Mutable.ValueBool()
	// name
	result.Name = model.Name.ValueString()
	// value
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		valueValue := &pingone.DaVinciVariableCreateRequestValue{}
		valueAttrs := model.Value.Attributes()
		valueValue.Bool = valueAttrs["bool"].(types.Bool).ValueBoolPointer()
		valueValue.Float32 = valueAttrs["float32"].(types.Float32).ValueFloat32Pointer()
		if !valueAttrs["json_object"].IsNull() && !valueAttrs["json_object"].IsUnknown() {
			var jsonValueMap map[string]interface{}
			err := json.Unmarshal([]byte(valueAttrs["json_object"].(jsontypes.Normalized).ValueString()), &jsonValueMap)
			if err != nil {
				respDiags.AddAttributeError(
					path.Root("value").AtName("json_object"),
					"Error Parsing JSON Object",
					fmt.Sprintf("The value provided for json_object could not be parsed as json: %s", err.Error()),
				)
			}
			valueValue.MapmapOfStringAny = &jsonValueMap
		}
		if !valueAttrs["string"].IsNull() && !valueAttrs["string"].IsUnknown() {
			valueValue.String = valueAttrs["string"].(types.String).ValueStringPointer()
		} else if !valueAttrs["secret_string"].IsNull() && !valueAttrs["secret_string"].IsUnknown() {
			valueValue.String = valueAttrs["secret_string"].(types.String).ValueStringPointer()
		}
		result.Value = valueValue
	}

	return result, respDiags
}

func (model *davinciVariableResourceModel) buildClientStructPut() (*pingone.DaVinciVariableReplaceRequest, diag.Diagnostics) {
	result := &pingone.DaVinciVariableReplaceRequest{}
	var respDiags diag.Diagnostics
	var err error
	// context
	contextValue, err := pingone.NewDaVinciVariableReplaceRequestContextFromValue(model.Context.ValueString())
	if err != nil {
		respDiags.AddAttributeError(
			path.Root("context"),
			"Provided value is not valid",
			fmt.Sprintf("The value provided for context is not valid: %s", err.Error()),
		)
	} else {
		result.Context = *contextValue
	}

	// data_type
	dataTypeValue, err := pingone.NewDaVinciVariableReplaceRequestDataTypeFromValue(model.DataType.ValueString())
	if err != nil {
		respDiags.AddAttributeError(
			path.Root("data_type"),
			"Provided value is not valid",
			fmt.Sprintf("The value provided for data_type is not valid: %s", err.Error()),
		)
	} else {
		result.DataType = *dataTypeValue
	}

	// display_name
	if !model.DisplayName.IsNull() && !model.DisplayName.IsUnknown() {
		result.DisplayName = model.DisplayName.ValueStringPointer()
	}
	// flow
	if !model.Flow.IsNull() && !model.Flow.IsUnknown() {
		flowValue := &pingone.ResourceRelationshipDaVinci{}
		flowAttrs := model.Flow.Attributes()
		flowValue.Id = flowAttrs["id"].(types.String).ValueString()
		result.Flow = flowValue
	}

	// max
	if !model.Max.IsNull() && !model.Max.IsUnknown() {
		result.Max = model.Max.ValueInt32Pointer()
	}
	// min
	if !model.Min.IsNull() && !model.Min.IsUnknown() {
		result.Min = model.Min.ValueInt32Pointer()
	}
	// mutable
	result.Mutable = model.Mutable.ValueBool()
	// name
	result.Name = model.Name.ValueString()
	// value
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		valueValue := &pingone.DaVinciVariableReplaceRequestValue{}
		valueAttrs := model.Value.Attributes()
		valueValue.Bool = valueAttrs["bool"].(types.Bool).ValueBoolPointer()
		valueValue.Float32 = valueAttrs["float32"].(types.Float32).ValueFloat32Pointer()
		if !valueAttrs["json_object"].IsNull() && !valueAttrs["json_object"].IsUnknown() {
			var jsonValueMap map[string]interface{}
			err := json.Unmarshal([]byte(valueAttrs["json_object"].(jsontypes.Normalized).ValueString()), &jsonValueMap)
			if err != nil {
				respDiags.AddAttributeError(
					path.Root("value").AtName("json_object"),
					"Error Parsing JSON Object",
					fmt.Sprintf("The value provided for json_object could not be parsed as json: %s", err.Error()),
				)
			}
			valueValue.MapmapOfStringAny = &jsonValueMap
		}
		if !valueAttrs["string"].IsNull() && !valueAttrs["string"].IsUnknown() {
			valueValue.String = valueAttrs["string"].(types.String).ValueStringPointer()
		} else if !valueAttrs["secret_string"].IsNull() && !valueAttrs["secret_string"].IsUnknown() {
			valueValue.String = valueAttrs["secret_string"].(types.String).ValueStringPointer()
		}
		result.Value = valueValue
	}

	return result, respDiags
}

func (state *davinciVariableResourceModel) readClientResponse(response *pingone.DaVinciVariable) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// context
	var contextPtrValue *string
	if response.Context != nil {
		contextStringValue := string(*response.Context)
		contextPtrValue = &contextStringValue
	}
	contextValue := types.StringPointerValue(contextPtrValue)
	state.Context = contextValue
	// data_type
	dataTypeValue := types.StringValue(string(response.DataType))
	state.DataType = dataTypeValue
	// display_name
	state.DisplayName = types.StringPointerValue(response.DisplayName)
	// flow
	flowAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var flowValue types.Object
	if response.Flow == nil {
		flowValue = types.ObjectNull(flowAttrTypes)
	} else {
		flowValue, diags = types.ObjectValue(flowAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.Flow.Id),
		})
		respDiags.Append(diags...)
	}
	state.Flow = flowValue
	// id
	state.Id = types.StringValue(response.Id.String())
	// max
	// max
	if response.Max == nil {
		state.Max = types.Int32Null()
	} else {
		// The API returns a float, but these values represent ints
		state.Max = types.Int32Value(int32(*response.Max))
	}
	// min
	if response.Min == nil {
		state.Min = types.Int32Null()
	} else {
		// The API returns a float, but these values represent ints
		state.Min = types.Int32Value(int32(*response.Min))
	}
	// mutable
	state.Mutable = types.BoolPointerValue(response.Mutable)
	// name
	state.Name = types.StringValue(response.Name)
	// value
	valueAttrTypes := map[string]attr.Type{
		"bool":          types.BoolType,
		"float32":       types.Float32Type,
		"json_object":   jsontypes.NormalizedType{},
		"string":        types.StringType,
		"secret_string": types.StringType,
	}
	var valueValue types.Object
	// If no value was planned for a secret type, create a null object and ignore asterisks returned by the API
	if response.Value == nil ||
		(state.Value.IsNull() && response.DataType == "secret") {
		valueValue = types.ObjectNull(valueAttrTypes)
	} else {
		jsonObjectValue := jsontypes.NewNormalizedNull()
		if response.Value.MapmapOfStringAny != nil {
			jsonObjectBytes, err := json.Marshal(response.Value.MapmapOfStringAny)
			if err != nil {
				respDiags.AddAttributeError(
					path.Root("value").AtName("json_object"),
					"Error Marshaling JSON Object",
					fmt.Sprintf("An error occurred while marshaling the value JSON object: %s", err.Error()),
				)
			} else {
				jsonObjectValue = jsontypes.NewNormalizedValue(string(jsonObjectBytes))
			}
		}
		// For secret types, the API always returns a series of asterisks for the string value
		stringValue := types.StringPointerValue(response.Value.String)
		secretStringValue := types.StringNull()
		if response.DataType == "secret" {
			stringValue = types.StringNull()
			// Use planned secret string instead of asterisk response
			if !state.Value.IsNull() && !state.Value.IsUnknown() {
				valueAttrs := state.Value.Attributes()
				if !valueAttrs["secret_string"].IsNull() && !valueAttrs["secret_string"].IsUnknown() {
					secretStringValue = types.StringValue(valueAttrs["secret_string"].(types.String).ValueString())
				}
			}
		}
		valueValue, diags = types.ObjectValue(valueAttrTypes, map[string]attr.Value{
			"bool":          types.BoolPointerValue(response.Value.Bool),
			"float32":       types.Float32PointerValue(response.Value.Float32),
			"json_object":   jsonObjectValue,
			"string":        stringValue,
			"secret_string": secretStringValue,
		})
		respDiags.Append(diags...)
	}
	state.Value = valueValue
	return respDiags
}

func (r *davinciVariableResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data davinciVariableResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStructPost()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciVariable
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciVariableApi.CreateVariable(ctx, environmentIdUuid).DaVinciVariableCreateRequest(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"CreateVariable",
		framework.DefaultCustomError,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciVariableResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data davinciVariableResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	idUuid, err := uuid.Parse(data.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.Id.ValueString(), "Id", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciVariable
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciVariableApi.GetVariableById(ctx, environmentIdUuid, idUuid).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetVariableById",
		framework.CustomErrorResourceNotFoundWarning,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Remove from state if resource is not found
	if responseData == nil {
		resp.State.RemoveResource(ctx)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciVariableResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data davinciVariableResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStructPut()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	idUuid, err := uuid.Parse(data.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.Id.ValueString(), "Id", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciVariable
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciVariableApi.ReplaceVariableById(ctx, environmentIdUuid, idUuid).DaVinciVariableReplaceRequest(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"ReplaceVariableById",
		framework.DefaultCustomError,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciVariableResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data davinciVariableResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	idUuid, err := uuid.Parse(data.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.Id.ValueString(), "Id", err.Error()),
		)
		return
	}
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fR, fErr := r.Client.DaVinciVariableApi.DeleteVariableById(ctx, environmentIdUuid, idUuid).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), nil, fR, fErr)
		},
		"DeleteVariableById",
		framework.CustomErrorResourceNotFoundWarning,
		nil,
	)...)
}

func (r *davinciVariableResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	idComponents := []framework.ImportComponent{
		{
			Label:  "environment_id",
			Regexp: verify.P1ResourceIDRegexp,
		},
		{
			Label:     "variable_id",
			Regexp:    verify.P1ResourceIDRegexp,
			PrimaryID: true,
		},
	}

	attributes, err := framework.ParseImportID(req.ID, idComponents...)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			err.Error(),
		)
		return
	}

	for _, idComponent := range idComponents {
		pathKey := idComponent.Label

		if idComponent.PrimaryID {
			pathKey = "id"
		}

		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root(pathKey), attributes[idComponent.Label])...)
	}
}
