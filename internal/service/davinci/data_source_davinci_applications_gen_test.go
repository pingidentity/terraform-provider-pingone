// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
)

func TestAccDavinciApplicationsDataSource_Get_Clean(t *testing.T) {
	testAccDavinciApplicationsDataSource_Get(t, false)
}

func TestAccDavinciApplicationsDataSource_Get_WithBootstrap(t *testing.T) {
	testAccDavinciApplicationsDataSource_Get(t, true)
}

func testAccDavinciApplicationsDataSource_Get(t *testing.T, withBootstrapConfig bool) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	check := davinciApplicationsDataSource_CheckComputedValuesComplete(resourceName)
	if withBootstrapConfig {
		check = resource.ComposeTestCheckFunc(
			check,
			davinciApplicationsDataSource_CheckComputedValuesBootstrapApplication(resourceName),
		)
	}

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplication_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDavinciApplicationsDataSourceConfig_Get(resourceName, withBootstrapConfig),
				Check:  check,
			},
		},
	})
}

func testAccDavinciApplicationsDataSourceConfig_Get(resourceName string, withBootstrapConfig bool) string {
	return fmt.Sprintf(`
	%[1]s

resource "pingone_davinci_application" "%[2]s-simple" {
  environment_id = data.pingone_environment.general_test.id
  name           = "%[2]s-simple"
}

resource "pingone_davinci_application" "%[2]s-full" {
  environment_id = data.pingone_environment.general_test.id
  name           = "%[2]s-full"
  api_key = {
    enabled = false
  }
  oauth = {
    enforce_signed_request_openid = true
    grant_types = [
      "clientCredentials",
      "authorizationCode",
      "implicit",
    ]
    logout_uris = [
      "https://example.com/logout",
    ]
    redirect_uris = [
      "https://example.com/callback",
      "https://example.com/redirect",
    ]
    scopes = [
      "profile",
      "flow_analytics",
      "openid",
    ]
    sp_jwks_url = "https://example.com/jwks"
  }
}

data "pingone_davinci_applications" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id

  depends_on = [
    pingone_davinci_application.%[2]s-simple,
    pingone_davinci_application.%[2]s-full,
  ]
}
`, acctest.DaVinciSandboxEnvironment(withBootstrapConfig), resourceName)
}

// Validate any computed values when applying complete HCL
func davinciApplicationsDataSource_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttrSet(fmt.Sprintf("data.pingone_davinci_applications.%s", resourceName), "id"),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_applications.%s", resourceName), "davinci_applications.*", map[string]string{
			"api_key.enabled":     "true",
			"name":                fmt.Sprintf("%s-simple", resourceName),
			"oauth.grant_types.#": "1",
			"oauth.scopes.#":      "2",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_applications.%s", resourceName), "davinci_applications.*", map[string]string{
			"api_key.enabled":                     "false",
			"name":                                fmt.Sprintf("%s-full", resourceName),
			"oauth.enforce_signed_request_openid": "true",
			"oauth.grant_types.#":                 "3",
			"oauth.logout_uris.#":                 "1",
			"oauth.redirect_uris.#":               "2",
			"oauth.scopes.#":                      "3",
			"oauth.sp_jwks_url":                   "https://example.com/jwks",
		}),
	)

}

func davinciApplicationsDataSource_CheckComputedValuesBootstrapApplication(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_applications.%s", resourceName), "davinci_applications.*", map[string]string{
			"api_key.enabled":     "true",
			"name":                "PingOne SSO Connection",
			"oauth.grant_types.#": "1",
			"oauth.scopes.#":      "2",
		}),
	)
}
