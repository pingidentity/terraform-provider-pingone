// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"fmt"
	"net/http"
	"regexp"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

var (
	_ resource.Resource                = &davinciApplicationResource{}
	_ resource.ResourceWithConfigure   = &davinciApplicationResource{}
	_ resource.ResourceWithImportState = &davinciApplicationResource{}
)

func NewDavinciApplicationResource() resource.Resource {
	return &davinciApplicationResource{}
}

type davinciApplicationResource serviceClientType

func (r *davinciApplicationResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_application"
}

func (r *davinciApplicationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciApplicationResourceModel struct {
	ApiKey        types.Object `tfsdk:"api_key"`
	EnvironmentId types.String `tfsdk:"environment_id"`
	Id            types.String `tfsdk:"id"`
	Name          types.String `tfsdk:"name"`
	Oauth         types.Object `tfsdk:"oauth"`
}

func (r *davinciApplicationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	apiKeyDefault, diags := types.ObjectValue(map[string]attr.Type{
		"enabled": types.BoolType,
		"value":   types.StringType,
	}, map[string]attr.Value{
		"enabled": types.BoolValue(true),
		"value":   types.StringUnknown(),
	})
	resp.Diagnostics.Append(diags...)
	oauthGrantTypesDefault, diags := types.SetValue(types.StringType, []attr.Value{
		types.StringValue("authorizationCode"),
	})
	resp.Diagnostics.Append(diags...)
	oauthScopesDefault, diags := types.SetValue(types.StringType, []attr.Value{
		types.StringValue("openid"),
		types.StringValue("profile"),
	})
	resp.Diagnostics.Append(diags...)
	emptySetDefault, diags := types.SetValue(types.StringType, nil)
	resp.Diagnostics.Append(diags...)
	oauthDefault, diags := types.ObjectValue(map[string]attr.Type{
		"client_secret":                 types.StringType,
		"enforce_signed_request_openid": types.BoolType,
		"grant_types":                   types.SetType{ElemType: types.StringType},
		"logout_uris":                   types.SetType{ElemType: types.StringType},
		"redirect_uris":                 types.SetType{ElemType: types.StringType},
		"scopes":                        types.SetType{ElemType: types.StringType},
		"sp_jwks_openid":                types.StringType,
		"sp_jwks_url":                   types.StringType,
	}, map[string]attr.Value{
		"client_secret":                 types.StringUnknown(),
		"enforce_signed_request_openid": types.BoolNull(),
		"grant_types":                   oauthGrantTypesDefault,
		"logout_uris":                   emptySetDefault,
		"redirect_uris":                 emptySetDefault,
		"scopes":                        oauthScopesDefault,
		"sp_jwks_openid":                types.StringNull(),
		"sp_jwks_url":                   types.StringNull(),
	})
	resp.Diagnostics.Append(diags...)
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a DaVinci application.",
		Attributes: map[string]schema.Attribute{
			"api_key": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						Default:  booldefault.StaticBool(true),
					},
					"value": schema.StringAttribute{
						Computed:  true,
						Sensitive: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
					},
				},
				Computed: true,
				Optional: true,
				Default:  objectdefault.StaticValue(apiKeyDefault),
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment to create and manage the davinci_application in.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(256),
				},
			},
			"oauth": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"client_secret": schema.StringAttribute{
						Computed:  true,
						Sensitive: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
					},
					"enforce_signed_request_openid": schema.BoolAttribute{
						Optional: true,
					},
					"grant_types": schema.SetAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "Options are \"authorizationCode\", \"clientCredentials\", \"implicit\".",
						MarkdownDescription: "Options are `authorizationCode`, `clientCredentials`, `implicit`.",
						Validators: []validator.Set{
							setvalidator.ValueStringsAre(stringvalidator.OneOf(
								"authorizationCode",
								"clientCredentials",
								"implicit",
							)),
						},
						Default: setdefault.StaticValue(oauthGrantTypesDefault),
					},
					"logout_uris": schema.SetAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Default:     setdefault.StaticValue(emptySetDefault),
					},
					"redirect_uris": schema.SetAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Default:     setdefault.StaticValue(emptySetDefault),
					},
					"scopes": schema.SetAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "Options are \"flow_analytics\", \"offline_access\", \"openid\", \"profile\".",
						MarkdownDescription: "Options are `flow_analytics`, `offline_access`, `openid`, `profile`.",
						Validators: []validator.Set{
							setvalidator.ValueStringsAre(stringvalidator.OneOf(
								"flow_analytics",
								"offline_access",
								"openid",
								"profile",
							)),
						},
						Default: setdefault.StaticValue(oauthScopesDefault),
					},
					"sp_jwks_openid": schema.StringAttribute{
						Optional: true,
					},
					"sp_jwks_url": schema.StringAttribute{
						Optional: true,
					},
				},
				Optional: true,
				Computed: true,
				Default:  objectdefault.StaticValue(oauthDefault),
			},
		},
	}
}

func (model *davinciApplicationResourceModel) buildClientStructPost() (*pingone.DaVinciApplicationCreateRequest, diag.Diagnostics) {
	result := &pingone.DaVinciApplicationCreateRequest{}
	var respDiags diag.Diagnostics
	// name
	result.Name = model.Name.ValueString()
	return result, respDiags
}

func (model *davinciApplicationResourceModel) buildClientStructPut() (*pingone.DaVinciApplicationReplaceRequest, diag.Diagnostics) {
	result := &pingone.DaVinciApplicationReplaceRequest{}
	var respDiags diag.Diagnostics
	// api_key
	if !model.ApiKey.IsNull() && !model.ApiKey.IsUnknown() {
		if !model.ApiKey.Attributes()["enabled"].IsNull() && !model.ApiKey.Attributes()["enabled"].IsUnknown() {
			result.ApiKeyEnabled = model.ApiKey.Attributes()["enabled"].(types.Bool).ValueBoolPointer()
		}
	}
	// name
	result.Name = model.Name.ValueString()
	// oauth
	if !model.Oauth.IsNull() && !model.Oauth.IsUnknown() {
		oauthValue := &pingone.DaVinciApplicationReplaceRequestOAuth{}
		oauthAttrs := model.Oauth.Attributes()
		oauthValue.EnforceSignedRequestOpenid = oauthAttrs["enforce_signed_request_openid"].(types.Bool).ValueBoolPointer()
		if !oauthAttrs["grant_types"].IsNull() && !oauthAttrs["grant_types"].IsUnknown() {
			oauthValue.GrantTypes = []pingone.DaVinciApplicationReplaceRequestOAuthGrantType{}
			for _, grantTypesElement := range oauthAttrs["grant_types"].(types.Set).Elements() {
				var grantTypesValue pingone.DaVinciApplicationReplaceRequestOAuthGrantType
				grantTypesEnumValue, err := pingone.NewDaVinciApplicationReplaceRequestOAuthGrantTypeFromValue(grantTypesElement.(types.String).ValueString())
				if err != nil {
					respDiags.AddAttributeError(
						path.Root("grant_types"),
						"Provided value is not valid",
						fmt.Sprintf("The value provided for grant_types is not valid: %s", err.Error()),
					)
				} else {
					grantTypesValue = *grantTypesEnumValue
				}
				oauthValue.GrantTypes = append(oauthValue.GrantTypes, grantTypesValue)
			}
		}
		if !oauthAttrs["logout_uris"].IsNull() && !oauthAttrs["logout_uris"].IsUnknown() {
			oauthValue.LogoutUris = []string{}
			for _, logoutUrisElement := range oauthAttrs["logout_uris"].(types.Set).Elements() {
				oauthValue.LogoutUris = append(oauthValue.LogoutUris, logoutUrisElement.(types.String).ValueString())
			}
		}
		if !oauthAttrs["redirect_uris"].IsNull() && !oauthAttrs["redirect_uris"].IsUnknown() {
			oauthValue.RedirectUris = []string{}
			for _, redirectUrisElement := range oauthAttrs["redirect_uris"].(types.Set).Elements() {
				oauthValue.RedirectUris = append(oauthValue.RedirectUris, redirectUrisElement.(types.String).ValueString())
			}
		}
		if !oauthAttrs["scopes"].IsNull() && !oauthAttrs["scopes"].IsUnknown() {
			oauthValue.Scopes = []pingone.DaVinciApplicationReplaceRequestOAuthScope{}
			for _, scopesElement := range oauthAttrs["scopes"].(types.Set).Elements() {
				var scopesValue pingone.DaVinciApplicationReplaceRequestOAuthScope
				scopesEnumValue, err := pingone.NewDaVinciApplicationReplaceRequestOAuthScopeFromValue(scopesElement.(types.String).ValueString())
				if err != nil {
					respDiags.AddAttributeError(
						path.Root("scopes"),
						"Provided value is not valid",
						fmt.Sprintf("The value provided for scopes is not valid: %s", err.Error()),
					)
				} else {
					scopesValue = *scopesEnumValue
				}
				oauthValue.Scopes = append(oauthValue.Scopes, scopesValue)
			}
		}
		oauthValue.SpJwksOpenid = oauthAttrs["sp_jwks_openid"].(types.String).ValueStringPointer()
		oauthValue.SpjwksUrl = oauthAttrs["sp_jwks_url"].(types.String).ValueStringPointer()
		result.Oauth = oauthValue
	}

	return result, respDiags
}

func (state *davinciApplicationResourceModel) readClientResponse(response *pingone.DaVinciApplicationResponse) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// api_key
	apiKeyAttrTypes := map[string]attr.Type{
		"enabled": types.BoolType,
		"value":   types.StringType,
	}
	apiKeyValue, diags := types.ObjectValue(apiKeyAttrTypes, map[string]attr.Value{
		"enabled": types.BoolValue(response.ApiKey.Enabled),
		"value":   types.StringValue(response.ApiKey.Value),
	})
	respDiags.Append(diags...)
	state.ApiKey = apiKeyValue
	// id
	state.Id = types.StringValue(response.Id)
	// name
	state.Name = types.StringValue(response.Name)
	// oauth
	oauthAttrTypes := map[string]attr.Type{
		"client_secret":                 types.StringType,
		"enforce_signed_request_openid": types.BoolType,
		"grant_types":                   types.SetType{ElemType: types.StringType},
		"logout_uris":                   types.SetType{ElemType: types.StringType},
		"redirect_uris":                 types.SetType{ElemType: types.StringType},
		"scopes":                        types.SetType{ElemType: types.StringType},
		"sp_jwks_openid":                types.StringType,
		"sp_jwks_url":                   types.StringType,
	}
	var oauthGrantTypesValue types.Set
	if response.Oauth.GrantTypes == nil {
		oauthGrantTypesValue, diags = types.SetValue(types.StringType, []attr.Value{})
		respDiags.Append(diags...)
	} else {
		oauthGrantTypesValue, diags = types.SetValueFrom(context.Background(), types.StringType, response.Oauth.GrantTypes)
		respDiags.Append(diags...)
	}
	var oauthLogoutUrisValue types.Set
	if response.Oauth.LogoutUris == nil {
		oauthLogoutUrisValue, diags = types.SetValue(types.StringType, []attr.Value{})
		respDiags.Append(diags...)
	} else {
		oauthLogoutUrisValue, diags = types.SetValueFrom(context.Background(), types.StringType, response.Oauth.LogoutUris)
		respDiags.Append(diags...)
	}
	var oauthRedirectUrisValue types.Set
	if response.Oauth.RedirectUris == nil {
		oauthRedirectUrisValue, diags = types.SetValue(types.StringType, []attr.Value{})
		respDiags.Append(diags...)
	} else {
		oauthRedirectUrisValue, diags = types.SetValueFrom(context.Background(), types.StringType, response.Oauth.RedirectUris)
		respDiags.Append(diags...)
	}
	var oauthScopesValue types.Set
	if response.Oauth.Scopes == nil {
		oauthScopesValue, diags = types.SetValue(types.StringType, []attr.Value{})
		respDiags.Append(diags...)
	} else {
		oauthScopesValue, diags = types.SetValueFrom(context.Background(), types.StringType, response.Oauth.Scopes)
		respDiags.Append(diags...)
	}
	oauthValue, diags := types.ObjectValue(oauthAttrTypes, map[string]attr.Value{
		"client_secret":                 types.StringValue(response.Oauth.ClientSecret),
		"enforce_signed_request_openid": types.BoolPointerValue(response.Oauth.EnforceSignedRequestOpenid),
		"grant_types":                   oauthGrantTypesValue,
		"logout_uris":                   oauthLogoutUrisValue,
		"redirect_uris":                 oauthRedirectUrisValue,
		"scopes":                        oauthScopesValue,
		"sp_jwks_openid":                types.StringPointerValue(response.Oauth.SpJwksOpenid),
		"sp_jwks_url":                   types.StringPointerValue(response.Oauth.SpjwksUrl),
	})
	respDiags.Append(diags...)
	state.Oauth = oauthValue
	return respDiags
}

func (r *davinciApplicationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data davinciApplicationResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciApplicationResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciApplicationsApi.GetDavinciApplicationById(ctx, environmentIdUuid, data.Id.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetDavinciApplicationById",
		framework.CustomErrorResourceNotFoundWarning,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Remove from state if resource is not found
	if responseData == nil {
		resp.State.RemoveResource(ctx)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciApplicationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data davinciApplicationResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStructPut()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciApplicationResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciApplicationsApi.ReplaceDavinciApplicationById(ctx, environmentIdUuid, data.Id.ValueString()).DaVinciApplicationReplaceRequest(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"ReplaceDavinciApplicationById",
		framework.DefaultCustomError,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciApplicationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data davinciApplicationResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fR, fErr := r.Client.DaVinciApplicationsApi.DeleteDavinciApplicationById(ctx, environmentIdUuid, data.Id.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), nil, fR, fErr)
		},
		"DeleteDavinciApplicationById",
		framework.CustomErrorResourceNotFoundWarning,
		framework.DefaultRetryable,
		nil,
	)...)
}

func (r *davinciApplicationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	idComponents := []framework.ImportComponent{
		{
			Label:  "environment_id",
			Regexp: verify.P1ResourceIDRegexp,
		},
		{
			Label:     "application_id",
			PrimaryID: true,
			Regexp:    verify.P1DVResourceIDRegexp,
		},
	}

	attributes, err := framework.ParseImportID(req.ID, idComponents...)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			err.Error(),
		)
		return
	}

	for _, idComponent := range idComponents {
		pathKey := idComponent.Label

		if idComponent.PrimaryID {
			pathKey = "id"
		}

		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root(pathKey), attributes[idComponent.Label])...)
	}
}
