// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"context"
	"fmt"
	"os"
	"regexp"
	"testing"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	acctestlegacysdk "github.com/pingidentity/terraform-provider-pingone/internal/acctest/legacysdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest/service/base"
)

func TestAccDavinciApplication_RemovalDrift(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_application.%s", resourceName)

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")
	var environmentId string
	var id string

	var p1Client *pingone.APIClient
	var ctx = context.Background()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)

			p1Client = acctest.PreCheckTestClient(ctx, t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplication_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciApplication_MinimalHCL(resourceName),
				Check:  davinciApplication_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					davinciApplication_Delete(ctx, p1Client, t, environmentId, id)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
			// Test removal of the environment
			{
				Config: davinciApplication_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciApplication_GetIDs(resourceFullName, &environmentId, &id),
			},
			{
				PreConfig: func() {
					base.Environment_RemovalDrift_PreConfig(ctx, p1Client, t, environmentId)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccDavinciApplication_MinimalMaximal(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_application.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplication_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: davinciApplication_MinimalHCL(resourceName),
				Check:  davinciApplication_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Delete the minimal model
				Config:  davinciApplication_MinimalHCL(resourceName),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: davinciApplication_CompleteHCL(resourceName),
				Check:  davinciApplication_CheckComputedValuesComplete(resourceName),
			},
			{
				// Back to minimal model
				Config: davinciApplication_MinimalHCL(resourceName),
				Check:  davinciApplication_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Back to complete model
				Config: davinciApplication_CompleteHCL(resourceName),
				Check:  davinciApplication_CheckComputedValuesComplete(resourceName),
			},
			{
				// Complete model with reordering of lists and sets
				Config: davinciApplication_CompleteReorderedHCL(resourceName),
				//TODO update checks if different results are expected after reordering
				Check: davinciApplication_CheckComputedValuesComplete(resourceName),
			},
			{
				// Test importing the resource
				Config:       davinciApplication_CompleteHCL(resourceName),
				ResourceName: fmt.Sprintf("pingone_davinci_application.%s", resourceName),
				ImportStateIdFunc: func() resource.ImportStateIdFunc {
					return func(s *terraform.State) (string, error) {
						rs, ok := s.RootModule().Resources[resourceFullName]
						if !ok {
							return "", fmt.Errorf("Resource Not found: %s", resourceFullName)
						}

						return fmt.Sprintf("%s/%s", rs.Primary.Attributes["environment_id"], rs.Primary.Attributes["id"]), nil
					}
				}(),
				ImportStateVerifyIdentifierAttribute: "id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func TestAccDavinciApplication_NewEnv(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplication_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: davinciApplication_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciApplication_CheckComputedValuesMinimal(resourceName),
			},
		},
	})
}

func TestAccDavinciApplication_BadParameters(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_application.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplication_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciApplication_MinimalHCL(resourceName),
			},
			// Errors
			{
				ResourceName: resourceFullName,
				ImportState:  true,
				ExpectError:  regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "/",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "badformat/badformat",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
		},
	})
}

// Minimal HCL with only required values set
func davinciApplication_MinimalHCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  id = //TODO
  // TODO set values for minimal fields
  name = //TODO
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Maximal HCL with all values set where possible
func davinciApplication_CompleteHCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  id = //TODO
  // TODO set values for complete fields
  name = //TODO
  oauth = {
    enforce_signed_request_openid = //TODO
    grant_types = //TODO
    logout_uris = //TODO
    redirect_uris = //TODO
    scopes = //TODO
    sp_jwks_openid = //TODO
    spjwks_url = //TODO
  }
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Maximal HCL with all values set, with ordering changes in lists and sets from the default CompleteHCL
func davinciApplication_CompleteReorderedHCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  id = //TODO
  // TODO set values for complete fields, with ordering changes
  name = //TODO
  oauth = {
    enforce_signed_request_openid = //TODO
    grant_types = //TODO
    logout_uris = //TODO
    redirect_uris = //TODO
    scopes = //TODO
    sp_jwks_openid = //TODO
    spjwks_url = //TODO
  }
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciApplication_NewEnvHCL(environmentName, licenseID, resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application" "%[3]s" {
  environment_id = pingone_environment.%[2]s.id
  id = //TODO
  // TODO set values for minimal fields
  name = //TODO
}
`, acctestlegacysdk.MinimalSandboxEnvironment(environmentName, licenseID), environmentName, resourceName)
}

// Validate any computed values when applying minimal HCL
// TODO remove any values that are not computed from this check
// TODO set expected values
func davinciApplication_CheckComputedValuesMinimal(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "api_key.enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "api_key.value", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.client_secret", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.enforce_signed_request_openid", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.grant_types.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.logout_uris.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.redirect_uris.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.scopes.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.sp_jwks_openid", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.spjwks_url", "expected_value"),
	)
}

// Validate any computed values when applying complete HCL
// TODO This may not be needed as a separate function from minimal HCL if the expected values match
// TODO remove any values that are not computed from this check
// TODO set expected values
func davinciApplication_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "api_key.enabled", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "api_key.value", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.client_secret", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.enforce_signed_request_openid", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.grant_types.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.logout_uris.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.redirect_uris.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.scopes.0", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.sp_jwks_openid", "expected_value"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application.%s", resourceName), "oauth.spjwks_url", "expected_value"),
	)
}

func davinciApplication_GetIDs(resourceName string, environmentId, id *string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Resource Not found: %s", resourceName)
		}
		if environmentId != nil {
			*environmentId = rs.Primary.Attributes["environment_id"]
		}
		if id != nil {
			*id = rs.Primary.Attributes["id"]
		}

		return nil
	}
}

// Delete the resource
func davinciApplication_Delete(ctx context.Context, apiClient *pingone.APIClient, t *testing.T, environmentId, id string) {
	if environmentId == "" || id == "" {
		t.Fatalf("One of the identifier attributes can't be determined. environmentId: '%s' id: '%s'", environmentId, id)
	}

	_, err := apiClient.DaVinciApplicationApi.DeleteDavinciApplicationById(ctx, uuid.MustParse(environmentId), id).Execute()
	if err != nil {
		t.Fatalf("Failed to delete davinci_application: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func davinciApplication_CheckDestroy(s *terraform.State) error {
	var ctx = context.Background()

	p1Client, err := acctest.TestClient(ctx)

	if err != nil {
		return err
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "pingone_davinci_application" {
			continue
		}
		shouldContinue, err := acctest.CheckParentEnvironmentDestroy(ctx, p1Client, rs.Primary.Attributes["environment_id"])
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		_, r, err := p1Client.DaVinciApplicationApi.GetDavinciApplicationById(ctx, uuid.MustParse(rs.Primary.Attributes["environment_id"]), rs.Primary.Attributes["id"]).Execute()

		shouldContinue, err = acctest.CheckForResourceDestroy(r, err)
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		return fmt.Errorf("PingOne davinci_application Instance %s still exists", rs.Primary.ID)
	}

	return nil
}
