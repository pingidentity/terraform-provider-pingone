// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
)

func TestAccDavinciConnectorDataSource_ByIDFull(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDavinciConnectorDataSourceConfig_ByIDFull(resourceName),
				Check:  davinciConnectorDataSource_CheckComputedValuesComplete(resourceName),
			},
		},
	})
}

func TestAccDavinciConnectorDataSource_NotFound(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config:      testAccDavinciConnectorDataSourceConfig_NotFoundByID(resourceName),
				ExpectError: regexp.MustCompile("The requested resource was not found"),
			},
		},
	})
}

func testAccDavinciConnectorDataSourceConfig_ByIDFull(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

data "pingone_davinci_connector" "%[2]s-zendesk" {
  environment_id = data.pingone_environment.general_test.id
  connector_id = "connectorZendesk"
}

data "pingone_davinci_connector" "%[2]s-pingauthadapter" {
  environment_id = data.pingone_environment.general_test.id
  connector_id = "pingauthadapter"
}
data "pingone_davinci_connector" "%[2]s-pingoneforms" {
  environment_id = data.pingone_environment.general_test.id
  connector_id = "pingOneFormsConnector"
}`, acctest.GenericSandboxEnvironment(), resourceName)
}

func testAccDavinciConnectorDataSourceConfig_NotFoundByID(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

data "pingone_davinci_connector" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  connector_id = "9c052a8a14be44e48f072662569994ce" // dummy generic ID
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Validate any computed values when applying complete HCL
func davinciConnectorDataSource_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		// Zendesk Connector
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "description", "Create, read, update and delete Zendesk users and tickets"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "id", "connectorZendesk"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "metadata.colors.canvas", "#BDD9D7"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "metadata.colors.canvas_text", "#212529"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "metadata.colors.dark", "#03363D"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "metadata.logos.canvas.image_file_name", "zendesk.svg"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "metadata.type", "service"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "metadata.vendor", "zendesk"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "name", "Zendesk"),
		resource.TestCheckResourceAttrSet(fmt.Sprintf("data.pingone_davinci_connector.%s-zendesk", resourceName), "version"),
		// PingOne Auth Adapter Connector
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "description", "Demonstrate how Ping can authorize and optionally filter an HTTP request and response. This connector showcases PingOne Authorize API Access Management without needing to configure an API Gateway and Ping Identity integration kit.\nWARNING: You should only use this connector in a Sandbox environment."),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "id", "pingauthadapter"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "metadata.colors.canvas", "#6AC15C"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "metadata.colors.canvas_text", "#171D21"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "metadata.colors.dark", "#171D21"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "metadata.logos.canvas.image_file_name", "pingIdentity.svg"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "metadata.type", "ping"),
		resource.TestCheckNoResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "metadata.vendor"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "name", "PingOne Authorize - API Access Management"),
		resource.TestCheckResourceAttrSet(fmt.Sprintf("data.pingone_davinci_connector.%s-pingauthadapter", resourceName), "version"),
		// PingOne Forms Connector
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "description", "Enhance your DaVinci flows with the forms and branding you create in PingOne."),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "id", "pingOneFormsConnector"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "metadata.colors.canvas", "#E3F0FF"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "metadata.colors.canvas_text", "#212529"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "metadata.colors.dark", "#2B90C9"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "metadata.logos.canvas.image_file_name", "pingone-forms.svg"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "metadata.type", "ping"),
		resource.TestCheckNoResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "metadata.vendor"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "name", "PingOne Forms"),
		resource.TestCheckResourceAttrSet(fmt.Sprintf("data.pingone_davinci_connector.%s-pingoneforms", resourceName), "version"),
	)
}
