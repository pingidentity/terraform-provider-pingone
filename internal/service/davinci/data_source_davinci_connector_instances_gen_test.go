// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
)

func TestAccDavinciConnectorInstancesDataSource_Get_Clean(t *testing.T) {
	testAccDavinciConnectorInstancesDataSource_Get(t, false)
}

func TestAccDavinciConnectorInstancesDataSource_Get_WithBootstrap(t *testing.T) {
	testAccDavinciConnectorInstancesDataSource_Get(t, true)
}

func testAccDavinciConnectorInstancesDataSource_Get(t *testing.T, withBootstrapConfig bool) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	var testCheck resource.TestCheckFunc
	if withBootstrapConfig {
		testCheck = resource.ComposeTestCheckFunc(
			davinciConnectorInstancesDataSource_CheckComputedValuesComplete(resourceName),
			davinciConnectorInstancesDataSource_CheckComputedValuesWithBootstrap(resourceName),
		)
	} else {
		testCheck = davinciConnectorInstancesDataSource_CheckComputedValuesComplete(resourceName)
	}

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciConnectorInstance_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDavinciConnectorInstancesDataSourceConfig_Get(resourceName, withBootstrapConfig),
				Check:  testCheck,
			},
		},
	})
}

func testAccDavinciConnectorInstancesDataSourceConfig_Get(resourceName string, withBootstrapConfig bool) string {
	return fmt.Sprintf(`
	%[1]s

resource "pingone_davinci_connector_instance" "%[2]s-first" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "webhookConnector"
  }
  name = "%[2]s-first"
  properties = jsonencode({
        "urls": {
            "type": "string",
            "displayName": "Register URLs",
            "createdDate": 12345,
            "customerId": "12345",
            "companyId": "singularkey",
            "preferredControlType": "urlsTableView",
            "info": "POST requests will be made to these registered url as selected later.",
            "required": true,
            "value": [
                {
                    "name": "example",
                    "url": "https://example.com",
                    "token": "mytoken",
                    "value": "https://example.com"
                }
            ]
        }
    })
}

resource "pingone_davinci_connector_instance" "%[2]s-second" {
  environment_id = data.pingone_environment.general_test.id
  connector = {
    id = "webhookConnector"
  }
  name = "%[2]s-second"
  properties = jsonencode({
        "urls": {
            "type": "string",
            "displayName": "Register URLs",
            "createdDate": 12345,
            "customerId": "12345",
            "companyId": "singularkey",
            "preferredControlType": "urlsTableView",
            "info": "POST requests will be made to these registered url as selected later.",
            "required": true,
            "value": [
                {
                    "name": "example",
                    "url": "https://example.com",
                    "token": "mytoken",
                    "value": "https://example.com"
                }
            ]
        }
    })
}

data "pingone_davinci_connector_instances" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id

  depends_on = [
	pingone_davinci_connector_instance.%[2]s-first,
	pingone_davinci_connector_instance.%[2]s-second,
  ]
}
`, acctest.DaVinciSandboxEnvironment(withBootstrapConfig), resourceName)
}

// Validate any computed values when applying complete HCL
func davinciConnectorInstancesDataSource_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttrSet(fmt.Sprintf("data.pingone_davinci_connector_instances.%s", resourceName), "id"),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_connector_instances.%s", resourceName), "connector_instances.*", map[string]string{
			"connector.id": "webhookConnector",
			"name":         fmt.Sprintf("%s-first", resourceName),
			"properties":   "{\"urls\":{\"companyId\":\"singularkey\",\"createdDate\":12345,\"customerId\":\"12345\",\"displayName\":\"Register URLs\",\"info\":\"POST requests will be made to these registered url as selected later.\",\"preferredControlType\":\"urlsTableView\",\"required\":true,\"type\":\"string\",\"value\":[{\"name\":\"example\",\"token\":\"mytoken\",\"url\":\"https://example.com\",\"value\":\"https://example.com\"}]}}",
		}),
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_connector_instances.%s", resourceName), "connector_instances.*", map[string]string{
			"connector.id": "webhookConnector",
			"name":         fmt.Sprintf("%s-second", resourceName),
			"properties":   "{\"urls\":{\"companyId\":\"singularkey\",\"createdDate\":12345,\"customerId\":\"12345\",\"displayName\":\"Register URLs\",\"info\":\"POST requests will be made to these registered url as selected later.\",\"preferredControlType\":\"urlsTableView\",\"required\":true,\"type\":\"string\",\"value\":[{\"name\":\"example\",\"token\":\"mytoken\",\"url\":\"https://example.com\",\"value\":\"https://example.com\"}]}}",
		}),
	)
}

func davinciConnectorInstancesDataSource_CheckComputedValuesWithBootstrap(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckTypeSetElemNestedAttrs(fmt.Sprintf("data.pingone_davinci_connector_instances.%s", resourceName), "connector_instances.*", map[string]string{
			"connector.id": "pingOneSSOConnector",
			"name":         "PingOne",
			"id":           "94141bf2f1b9b59a5f5365ff135e02bb",
		}),
	)
}
