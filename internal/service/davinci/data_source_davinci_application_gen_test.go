// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

func TestAccDavinciApplicationDataSource_ByIDFull(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplication_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDavinciApplicationDataSourceConfig_ByIDFull(resourceName),
				Check:  davinciApplicationDataSource_CheckComputedValuesComplete(resourceName),
			},
		},
	})
}

func TestAccDavinciApplicationDataSource_NotFound(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplication_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config:      testAccDavinciApplicationDataSourceConfig_NotFoundByID(resourceName),
				ExpectError: regexp.MustCompile("The requested resource was not found"),
			},
		},
	})
}

func testAccDavinciApplicationDataSourceConfig_Full(resourceName string) string {
	return fmt.Sprintf(`
resource "pingone_davinci_application" "%[1]s" {
  environment_id = data.pingone_environment.general_test.id
  name = "%[1]s"
  api_key  = {
    enabled = false
}
  oauth = {
    enforce_signed_request_openid = true
    grant_types = [
	  "clientCredentials",
	  "authorizationCode",
	  "implicit",
	]
    logout_uris = [
	  "https://example.com/logout",
	]
    redirect_uris = [
	  "https://example.com/callback",
	  "https://example.com/redirect",
	]
    scopes = [
	  "profile",
	  "flow_analytics",
	  "openid",
	]
    sp_jwks_url = "https://example.com/jwks"
  }
}
`, resourceName)
}

func testAccDavinciApplicationDataSourceConfig_ByIDFull(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

    %[3]s

data "pingone_davinci_application" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  application_id = pingone_davinci_application.%[2]s.id
}`, acctest.GenericSandboxEnvironment(), resourceName, testAccDavinciApplicationDataSourceConfig_Full(resourceName))
}

func testAccDavinciApplicationDataSourceConfig_NotFoundByID(resourceName string) string {
	return fmt.Sprintf(`
	%[1]s

data "pingone_davinci_application" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  application_id = "9c052a8a-14be-44e4-8f07-2662569994ce" // dummy ID that conforms to UUID v4
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

// Validate any computed values when applying complete HCL
func davinciApplicationDataSource_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "api_key.enabled", "false"),
		resource.TestCheckResourceAttrSet(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "api_key.value"),
		resource.TestMatchResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "id", verify.P1DVResourceIDRegexp),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "name", resourceName),
		resource.TestCheckResourceAttrSet(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.client_secret"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.enforce_signed_request_openid", "true"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.grant_types.#", "3"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.grant_types.*", "clientCredentials"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.grant_types.*", "authorizationCode"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.grant_types.*", "implicit"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.logout_uris.#", "1"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.logout_uris.*", "https://example.com/logout"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.redirect_uris.#", "2"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.redirect_uris.*", "https://example.com/callback"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.redirect_uris.*", "https://example.com/redirect"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.scopes.#", "3"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.scopes.*", "profile"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.scopes.*", "flow_analytics"),
		resource.TestCheckTypeSetElemAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.scopes.*", "openid"),
		resource.TestCheckNoResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.sp_jwks_openid"),
		resource.TestCheckResourceAttr(fmt.Sprintf("data.pingone_davinci_application.%s", resourceName), "oauth.spjwks_url", "https://example.com/jwks"),
	)
}
