// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci_test

import (
	"context"
	"fmt"
	"os"
	"regexp"
	"testing"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/acctest"
	acctestlegacysdk "github.com/pingidentity/terraform-provider-pingone/internal/acctest/legacysdk"
)

func TestAccDavinciApplicationFlowPolicy_RemovalDrift(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName)

	//environmentName := acctest.ResourceNameGenEnvironment()

	//licenseID := os.Getenv("PINGONE_LICENSE_ID")
	var environmentId string
	var daVinciApplicationId string
	var id string

	var p1Client *pingone.APIClient
	var ctx = context.Background()

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)

			p1Client = acctest.PreCheckTestClient(ctx, t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplicationFlowPolicy_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciApplicationFlowPolicy_MinimalHCL(resourceName, false),
				Check:  davinciApplicationFlowPolicy_GetIDs(resourceFullName, &environmentId, &daVinciApplicationId, &id),
			},
			{
				PreConfig: func() {
					davinciApplicationFlowPolicy_Delete(ctx, p1Client, t, environmentId, daVinciApplicationId, id)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
			// Test removal of the environment
			//TODO re-enable this test when the pingone_davinci_flow resource is available
			// {
			// 	Config: davinciApplicationFlowPolicy_NewEnvHCL(environmentName, licenseID, resourceName),
			// 	Check:  davinciApplicationFlowPolicy_GetIDs(resourceFullName, &environmentId, &daVinciApplicationId, &id),
			// },
			// {
			// 	PreConfig: func() {
			// 		base.Environment_RemovalDrift_PreConfig(ctx, p1Client, t, environmentId)
			// 	},
			// 	RefreshState:       true,
			// 	ExpectNonEmptyPlan: true,
			// },
		},
	})
}

func TestAccDavinciApplicationFlowPolicy_MinimalMaximalClean(t *testing.T) {
	testAccDavinciApplicationFlowPolicy_MinimalMaximal(t, false)
}

func TestAccDavinciApplicationFlowPolicy_MinimalMaximalBootstrapped(t *testing.T) {
	testAccDavinciApplicationFlowPolicy_MinimalMaximal(t, true)
}

func testAccDavinciApplicationFlowPolicy_MinimalMaximal(t *testing.T, withBootstrapConfig bool) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplicationFlowPolicy_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: davinciApplicationFlowPolicy_MinimalHCL(resourceName, withBootstrapConfig),
				Check:  davinciApplicationFlowPolicy_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Delete the minimal model
				Config:  davinciApplicationFlowPolicy_MinimalHCL(resourceName, withBootstrapConfig),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: davinciApplicationFlowPolicy_CompleteHCL(resourceName, withBootstrapConfig),
				// Check:  davinciApplicationFlowPolicy_CheckComputedValuesComplete(resourceName),
			},
			{
				// Back to minimal model
				Config: davinciApplicationFlowPolicy_MinimalHCL(resourceName, withBootstrapConfig),
				Check:  davinciApplicationFlowPolicy_CheckComputedValuesMinimal(resourceName),
			},
			{
				// Back to complete model
				Config: davinciApplicationFlowPolicy_CompleteHCL(resourceName, withBootstrapConfig),
				// Check:  davinciApplicationFlowPolicy_CheckComputedValuesComplete(resourceName),
			},
			// {
			// 	// Complete model with reordering of lists and sets
			// 	Config: davinciApplicationFlowPolicy_CompleteReorderedHCL(resourceName),
			// 	//TODO update checks if different results are expected after reordering
			// 	Check: davinciApplicationFlowPolicy_CheckComputedValuesComplete(resourceName),
			// },
			{
				// Test importing the resource
				Config:       davinciApplicationFlowPolicy_CompleteHCL(resourceName, withBootstrapConfig),
				ResourceName: fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName),
				ImportStateIdFunc: func() resource.ImportStateIdFunc {
					return func(s *terraform.State) (string, error) {
						rs, ok := s.RootModule().Resources[resourceFullName]
						if !ok {
							return "", fmt.Errorf("Resource Not found: %s", resourceFullName)
						}

						return fmt.Sprintf("%s/%s/%s", rs.Primary.Attributes["environment_id"], rs.Primary.Attributes["da_vinci_application_id"], rs.Primary.Attributes["id"]), nil
					}
				}(),
				ImportStateVerifyIdentifierAttribute: "id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func TestAccDavinciApplicationFlowPolicy_NewEnv(t *testing.T) {
	t.Skip("Skipping test as the pingone_davinci_flow resource will be needed for this")
	t.Parallel()

	resourceName := acctest.ResourceNameGen()

	environmentName := acctest.ResourceNameGenEnvironment()

	licenseID := os.Getenv("PINGONE_LICENSE_ID")

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNewEnvironment(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplicationFlowPolicy_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			{
				Config: davinciApplicationFlowPolicy_NewEnvHCL(environmentName, licenseID, resourceName),
				Check:  davinciApplicationFlowPolicy_CheckComputedValuesMinimal(resourceName),
			},
		},
	})
}

func TestAccDavinciApplicationFlowPolicy_BadParameters(t *testing.T) {
	t.Parallel()

	resourceName := acctest.ResourceNameGen()
	resourceFullName := fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName)

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheckClient(t)
			acctest.PreCheckNoFeatureFlag(t)
		},
		ProtoV6ProviderFactories: acctest.ProtoV6ProviderFactories,
		CheckDestroy:             davinciApplicationFlowPolicy_CheckDestroy,
		ErrorCheck:               acctest.ErrorCheck(t),
		Steps: []resource.TestStep{
			// Configure
			{
				Config: davinciApplicationFlowPolicy_MinimalHCL(resourceName, false),
			},
			// Errors
			{
				ResourceName: resourceFullName,
				ImportState:  true,
				ExpectError:  regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "/",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
			{
				ResourceName:  resourceFullName,
				ImportStateId: "badformat/badformat/badformat",
				ImportState:   true,
				ExpectError:   regexp.MustCompile(`Unexpected Import Identifier`),
			},
		},
	})
}

// Minimal HCL with only required values set
func davinciApplicationFlowPolicy_MinimalHCL(resourceName string, withBootstrapConfig bool) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  name           = "%[2]s"
}

resource "pingone_davinci_application_flow_policy" "%[2]s" {
  environment_id          = data.pingone_environment.general_test.id
  da_vinci_application_id = pingone_davinci_application.%[2]s.id
  flow_distributions = [
    {
      #TODO use flow resource to create this, rather than using a hardcoded id
      id      = "ea3bf86e79daf74f0262a317190e02dd"
      version = 0
    }
  ]
}
`, acctest.DaVinciSandboxEnvironment(withBootstrapConfig), resourceName)
}

// Maximal HCL with all values set where possible
func davinciApplicationFlowPolicy_CompleteHCL(resourceName string, withBootstrapConfig bool) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
  name           = "%[2]s"
}

resource "pingone_davinci_application_flow_policy" "%[2]s" {
  environment_id          = data.pingone_environment.general_test.id
  da_vinci_application_id = pingone_davinci_application.%[2]s.id
  flow_distributions = [
    {
      id = "ea3bf86e79daf74f0262a317190e02dd"
      ip = [
        "0.0.0.0/0",
        "1.1.1.1/1",
      ]
      success_nodes = [
        {
          id = "1234"
        }
      ]
      version = 1
      weight  = 100
    }
    #TODO add a second flow
  ]
  name   = "Updated policy"
  status = "disabled"
  #TODO test trigger with a pingone flow
  //   trigger = {
  //     configuration = {
  //       mfa = {
  //         enabled = //TODO
  //         time = //TODO
  //         time_format = //TODO
  //       }
  //       pwd = {
  //         enabled = //TODO
  //         time = //TODO
  //         time_format = //TODO
  //       }
  //     }
  //     type = //TODO
  //   }
}
`, acctest.DaVinciSandboxEnvironment(withBootstrapConfig), resourceName)
}

// Maximal HCL with all values set, with ordering changes in lists and sets from the default CompleteHCL
// TODO update when the pingone_davinci_flow resource is available, reorder the updated CompleteHCL to form this
func davinciApplicationFlowPolicy_CompleteReorderedHCL(resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application_flow_policy" "%[2]s" {
  environment_id = data.pingone_environment.general_test.id
//   da_vinci_application_id = //TODO
//   id = //TODO
//   // TODO set values for complete fields, with ordering changes
//   flow_distributions = [
//     {
//       id = //TODO
//       ip = //TODO
//       success_nodes = [
//         {
//           id = //TODO
//         }
//       ]
//       version = //TODO
//       weight = //TODO
//     }
//   ]
//   name = //TODO
//   status = //TODO
//   trigger = {
//     configuration = {
//       mfa = {
//         enabled = //TODO
//         time = //TODO
//         time_format = //TODO
//       }
//       pwd = {
//         enabled = //TODO
//         time = //TODO
//         time_format = //TODO
//       }
//     }
//     type = //TODO
//   }
}
`, acctest.GenericSandboxEnvironment(), resourceName)
}

func davinciApplicationFlowPolicy_NewEnvHCL(environmentName, licenseID, resourceName string) string {
	return fmt.Sprintf(`
		%[1]s

resource "pingone_davinci_application" "%[3]s" {
  environment_id = pingone_environment.%[2]s.id
  name           = "%[3]s"
}

resource "pingone_davinci_application_flow_policy" "%[3]s" {
  environment_id          = pingone_environment.%[2]s.id
  da_vinci_application_id = pingone_davinci_application.%[3]s.id
  flow_distributions = [
    {
      #TODO use flow resource to create this, rather than using a hardcoded id
      id      = "ea3bf86e79daf74f0262a317190e02dd"
      version = 0
    }
  ]
}
`, acctestlegacysdk.MinimalSandboxEnvironment(environmentName, licenseID), environmentName, resourceName)
}

// Validate any computed values when applying minimal HCL
func davinciApplicationFlowPolicy_CheckComputedValuesMinimal(resourceName string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "name", "New Policy"),
		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "status", "enabled"),
		resource.TestCheckNoResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger"),
		resource.TestCheckNoResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "flow_distributions.0.ip"),
		resource.TestCheckNoResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "flow_distributions.0.success_nodes"),
		resource.TestCheckNoResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "flow_distributions.0.weight"),
	)
}

// Validate any computed values when applying complete HCL
// TODO This may not be needed as a separate function from minimal HCL if the expected values match
// TODO remove any values that are not computed from this check
// TODO set expected values
// func davinciApplicationFlowPolicy_CheckComputedValuesComplete(resourceName string) resource.TestCheckFunc {
// 	return resource.ComposeTestCheckFunc(
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "name", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "status", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger.configuration.mfa.enabled", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger.configuration.mfa.time", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger.configuration.mfa.time_format", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger.configuration.pwd.enabled", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger.configuration.pwd.time", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger.configuration.pwd.time_format", "expected_value"),
// 		resource.TestCheckResourceAttr(fmt.Sprintf("pingone_davinci_application_flow_policy.%s", resourceName), "trigger.type", "expected_value"),
// 	)
// }

func davinciApplicationFlowPolicy_GetIDs(resourceName string, environmentId, daVinciApplicationId, id *string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Resource Not found: %s", resourceName)
		}
		if environmentId != nil {
			*environmentId = rs.Primary.Attributes["environment_id"]
		}
		if daVinciApplicationId != nil {
			*daVinciApplicationId = rs.Primary.Attributes["da_vinci_application_id"]
		}
		if id != nil {
			*id = rs.Primary.Attributes["id"]
		}

		return nil
	}
}

// Delete the resource
func davinciApplicationFlowPolicy_Delete(ctx context.Context, apiClient *pingone.APIClient, t *testing.T, environmentId, daVinciApplicationId, id string) {
	if environmentId == "" || daVinciApplicationId == "" || id == "" {
		t.Fatalf("One of the identifier attributes can't be determined. environmentId: '%s' daVinciApplicationId: '%s' id: '%s'", environmentId, daVinciApplicationId, id)
	}

	_, err := apiClient.DaVinciApplicationApi.DeleteFlowPolicyByIdUsingDavinciApplicationId(ctx, uuid.MustParse(environmentId), daVinciApplicationId, id).Execute()
	if err != nil {
		t.Fatalf("Failed to delete davinci_application_flow_policy: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func davinciApplicationFlowPolicy_CheckDestroy(s *terraform.State) error {
	var ctx = context.Background()

	p1Client, err := acctest.TestClient(ctx)

	if err != nil {
		return err
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "pingone_davinci_application_flow_policy" {
			continue
		}
		shouldContinue, err := acctest.CheckParentEnvironmentDestroy(ctx, p1Client, rs.Primary.Attributes["environment_id"])
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		_, r, err := p1Client.DaVinciApplicationApi.GetFlowPolicyByIdUsingDavinciApplicationId(ctx, uuid.MustParse(rs.Primary.Attributes["environment_id"]), rs.Primary.Attributes["da_vinci_application_id"], rs.Primary.Attributes["id"]).Execute()

		shouldContinue, err = acctest.CheckForResourceDestroy(r, err)
		if err != nil {
			return err
		}

		if shouldContinue {
			continue
		}

		return fmt.Errorf("PingOne davinci_application_flow_policy Instance %s still exists", rs.Primary.ID)
	}

	return nil
}
