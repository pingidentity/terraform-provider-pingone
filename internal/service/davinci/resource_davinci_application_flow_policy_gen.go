// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"fmt"
	"net/http"
	"regexp"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

var (
	_ resource.Resource                = &davinciApplicationFlowPolicyResource{}
	_ resource.ResourceWithConfigure   = &davinciApplicationFlowPolicyResource{}
	_ resource.ResourceWithImportState = &davinciApplicationFlowPolicyResource{}
)

func NewDavinciApplicationFlowPolicyResource() resource.Resource {
	return &davinciApplicationFlowPolicyResource{}
}

type davinciApplicationFlowPolicyResource serviceClientType

func (r *davinciApplicationFlowPolicyResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_application_flow_policy"
}

func (r *davinciApplicationFlowPolicyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciApplicationFlowPolicyResourceModel struct {
	DaVinciApplicationId types.String `tfsdk:"da_vinci_application_id"`
	EnvironmentId        types.String `tfsdk:"environment_id"`
	FlowDistributions    types.Set    `tfsdk:"flow_distributions"`
	Id                   types.String `tfsdk:"id"`
	Name                 types.String `tfsdk:"name"`
	Status               types.String `tfsdk:"status"`
	Trigger              types.Object `tfsdk:"trigger"`
}

func (r *davinciApplicationFlowPolicyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	triggerConfigurationMfaAttrTypes := map[string]attr.Type{
		"enabled":     types.BoolType,
		"time":        types.Float32Type,
		"time_format": types.StringType,
	}
	triggerConfigurationPwdAttrTypes := map[string]attr.Type{
		"enabled":     types.BoolType,
		"time":        types.Float32Type,
		"time_format": types.StringType,
	}
	triggerConfigurationAttrTypes := map[string]attr.Type{
		"mfa": types.ObjectType{AttrTypes: triggerConfigurationMfaAttrTypes},
		"pwd": types.ObjectType{AttrTypes: triggerConfigurationPwdAttrTypes},
	}
	triggerAttrTypes := map[string]attr.Type{
		"configuration": types.ObjectType{AttrTypes: triggerConfigurationAttrTypes},
		"type":          types.StringType,
	}
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a DaVinci application flow policy.",
		Attributes: map[string]schema.Attribute{
			"da_vinci_application_id": schema.StringAttribute{
				Required:    true,
				Description: "This field is immutable and will trigger a replace plan if changed.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment to create and manage the davinci_application_flow_policy in. Must be a valid PingOne resource ID. This field is immutable and will trigger a replace plan if changed.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"flow_distributions": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Required: true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9-_]+$"), ""),
							},
						},
						"ip": schema.SetAttribute{
							ElementType: types.StringType,
							Optional:    true,
						},
						"success_nodes": schema.SetNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9]+$"), ""),
										},
									},
								},
							},
							Optional: true,
							Validators: []validator.Set{
								setvalidator.SizeAtLeast(1),
							},
						},
						"version": schema.Float32Attribute{
							Required: true,
						},
						"weight": schema.Float32Attribute{
							Optional: true,
						},
					},
				},
				Required: true,
				Validators: []validator.Set{
					setvalidator.SizeBetween(1, 100),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Default:  stringdefault.StaticString("New Policy"),
				Validators: []validator.String{
					stringvalidator.LengthAtMost(256),
				},
			},
			"status": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("enabled"),
				Description:         "Options are \"disabled\", \"enabled\".",
				MarkdownDescription: "Options are `disabled`, `enabled`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"disabled",
						"enabled",
					),
				},
			},
			"trigger": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"configuration": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"mfa": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"enabled": schema.BoolAttribute{
										Optional: true,
									},
									"time": schema.Float32Attribute{
										Optional: true,
									},
									"time_format": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(0, 50),
										},
									},
								},
								Optional: true,
							},
							"pwd": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"enabled": schema.BoolAttribute{
										Optional: true,
									},
									"time": schema.Float32Attribute{
										Optional: true,
									},
									"time_format": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(0, 50),
										},
									},
								},
								Optional: true,
							},
						},
						Optional: true,
					},
					"type": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("AUTHENTICATION"),
						Validators: []validator.String{
							stringvalidator.LengthBetween(0, 50),
						},
					},
				},
				Optional: true,
				Computed: true,
				Default: objectdefault.StaticValue(types.ObjectValueMust(triggerAttrTypes, map[string]attr.Value{
					"configuration": types.ObjectValueMust(triggerConfigurationAttrTypes, map[string]attr.Value{
						"mfa": types.ObjectValueMust(triggerConfigurationMfaAttrTypes, map[string]attr.Value{
							"enabled":     types.BoolValue(false),
							"time":        types.Float32Value(0),
							"time_format": types.StringValue("min"),
						}),
						"pwd": types.ObjectValueMust(triggerConfigurationPwdAttrTypes, map[string]attr.Value{
							"enabled":     types.BoolValue(false),
							"time":        types.Float32Value(0),
							"time_format": types.StringValue("min"),
						}),
					}),
					"type": types.StringValue("AUTHENTICATION"),
				})),
			},
		},
	}
}

func (model *davinciApplicationFlowPolicyResourceModel) buildClientStructPost() (*pingone.DaVinciFlowPolicyCreateRequest, diag.Diagnostics) {
	result := &pingone.DaVinciFlowPolicyCreateRequest{}
	var respDiags diag.Diagnostics
	// flow_distributions
	result.FlowDistributions = []pingone.DaVinciFlowPolicyCreateRequestFlowDistribution{}
	for _, flowDistributionsElement := range model.FlowDistributions.Elements() {
		flowDistributionsValue := pingone.DaVinciFlowPolicyCreateRequestFlowDistribution{}
		flowDistributionsAttrs := flowDistributionsElement.(types.Object).Attributes()
		flowDistributionsValue.Id = flowDistributionsAttrs["id"].(types.String).ValueString()
		if !flowDistributionsAttrs["ip"].IsNull() && !flowDistributionsAttrs["ip"].IsUnknown() {
			flowDistributionsValue.Ip = []string{}
			for _, ipElement := range flowDistributionsAttrs["ip"].(types.Set).Elements() {
				flowDistributionsValue.Ip = append(flowDistributionsValue.Ip, ipElement.(types.String).ValueString())
			}
		}
		if !flowDistributionsAttrs["success_nodes"].IsNull() && !flowDistributionsAttrs["success_nodes"].IsUnknown() {
			flowDistributionsValue.SuccessNodes = []pingone.DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode{}
			for _, successNodesElement := range flowDistributionsAttrs["success_nodes"].(types.Set).Elements() {
				successNodesValue := pingone.DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode{}
				successNodesAttrs := successNodesElement.(types.Object).Attributes()
				successNodesValue.Id = successNodesAttrs["id"].(types.String).ValueString()
				flowDistributionsValue.SuccessNodes = append(flowDistributionsValue.SuccessNodes, successNodesValue)
			}
		}
		flowDistributionsValue.Version = flowDistributionsAttrs["version"].(types.Float32).ValueFloat32()
		flowDistributionsValue.Weight = flowDistributionsAttrs["weight"].(types.Float32).ValueFloat32Pointer()
		result.FlowDistributions = append(result.FlowDistributions, flowDistributionsValue)
	}

	// name
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		result.Name = model.Name.ValueStringPointer()
	}
	// status
	if !model.Status.IsNull() && !model.Status.IsUnknown() {
		statusValue, err := pingone.NewDaVinciFlowPolicyCreateRequestStatusFromValue(model.Status.ValueString())
		if err != nil {
			respDiags.AddAttributeError(
				path.Root("status"),
				"Provided value is not valid",
				fmt.Sprintf("The value provided for status is not valid: %s", err.Error()),
			)
		} else {
			result.Status = statusValue
		}
	}

	// trigger
	if !model.Trigger.IsNull() && !model.Trigger.IsUnknown() {
		triggerValue := &pingone.DaVinciFlowPolicyCreateRequestTrigger{}
		triggerAttrs := model.Trigger.Attributes()
		if !triggerAttrs["configuration"].IsNull() && !triggerAttrs["configuration"].IsUnknown() {
			triggerConfigurationValue := &pingone.DaVinciFlowPolicyCreateRequestTriggerConfiguration{}
			triggerConfigurationAttrs := triggerAttrs["configuration"].(types.Object).Attributes()
			if !triggerConfigurationAttrs["mfa"].IsNull() && !triggerConfigurationAttrs["mfa"].IsUnknown() {
				triggerConfigurationMfaValue := &pingone.DaVinciFlowPolicyCreateRequestTriggerConfigurationMFA{}
				triggerConfigurationMfaAttrs := triggerConfigurationAttrs["mfa"].(types.Object).Attributes()
				triggerConfigurationMfaValue.Enabled = triggerConfigurationMfaAttrs["enabled"].(types.Bool).ValueBoolPointer()
				triggerConfigurationMfaValue.Time = triggerConfigurationMfaAttrs["time"].(types.Float32).ValueFloat32Pointer()
				triggerConfigurationMfaValue.TimeFormat = triggerConfigurationMfaAttrs["time_format"].(types.String).ValueStringPointer()
				triggerConfigurationValue.Mfa = triggerConfigurationMfaValue
			}
			if !triggerConfigurationAttrs["pwd"].IsNull() && !triggerConfigurationAttrs["pwd"].IsUnknown() {
				triggerConfigurationPwdValue := &pingone.DaVinciFlowPolicyCreateRequestTriggerConfigurationPassword{}
				triggerConfigurationPwdAttrs := triggerConfigurationAttrs["pwd"].(types.Object).Attributes()
				triggerConfigurationPwdValue.Enabled = triggerConfigurationPwdAttrs["enabled"].(types.Bool).ValueBoolPointer()
				triggerConfigurationPwdValue.Time = triggerConfigurationPwdAttrs["time"].(types.Float32).ValueFloat32Pointer()
				triggerConfigurationPwdValue.TimeFormat = triggerConfigurationPwdAttrs["time_format"].(types.String).ValueStringPointer()
				triggerConfigurationValue.Pwd = triggerConfigurationPwdValue
			}
			triggerValue.Configuration = triggerConfigurationValue
		}
		var triggerTypeValue *pingone.DaVinciFlowPolicyCreateRequestTriggerType
		if !triggerAttrs["type"].IsNull() && !triggerAttrs["type"].IsUnknown() {
			typeValue, err := pingone.NewDaVinciFlowPolicyCreateRequestTriggerTypeFromValue(triggerAttrs["type"].(types.String).ValueString())
			if err != nil {
				respDiags.AddAttributeError(
					path.Root("type"),
					"Provided value is not valid",
					fmt.Sprintf("The value provided for type is not valid: %s", err.Error()),
				)
			} else {
				triggerTypeValue = typeValue
			}
		}
		triggerValue.Type = triggerTypeValue
		result.Trigger = triggerValue
	}

	return result, respDiags
}

func (model *davinciApplicationFlowPolicyResourceModel) buildClientStructPut() (*pingone.DaVinciFlowPolicyReplaceRequest, diag.Diagnostics) {
	result := &pingone.DaVinciFlowPolicyReplaceRequest{}
	var respDiags diag.Diagnostics
	// flow_distributions
	result.FlowDistributions = []pingone.DaVinciFlowPolicyReplaceRequestFlowDistribution{}
	for _, flowDistributionsElement := range model.FlowDistributions.Elements() {
		flowDistributionsValue := pingone.DaVinciFlowPolicyReplaceRequestFlowDistribution{}
		flowDistributionsAttrs := flowDistributionsElement.(types.Object).Attributes()
		flowDistributionsValue.Id = flowDistributionsAttrs["id"].(types.String).ValueString()
		if !flowDistributionsAttrs["ip"].IsNull() && !flowDistributionsAttrs["ip"].IsUnknown() {
			flowDistributionsValue.Ip = []string{}
			for _, ipElement := range flowDistributionsAttrs["ip"].(types.Set).Elements() {
				flowDistributionsValue.Ip = append(flowDistributionsValue.Ip, ipElement.(types.String).ValueString())
			}
		}
		if !flowDistributionsAttrs["success_nodes"].IsNull() && !flowDistributionsAttrs["success_nodes"].IsUnknown() {
			flowDistributionsValue.SuccessNodes = []pingone.DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode{}
			for _, successNodesElement := range flowDistributionsAttrs["success_nodes"].(types.Set).Elements() {
				successNodesValue := pingone.DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode{}
				successNodesAttrs := successNodesElement.(types.Object).Attributes()
				successNodesValue.Id = successNodesAttrs["id"].(types.String).ValueString()
				flowDistributionsValue.SuccessNodes = append(flowDistributionsValue.SuccessNodes, successNodesValue)
			}
		}
		flowDistributionsValue.Version = flowDistributionsAttrs["version"].(types.Float32).ValueFloat32()
		flowDistributionsValue.Weight = flowDistributionsAttrs["weight"].(types.Float32).ValueFloat32Pointer()
		result.FlowDistributions = append(result.FlowDistributions, flowDistributionsValue)
	}

	// name
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		result.Name = model.Name.ValueString()
	}
	// status
	if !model.Status.IsNull() && !model.Status.IsUnknown() {
		statusValue, err := pingone.NewDaVinciFlowPolicyReplaceRequestStatusFromValue(model.Status.ValueString())
		if err != nil {
			respDiags.AddAttributeError(
				path.Root("status"),
				"Provided value is not valid",
				fmt.Sprintf("The value provided for status is not valid: %s", err.Error()),
			)
		} else {
			result.Status = statusValue
		}
	}

	// trigger
	if !model.Trigger.IsNull() && !model.Trigger.IsUnknown() {
		triggerValue := &pingone.DaVinciFlowPolicyReplaceRequestTrigger{}
		triggerAttrs := model.Trigger.Attributes()
		if !triggerAttrs["configuration"].IsNull() && !triggerAttrs["configuration"].IsUnknown() {
			triggerConfigurationValue := &pingone.DaVinciFlowPolicyReplaceRequestTriggerConfiguration{}
			triggerConfigurationAttrs := triggerAttrs["configuration"].(types.Object).Attributes()
			if !triggerConfigurationAttrs["mfa"].IsNull() && !triggerConfigurationAttrs["mfa"].IsUnknown() {
				triggerConfigurationMfaValue := &pingone.DaVinciFlowPolicyReplaceRequestTriggerConfigurationMFA{}
				triggerConfigurationMfaAttrs := triggerConfigurationAttrs["mfa"].(types.Object).Attributes()
				triggerConfigurationMfaValue.Enabled = triggerConfigurationMfaAttrs["enabled"].(types.Bool).ValueBoolPointer()
				triggerConfigurationMfaValue.Time = triggerConfigurationMfaAttrs["time"].(types.Float32).ValueFloat32Pointer()
				triggerConfigurationMfaValue.TimeFormat = triggerConfigurationMfaAttrs["time_format"].(types.String).ValueStringPointer()
				triggerConfigurationValue.Mfa = triggerConfigurationMfaValue
			}
			if !triggerConfigurationAttrs["pwd"].IsNull() && !triggerConfigurationAttrs["pwd"].IsUnknown() {
				triggerConfigurationPwdValue := &pingone.DaVinciFlowPolicyReplaceRequestTriggerConfigurationPassword{}
				triggerConfigurationPwdAttrs := triggerConfigurationAttrs["pwd"].(types.Object).Attributes()
				triggerConfigurationPwdValue.Enabled = triggerConfigurationPwdAttrs["enabled"].(types.Bool).ValueBoolPointer()
				triggerConfigurationPwdValue.Time = triggerConfigurationPwdAttrs["time"].(types.Float32).ValueFloat32Pointer()
				triggerConfigurationPwdValue.TimeFormat = triggerConfigurationPwdAttrs["time_format"].(types.String).ValueStringPointer()
				triggerConfigurationValue.Pwd = triggerConfigurationPwdValue
			}
			triggerValue.Configuration = triggerConfigurationValue
		}
		var triggerTypeValue *pingone.DaVinciFlowPolicyReplaceRequestTriggerType
		if !triggerAttrs["type"].IsNull() && !triggerAttrs["type"].IsUnknown() {
			typeValue, err := pingone.NewDaVinciFlowPolicyReplaceRequestTriggerTypeFromValue(triggerAttrs["type"].(types.String).ValueString())
			if err != nil {
				respDiags.AddAttributeError(
					path.Root("type"),
					"Provided value is not valid",
					fmt.Sprintf("The value provided for type is not valid: %s", err.Error()),
				)
			} else {
				triggerTypeValue = typeValue
			}
		}
		triggerValue.Type = triggerTypeValue
		result.Trigger = triggerValue
	}

	return result, respDiags
}

func (state *davinciApplicationFlowPolicyResourceModel) readClientResponse(response *pingone.DaVinciFlowPolicyResponse) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// flow_distributions
	flowDistributionsSuccessNodesAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	flowDistributionsSuccessNodesElementType := types.ObjectType{AttrTypes: flowDistributionsSuccessNodesAttrTypes}
	flowDistributionsAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"ip":            types.SetType{ElemType: types.StringType},
		"success_nodes": types.SetType{ElemType: flowDistributionsSuccessNodesElementType},
		"version":       types.Float32Type,
		"weight":        types.Float32Type,
	}
	flowDistributionsElementType := types.ObjectType{AttrTypes: flowDistributionsAttrTypes}
	var flowDistributionsValues []attr.Value
	for _, flowDistributionsResponseValue := range response.FlowDistributions {
		var flowDistributionsIpValue types.Set
		if flowDistributionsResponseValue.Ip == nil {
			flowDistributionsIpValue = types.SetNull(types.StringType)
		} else {
			flowDistributionsIpValue, diags = types.SetValueFrom(context.Background(), types.StringType, flowDistributionsResponseValue.Ip)
			respDiags.Append(diags...)
		}
		var flowDistributionsSuccessNodesValue types.Set
		if flowDistributionsResponseValue.SuccessNodes == nil {
			flowDistributionsSuccessNodesValue = types.SetNull(flowDistributionsSuccessNodesElementType)
		} else {
			var flowDistributionsSuccessNodesValues []attr.Value
			for _, flowDistributionsSuccessNodesResponseValue := range flowDistributionsResponseValue.SuccessNodes {
				flowDistributionsSuccessNodesValue, diags := types.ObjectValue(flowDistributionsSuccessNodesAttrTypes, map[string]attr.Value{
					"id": types.StringValue(flowDistributionsSuccessNodesResponseValue.Id),
				})
				respDiags.Append(diags...)
				flowDistributionsSuccessNodesValues = append(flowDistributionsSuccessNodesValues, flowDistributionsSuccessNodesValue)
			}
			flowDistributionsSuccessNodesValue, diags = types.SetValue(flowDistributionsSuccessNodesElementType, flowDistributionsSuccessNodesValues)
			respDiags.Append(diags...)
		}
		flowDistributionsValue, diags := types.ObjectValue(flowDistributionsAttrTypes, map[string]attr.Value{
			"id":            types.StringValue(flowDistributionsResponseValue.Id),
			"ip":            flowDistributionsIpValue,
			"success_nodes": flowDistributionsSuccessNodesValue,
			"version":       types.Float32Value(flowDistributionsResponseValue.Version),
			"weight":        types.Float32PointerValue(flowDistributionsResponseValue.Weight),
		})
		respDiags.Append(diags...)
		flowDistributionsValues = append(flowDistributionsValues, flowDistributionsValue)
	}
	flowDistributionsValue, diags := types.SetValue(flowDistributionsElementType, flowDistributionsValues)
	respDiags.Append(diags...)
	state.FlowDistributions = flowDistributionsValue
	// id
	state.Id = types.StringValue(response.Id)
	// name
	state.Name = types.StringValue(response.Name)
	// status
	statusValue := types.StringValue(string(response.Status))
	state.Status = statusValue
	// trigger
	triggerConfigurationMfaAttrTypes := map[string]attr.Type{
		"enabled":     types.BoolType,
		"time":        types.Float32Type,
		"time_format": types.StringType,
	}
	triggerConfigurationPwdAttrTypes := map[string]attr.Type{
		"enabled":     types.BoolType,
		"time":        types.Float32Type,
		"time_format": types.StringType,
	}
	triggerConfigurationAttrTypes := map[string]attr.Type{
		"mfa": types.ObjectType{AttrTypes: triggerConfigurationMfaAttrTypes},
		"pwd": types.ObjectType{AttrTypes: triggerConfigurationPwdAttrTypes},
	}
	triggerAttrTypes := map[string]attr.Type{
		"configuration": types.ObjectType{AttrTypes: triggerConfigurationAttrTypes},
		"type":          types.StringType,
	}
	var triggerValue types.Object
	if response.Trigger == nil {
		triggerValue = types.ObjectNull(triggerAttrTypes)
	} else {
		var triggerConfigurationValue types.Object
		if response.Trigger.Configuration == nil {
			triggerConfigurationValue = types.ObjectNull(triggerConfigurationAttrTypes)
		} else {
			triggerConfigurationMfaValue, diags := types.ObjectValue(triggerConfigurationMfaAttrTypes, map[string]attr.Value{
				"enabled":     types.BoolValue(response.Trigger.Configuration.Mfa.Enabled),
				"time":        types.Float32Value(response.Trigger.Configuration.Mfa.Time),
				"time_format": types.StringValue(response.Trigger.Configuration.Mfa.TimeFormat),
			})
			respDiags.Append(diags...)
			triggerConfigurationPwdValue, diags := types.ObjectValue(triggerConfigurationPwdAttrTypes, map[string]attr.Value{
				"enabled":     types.BoolValue(response.Trigger.Configuration.Pwd.Enabled),
				"time":        types.Float32Value(response.Trigger.Configuration.Pwd.Time),
				"time_format": types.StringValue(response.Trigger.Configuration.Pwd.TimeFormat),
			})
			respDiags.Append(diags...)
			triggerConfigurationValue, diags = types.ObjectValue(triggerConfigurationAttrTypes, map[string]attr.Value{
				"mfa": triggerConfigurationMfaValue,
				"pwd": triggerConfigurationPwdValue,
			})
			respDiags.Append(diags...)
		}
		triggerValue, diags = types.ObjectValue(triggerAttrTypes, map[string]attr.Value{
			"configuration": triggerConfigurationValue,
			"type":          types.StringPointerValue(response.Trigger.Type),
		})
		respDiags.Append(diags...)
	}
	state.Trigger = triggerValue
	return respDiags
}

func (r *davinciApplicationFlowPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data davinciApplicationFlowPolicyResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStructPost()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciFlowPolicyResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciApplicationsApi.CreateFlowPolicyByDavinciApplicationId(ctx, environmentIdUuid, data.DaVinciApplicationId.ValueString()).DaVinciFlowPolicyCreateRequest(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"CreateFlowPolicyByDavinciApplicationId",
		framework.DefaultCustomError,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciApplicationFlowPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data davinciApplicationFlowPolicyResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciFlowPolicyResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciApplicationsApi.GetFlowPolicyByIdUsingDavinciApplicationId(ctx, environmentIdUuid, data.DaVinciApplicationId.ValueString(), data.Id.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetFlowPolicyByIdUsingDavinciApplicationId",
		framework.CustomErrorResourceNotFoundWarning,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Remove from state if resource is not found
	if responseData == nil {
		resp.State.RemoveResource(ctx)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciApplicationFlowPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data davinciApplicationFlowPolicyResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStructPut()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciFlowPolicyResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciApplicationsApi.ReplaceFlowPolicyByIdUsingDavinciApplicationId(ctx, environmentIdUuid, data.DaVinciApplicationId.ValueString(), data.Id.ValueString()).DaVinciFlowPolicyReplaceRequest(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"ReplaceFlowPolicyByIdUsingDavinciApplicationId",
		framework.DefaultCustomError,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *davinciApplicationFlowPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data davinciApplicationFlowPolicyResourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fR, fErr := r.Client.DaVinciApplicationsApi.DeleteFlowPolicyByIdUsingDavinciApplicationId(ctx, environmentIdUuid, data.DaVinciApplicationId.ValueString(), data.Id.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), nil, fR, fErr)
		},
		"DeleteFlowPolicyByIdUsingDavinciApplicationId",
		framework.CustomErrorResourceNotFoundWarning,
		framework.DefaultRetryable,
		nil,
	)...)
}

func (r *davinciApplicationFlowPolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	idComponents := []framework.ImportComponent{
		{
			Label:  "environment_id",
			Regexp: verify.P1ResourceIDRegexp,
		},
		{
			Label:  "da_vinci_application_id",
			Regexp: verify.P1DVResourceIDRegexp,
		},
		{
			Label:     "policy_id",
			Regexp:    verify.P1DVResourceIDRegexp,
			PrimaryID: true,
		},
	}

	attributes, err := framework.ParseImportID(req.ID, idComponents...)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			err.Error(),
		)
		return
	}

	for _, idComponent := range idComponents {
		pathKey := idComponent.Label

		if idComponent.PrimaryID {
			pathKey = "id"
		}

		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root(pathKey), attributes[idComponent.Label])...)
	}
}
