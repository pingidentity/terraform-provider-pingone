// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package davinci

import (
	"context"
	"fmt"
	"net/http"
	"regexp"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
)

var (
	_ datasource.DataSource              = &davinciConnectorDataSource{}
	_ datasource.DataSourceWithConfigure = &davinciConnectorDataSource{}
)

func NewDavinciConnectorDataSource() datasource.DataSource {
	return &davinciConnectorDataSource{}
}

type davinciConnectorDataSource serviceClientType

func (r *davinciConnectorDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_davinci_connector"
}

func (r *davinciConnectorDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type davinciConnectorDataSourceModel struct {
	ConnectorId   types.String `tfsdk:"connector_id"`
	Description   types.String `tfsdk:"description"`
	EnvironmentId types.String `tfsdk:"environment_id"`
	Id            types.String `tfsdk:"id"`
	Metadata      types.Object `tfsdk:"metadata"`
	Name          types.String `tfsdk:"name"`
	Version       types.String `tfsdk:"version"`
}

func (r *davinciConnectorDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source to retrieve a DaVinci connector.",
		Attributes: map[string]schema.Attribute{
			"connector_id": schema.StringAttribute{
				Required:    true,
				Description: "A string that specifies the ID of the connector to retrieve configuration for.",
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the environment that is configured with the connector. Must be a valid PingOne resource ID.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), "Must be a valid UUID"),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of this data source.",
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"colors": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"canvas": schema.StringAttribute{
								Computed: true,
							},
							"canvas_text": schema.StringAttribute{
								Computed: true,
							},
							"dark": schema.StringAttribute{
								Computed: true,
							},
						},
						Computed: true,
					},
					"logos": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"canvas": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"image_file_name": schema.StringAttribute{
										Computed: true,
									},
								},
								Computed: true,
							},
						},
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed:            true,
						Description:         "Options are \"core\", \"ping\", \"service\".",
						MarkdownDescription: "Options are `core`, `ping`, `service`.",
					},
					"vendor": schema.StringAttribute{
						Computed: true,
					},
				},
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"version": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (state *davinciConnectorDataSourceModel) readClientResponse(response *pingone.DaVinciConnectorMinimalResponse) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// description
	state.Description = types.StringValue(response.Description)
	// id
	state.Id = types.StringValue(response.Id)
	// metadata
	metadataColorsAttrTypes := map[string]attr.Type{
		"canvas":      types.StringType,
		"canvas_text": types.StringType,
		"dark":        types.StringType,
	}
	metadataLogosCanvasAttrTypes := map[string]attr.Type{
		"image_file_name": types.StringType,
	}
	metadataLogosAttrTypes := map[string]attr.Type{
		"canvas": types.ObjectType{AttrTypes: metadataLogosCanvasAttrTypes},
	}
	metadataAttrTypes := map[string]attr.Type{
		"colors": types.ObjectType{AttrTypes: metadataColorsAttrTypes},
		"logos":  types.ObjectType{AttrTypes: metadataLogosAttrTypes},
		"type":   types.StringType,
		"vendor": types.StringType,
	}
	var metadataColorsValue types.Object
	if response.Metadata.Colors == nil {
		metadataColorsValue = types.ObjectNull(metadataColorsAttrTypes)
	} else {
		metadataColorsValue, diags = types.ObjectValue(metadataColorsAttrTypes, map[string]attr.Value{
			"canvas":      types.StringPointerValue(response.Metadata.Colors.Canvas),
			"canvas_text": types.StringPointerValue(response.Metadata.Colors.CanvasText),
			"dark":        types.StringPointerValue(response.Metadata.Colors.Dark),
		})
		respDiags.Append(diags...)
	}
	var metadataLogosValue types.Object
	if response.Metadata.Logos == nil {
		metadataLogosValue = types.ObjectNull(metadataLogosAttrTypes)
	} else {
		var metadataLogosCanvasValue types.Object
		if response.Metadata.Logos.Canvas == nil {
			metadataLogosCanvasValue = types.ObjectNull(metadataLogosCanvasAttrTypes)
		} else {
			metadataLogosCanvasValue, diags = types.ObjectValue(metadataLogosCanvasAttrTypes, map[string]attr.Value{
				"image_file_name": types.StringPointerValue(response.Metadata.Logos.Canvas.ImageFileName),
			})
			respDiags.Append(diags...)
		}
		metadataLogosValue, diags = types.ObjectValue(metadataLogosAttrTypes, map[string]attr.Value{
			"canvas": metadataLogosCanvasValue,
		})
		respDiags.Append(diags...)
	}
	var metadataTypePtrValue *string
	if response.Metadata.Type != nil {
		metadataTypeStringValue := string(*response.Metadata.Type)
		metadataTypePtrValue = &metadataTypeStringValue
	}
	metadataTypeValue := types.StringPointerValue(metadataTypePtrValue)
	metadataValue, diags := types.ObjectValue(metadataAttrTypes, map[string]attr.Value{
		"colors": metadataColorsValue,
		"logos":  metadataLogosValue,
		"type":   metadataTypeValue,
		"vendor": types.StringPointerValue(response.Metadata.Vendor),
	})
	respDiags.Append(diags...)
	state.Metadata = metadataValue
	// name
	state.Name = types.StringValue(response.Name)
	// version
	state.Version = types.StringValue(response.Version)
	return respDiags
}

func (r *davinciConnectorDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data davinciConnectorDataSourceModel

	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	environmentIdUuid, err := uuid.Parse(data.EnvironmentId.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("environment_id"),
			"Attribute Validation Error",
			fmt.Sprintf("The value '%s' for attribute '%s' is not a valid UUID: %s", data.EnvironmentId.ValueString(), "EnvironmentId", err.Error()),
		)
		return
	}
	var responseData *pingone.DaVinciConnectorMinimalResponse
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.DaVinciConnectorsApi.GetConnectorById(ctx, environmentIdUuid, data.ConnectorId.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"GetConnectorById",
		framework.DefaultCustomError,
		framework.DefaultRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
