// Copyright Â© 2025 Ping Identity Corporation

package authorize

import (
	"context"
	"fmt"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/patrickcping/pingone-go-sdk-v2/authorize"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/customtypes/pingonetypes"
	"github.com/pingidentity/terraform-provider-pingone/internal/sdk"
)

// Types
type TrustFrameworkAttributeDataSource serviceClientType

type trustFrameworkAttributeDataSourceModel struct {
	Id               pingonetypes.ResourceIDValue `tfsdk:"id"`
	EnvironmentId    pingonetypes.ResourceIDValue `tfsdk:"environment_id"`
	AttributeId      pingonetypes.ResourceIDValue `tfsdk:"attribute_id"`
	DefaultValue     types.String                 `tfsdk:"default_value"`
	Description      types.String                 `tfsdk:"description"`
	Type             types.String                 `tfsdk:"type"`
	FullName         types.String                 `tfsdk:"full_name"`
	ManagedEntity    types.Object                 `tfsdk:"managed_entity"`
	Name             types.String                 `tfsdk:"name"`
	Parent           types.Object                 `tfsdk:"parent"`
	Processor        types.Object                 `tfsdk:"processor"`
	RepetitionSource types.Object                 `tfsdk:"repetition_source"`
	Resolvers        types.List                   `tfsdk:"resolvers"`
	ValueSchema      types.String                 `tfsdk:"value_schema"`
	ValueType        types.Object                 `tfsdk:"value_type"`
	Version          types.String                 `tfsdk:"version"`
}

// Framework interfaces
var (
	_ datasource.DataSource = &TrustFrameworkAttributeDataSource{}
)

// New Object
func NewTrustFrameworkAttributeDataSource() datasource.DataSource {
	return &TrustFrameworkAttributeDataSource{}
}

// Metadata
func (r *TrustFrameworkAttributeDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_authorize_trust_framework_attribute"
}

func (r *TrustFrameworkAttributeDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	// schema descriptions and validation settings
	const attrMinLength = 1

	attributeIdDescription := framework.SchemaAttributeDescriptionFromMarkdown(
		"The identifier (UUID) of the Trust Framework Attribute.",
	).ExactlyOneOf([]string{"attribute_id", "full_name"}).AppendMarkdownString("Must be a valid PingOne resource ID.")

	fullNameDescription := framework.SchemaAttributeDescriptionFromMarkdown(
		"A string that specifies a unique name generated by the system for each attribute resource. It is the concatenation of names in the attribute resource hierarchy.",
	).ExactlyOneOf([]string{"attribute_id", "full_name"})

	typeDescription := framework.SchemaAttributeDescriptionFromMarkdown(
		"A string that describes the resource type.",
	).AllowedValuesEnum(authorize.AllowedEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOTypeEnumValues)

	managedEntityDescription := framework.SchemaAttributeDescriptionFromMarkdown(
		"An object that specifies configuration settings for a system-assigned set of restrictions and metadata related to the resource.",
	)

	valueSchemaDescription := framework.SchemaAttributeDescriptionFromMarkdown(
		fmt.Sprintf("A string that specifies the JSON schema defition, where the output type is `%s`.", authorize.ENUMAUTHORIZEEDITORDATAVALUETYPEDTO_JSON),
	)

	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		Description: "Data source to retrieve a PingOne Authorize Trust Framework Attribute in an environment by ID or by full name.",

		Attributes: map[string]schema.Attribute{
			"id": framework.Attr_ID(), // DONE

			"environment_id": framework.Attr_LinkID( // DONE
				framework.SchemaAttributeDescriptionFromMarkdown("PingOne environment identifier (UUID) in which the Trust Framework Attribute exists."),
			),

			"attribute_id": schema.StringAttribute{
				Description:         attributeIdDescription.Description,
				MarkdownDescription: attributeIdDescription.MarkdownDescription,
				Optional:            true,

				CustomType: pingonetypes.ResourceIDType{},

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(
						path.MatchRelative().AtParent().AtName("full_name"),
					),
				},
			},

			"default_value": schema.StringAttribute{ // DONE
				Description: framework.SchemaAttributeDescriptionFromMarkdown("A string that specifies the value to use if no resolvers are defined or if an error occurred with the resolvers or processors.").Description,
				Computed:    true,
			},

			"description": schema.StringAttribute{ // DONE
				Description: framework.SchemaAttributeDescriptionFromMarkdown("A string that specifies a description to apply to the authorization attribute resource.").Description,
				Computed:    true,
			},

			"full_name": schema.StringAttribute{ // DONE
				Description:         fullNameDescription.Description,
				MarkdownDescription: fullNameDescription.MarkdownDescription,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(
						path.MatchRelative().AtParent().AtName("attribute_id"),
					),
					stringvalidator.LengthAtLeast(attrMinLength),
				},
			},

			"type": schema.StringAttribute{ // DONE
				Description:         typeDescription.Description,
				MarkdownDescription: typeDescription.MarkdownDescription,
				Computed:            true,
			},

			"managed_entity": schema.SingleNestedAttribute{ // TODO: DOC ERROR - Object Not in docs
				Description:         managedEntityDescription.Description,
				MarkdownDescription: managedEntityDescription.MarkdownDescription,
				Computed:            true,

				Attributes: dataSourceManagedEntityObjectSchemaAttributes(),
			},

			"name": schema.StringAttribute{ // DONE
				Description: framework.SchemaAttributeDescriptionFromMarkdown("A string that specifies a user-friendly authorization attribute name.  The value must be unique.").Description,
				Computed:    true,
			},

			"parent": dataSourceParentObjectSchema("attribute"),

			"processor": schema.SingleNestedAttribute{
				Description: framework.SchemaAttributeDescriptionFromMarkdown("An object that specifies configuration settings for the authorization attribute resource's processor.").Description,
				Computed:    true,

				Attributes: dataSourceDataProcessorObjectSchemaAttributes(),
			},

			"repetition_source": dataSourceRepetitionSourceObjectSchema("attribute"),

			"resolvers": schema.ListNestedAttribute{
				Description: framework.SchemaAttributeDescriptionFromMarkdown("A list of objects that specifies configuration settings for the authorization attribute's resolvers.").Description,
				Computed:    true,

				NestedObject: schema.NestedAttributeObject{
					Attributes: dataSourceDataResolverObjectSchemaAttributes(),
				},
			},

			"value_schema": schema.StringAttribute{
				Description:         valueSchemaDescription.Description,
				MarkdownDescription: valueSchemaDescription.MarkdownDescription,
				Computed:            true,
			},

			"value_type": schema.SingleNestedAttribute{
				Description: framework.SchemaAttributeDescriptionFromMarkdown("An object that specifies configuration settings for the output value type of the authorization attribute.").Description,
				Computed:    true,

				Attributes: dataSourceValueTypeObjectSchemaAttributes(),
			},

			"version": schema.StringAttribute{
				Description: framework.SchemaAttributeDescriptionFromMarkdown("A string that describes a random ID generated by the system for concurrency control purposes.").Description,
				Computed:    true,
			},
		},
	}
}

func (r *TrustFrameworkAttributeDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client.API
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

func (r *TrustFrameworkAttributeDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *trustFrameworkAttributeDataSourceModel

	if r.Client == nil || r.Client.AuthorizeAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var trustFrameworkAttribute *authorize.AuthorizeEditorDataDefinitionsAttributeDefinitionDTO

	// TrustFrameworkAttribute API does not support SCIM filtering
	if !data.AttributeId.IsNull() {
		// Run the API call
		resp.Diagnostics.Append(framework.ParseResponse(
			ctx,

			func() (any, *http.Response, error) {
				fO, fR, fErr := r.Client.AuthorizeAPIClient.AuthorizeEditorAttributesApi.GetAttribute(ctx, data.EnvironmentId.ValueString(), data.AttributeId.ValueString()).Execute()
				return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
			},
			"GetAttribute",
			framework.DefaultCustomError,
			sdk.DefaultCreateReadRetryable,
			&trustFrameworkAttribute,
		)...)
		if resp.Diagnostics.HasError() {
			return
		}

	} else if !data.FullName.IsNull() {
		// Run the API call
		resp.Diagnostics.Append(framework.ParseResponse(
			ctx,

			func() (any, *http.Response, error) {
				pagedIterator := r.Client.AuthorizeAPIClient.AuthorizeEditorAttributesApi.ListAttributes(ctx, data.EnvironmentId.ValueString()).Execute()

				var initialHttpResponse *http.Response

				for pageCursor, err := range pagedIterator {
					if err != nil {
						return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
					}

					if initialHttpResponse == nil {
						initialHttpResponse = pageCursor.HTTPResponse
					}

					if trustFrameworkAttributes, ok := pageCursor.EntityArray.Embedded.GetAuthorizationAttributesOk(); ok {

						var trustFrameworkAttributeObj authorize.AuthorizeEditorDataDefinitionsAttributeDefinitionDTO
						for _, trustFrameworkAttributeObj = range trustFrameworkAttributes {
							if trustFrameworkAttributeObj.GetFullName() == data.FullName.ValueString() {
								return &trustFrameworkAttributeObj, pageCursor.HTTPResponse, nil
							}
						}
					}
				}

				return nil, initialHttpResponse, nil
			},
			"ListAttributes",
			framework.DefaultCustomError,
			sdk.DefaultCreateReadRetryable,
			&trustFrameworkAttribute,
		)...)
		if resp.Diagnostics.HasError() {
			return
		}

		if trustFrameworkAttribute == nil {
			resp.Diagnostics.AddError(
				"Cannot find the trust framework attribute from the full name",
				fmt.Sprintf("The trust framework attribute name %s for environment %s cannot be found", data.Name.String(), data.EnvironmentId.String()),
			)
			return
		}

	} else {
		resp.Diagnostics.AddError(
			"Missing parameter",
			"Cannot find the requested PingOne Trust Framework Attribute: attribute_id or full_name argument must be set.",
		)
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(data.toState(ctx, trustFrameworkAttribute)...)
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (p *trustFrameworkAttributeDataSourceModel) toState(ctx context.Context, apiObject *authorize.AuthorizeEditorDataDefinitionsAttributeDefinitionDTO) diag.Diagnostics {
	var diags, d diag.Diagnostics
	if apiObject == nil {
		diags.AddError(
			"Data object missing",
			"Cannot convert the data object to state as the data object is nil.  Please report this to the provider maintainers.",
		)

		return diags
	}

	p.Id = framework.PingOneResourceIDOkToTF(apiObject.GetIdOk())
	// p.EnvironmentId = framework.PingOneResourceIDToTF(*apiObject.GetEnvironment().Id)
	p.DefaultValue = framework.StringOkToTF(apiObject.GetDefaultValueOk())
	p.Description = framework.StringOkToTF(apiObject.GetDescriptionOk())
	p.Type = framework.EnumOkToTF(apiObject.GetTypeOk())
	p.FullName = framework.StringOkToTF(apiObject.GetFullNameOk())

	p.ManagedEntity, d = editorManagedEntityOkToTF(apiObject.GetManagedEntityOk())
	diags.Append(d...)

	p.Name = framework.StringOkToTF(apiObject.GetNameOk())

	p.Parent, d = editorParentOkToTF(apiObject.GetParentOk())
	diags.Append(d...)

	processor, ok := apiObject.GetProcessorOk()

	p.Processor, d = editorDataProcessorOkToTF(ctx, processor, ok)
	diags.Append(d...)

	p.RepetitionSource, d = editorRepetitionSourceOkToTF(apiObject.GetRepetitionSourceOk())
	diags.Append(d...)

	resolvers, ok := apiObject.GetResolversOk()
	p.Resolvers, d = editorResolversOkToListTF(ctx, resolvers, ok)
	diags.Append(d...)

	p.ValueSchema = framework.StringOkToTF(apiObject.GetValueSchemaOk())

	p.ValueType, d = editorValueTypeOkToTF(apiObject.GetValueTypeOk())
	diags.Append(d...)

	p.Version = framework.StringOkToTF(apiObject.GetVersionOk())

	return diags
}
