// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package sso

import (
	"context"
	"fmt"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/terraform-provider-pingone/internal/filter"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/customtypes/pingonetypes"
)

var (
	_ datasource.DataSource              = &populationsDataSource{}
	_ datasource.DataSourceWithConfigure = &populationsDataSource{}
)

func NewPopulationsDataSource() datasource.DataSource {
	return &populationsDataSource{}
}

type populationsDataSource serviceClientType

func (r *populationsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_populations"
}

func (r *populationsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client.API
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type populationsDataSourceModel struct {
	DataFilters   types.List                   `tfsdk:"data_filters"`
	EnvironmentId pingonetypes.ResourceIDValue `tfsdk:"environment_id"`
	Id            pingonetypes.ResourceIDValue `tfsdk:"id"`
	Ids           types.Set                    `tfsdk:"ids"`
	ScimFilter    types.String                 `tfsdk:"scim_filter"`
}

func (r *populationsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source to retrieve multiple PingOne populations.",
		Attributes: map[string]schema.Attribute{
			"data_filters": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Required:            true,
							Description:         "The attribute name to filter on. Must be one of the following values: \"id\", \"name\".",
							MarkdownDescription: "The attribute name to filter on. Must be one of the following values: `id`, `name`.",
							Validators: []validator.String{
								stringvalidator.LengthAtLeast(1),
							},
						},
						"values": schema.ListAttribute{
							ElementType:         types.StringType,
							Required:            true,
							Description:         "The possible values (case sensitive) of the attribute defined in the \"name\" parameter to filter.",
							MarkdownDescription: "The possible values (case sensitive) of the attribute defined in the `name` parameter to filter.",
							Validators: []validator.List{
								listvalidator.SizeAtLeast(1),
								listvalidator.UniqueValues(),
								listvalidator.ValueStringsAre(
									stringvalidator.LengthAtLeast(1),
								),
							},
						},
					},
				},
				Optional:            true,
				Description:         "Individual data filters to apply to the selection. Allowed attributes to filter: \"id\", \"name\". Exactly one of the following must be defined: \"scim_filter\", \"data_filters\"",
				MarkdownDescription: "Individual data filters to apply to the selection. Allowed attributes to filter: `id`, `name`. Exactly one of the following must be defined: `scim_filter`, `data_filters`",
				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.MatchRelative().AtParent().AtName("scim_filter")),
				},
			},
			"environment_id": framework.Attr_LinkID(
				framework.SchemaAttributeDescriptionFromMarkdown("The ID of the environment to filter populations from."),
			),
			"id": framework.Attr_ID(),
			"ids": schema.SetAttribute{
				ElementType: pingonetypes.ResourceIDType{},
				Computed:    true,
				Description: "The list of resulting IDs of populations objects that have been successfully retrieved.",
			},
			"scim_filter": schema.StringAttribute{
				Optional:            true,
				Description:         "A SCIM filter to apply to the selection.  A SCIM filter offers the greatest flexibility in filtering. The SCIM filter can use the following attributes: \"id\", \"name\". Exactly one of the following must be defined: \"scim_filter\", \"data_filters\"",
				MarkdownDescription: "A SCIM filter to apply to the selection.  A SCIM filter offers the greatest flexibility in filtering. The SCIM filter can use the following attributes: `id`, `name`. Exactly one of the following must be defined: `scim_filter`, `data_filters`",
				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.MatchRelative().AtParent().AtName("data_filters")),
				},
			},
		},
	}
}

func (state *populationsDataSourceModel) readClientResponse(response []string) diag.Diagnostics {
	var respDiags diag.Diagnostics
	state.Id = framework.PingOneResourceIDToTF(state.EnvironmentId.ValueString())
	state.Ids, respDiags = framework.StringSliceToTFSet(response)
	return respDiags
}

func (r *populationsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data populationsDataSourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Build the filter
	var filterFunction func() management.EntityArrayPagedIterator
	if !data.ScimFilter.IsNull() {

		filterFunction = r.Client.ManagementAPIClient.PopulationsApi.ReadAllPopulations(ctx, data.EnvironmentId.ValueString()).Filter(data.ScimFilter.ValueString()).Execute

	} else if !data.DataFilters.IsNull() {

		var dataFilterIn []framework.DataFilterModel
		resp.Diagnostics.Append(data.DataFilters.ElementsAs(ctx, &dataFilterIn, false)...)
		if resp.Diagnostics.HasError() {
			return
		}

		filterSet := make([]interface{}, 0)

		for _, v := range dataFilterIn {

			values := framework.TFListToStringSlice(ctx, v.Values)
			tflog.Debug(ctx, "Filter set loop", map[string]interface{}{
				"name":          v.Name.ValueString(),
				"len(elements)": fmt.Sprintf("%d", len(v.Values.Elements())),
				"len(values)":   fmt.Sprintf("%d", len(values)),
			})
			filterSet = append(filterSet, map[string]interface{}{
				"name":   v.Name.ValueString(),
				"values": values,
			})
		}

		scimFilter := filter.BuildScimFilter(filterSet, map[string]string{})

		tflog.Debug(ctx, "SCIM Filter", map[string]interface{}{
			"scimFilter": scimFilter,
		})

		filterFunction = r.Client.ManagementAPIClient.PopulationsApi.ReadAllPopulations(ctx, data.EnvironmentId.ValueString()).Filter(scimFilter).Execute

	} else {
		resp.Diagnostics.AddError(
			"Missing parameter",
			"Cannot filter the populations values. scim_filter or data_filters must be set.",
		)
		return
	}

	// Read API call
	var responseData []string
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			pagedIterator := filterFunction()

			var initialHttpResponse *http.Response

			foundIDs := make([]string, 0)

			for pageCursor, err := range pagedIterator {
				if err != nil {
					return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
				}

				if initialHttpResponse == nil {
					initialHttpResponse = pageCursor.HTTPResponse
				}

				if results, ok := pageCursor.EntityArray.Embedded.GetPopulationsOk(); ok {
					for _, resultObj := range results {
						id, ok := resultObj.GetIdOk()
						if ok {
							foundIDs = append(foundIDs, *id)
						}
					}
				}
			}

			return foundIDs, initialHttpResponse, nil
		},
		"ReadAllPopulations",
		framework.DefaultCustomError,
		nil,
		&responseData,
	)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
