// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package sso

import (
	"context"
	"fmt"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/customtypes/pingonetypes"
	"github.com/pingidentity/terraform-provider-pingone/internal/sdk"
)

var (
	_ datasource.DataSource              = &administratorSecurityDataSource{}
	_ datasource.DataSourceWithConfigure = &administratorSecurityDataSource{}
)

func NewAdministratorSecurityDataSource() datasource.DataSource {
	return &administratorSecurityDataSource{}
}

type administratorSecurityDataSource serviceClientType

func (r *administratorSecurityDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_administrator_security"
}

func (r *administratorSecurityDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client.API
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type administratorSecurityDataSourceModel struct {
	AllowedMethods       types.Object                 `tfsdk:"allowed_methods"`
	AuthenticationMethod types.String                 `tfsdk:"authentication_method"`
	EnvironmentId        pingonetypes.ResourceIDValue `tfsdk:"environment_id"`
	HasFido2Capabilities types.Bool                   `tfsdk:"has_fido2_capabilities"`
	Id                   pingonetypes.ResourceIDValue `tfsdk:"id"`
	IsPingIdInBom        types.Bool                   `tfsdk:"is_pingid_in_bom"`
	MfaStatus            types.String                 `tfsdk:"mfa_status"`
	IdentityProvider     types.Object                 `tfsdk:"identity_provider"`
	Recovery             types.Bool                   `tfsdk:"recovery"`
}

func (r *administratorSecurityDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source to retrieve environment administrator sign-on settings.",
		Attributes: map[string]schema.Attribute{
			"allowed_methods": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						Computed:    true,
						Description: "Indicates whether to enable email for sign-on.",
					},
					"fido2": schema.StringAttribute{
						Computed:    true,
						Description: "Indicates whether to enable FIDO2 for sign-on.",
					},
					"totp": schema.StringAttribute{
						Computed:    true,
						Description: "Indicates whether to enable TOTP for sign-on.",
					},
				},
				Computed:            true,
				Description:         "Indicates the methods to enable or disable for admin sign-on. Required properties are \"TOTP\" (temporary one-time password), \"FIDO2\", or \"EMAIL\".",
				MarkdownDescription: "Indicates the methods to enable or disable for admin sign-on. Required properties are `TOTP` (temporary one-time password), `FIDO2`, or `EMAIL`.",
			},
			"authentication_method": schema.StringAttribute{
				Computed:            true,
				Description:         "Indicates whether to use PingOne MFA, an external IdP, or a combination of both for admin sign-on. Possible values are \"PINGONE\", \"EXTERNAL\", or \"HYBRID\". The default is \"PINGONE\".",
				MarkdownDescription: "Indicates whether to use PingOne MFA, an external IdP, or a combination of both for admin sign-on. Possible values are `PINGONE`, `EXTERNAL`, or `HYBRID`. The default is `PINGONE`.",
			},
			"environment_id": framework.Attr_LinkID(
				framework.SchemaAttributeDescriptionFromMarkdown("The ID of the environment that is configured with the security."),
			),
			"has_fido2_capabilities": schema.BoolAttribute{
				Computed:    true,
				Description: "Indicates whether the environment supports FIDO2 passkeys for MFA.",
			},
			"id": framework.Attr_ID(),
			"is_pingid_in_bom": schema.BoolAttribute{
				Computed:    true,
				Description: "Indicates whether the environment supports PingID for MFA.",
			},
			"mfa_status": schema.StringAttribute{
				Computed:            true,
				Description:         "This property must be set to \"ENFORCE\" as MFA is required for administrator sign-ons. This property applies only to the specified environment.",
				MarkdownDescription: "This property must be set to `ENFORCE` as MFA is required for administrator sign-ons. This property applies only to the specified environment.",
			},
			"identity_provider": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed:    true,
						Description: "The UUID of the external IdP, if applicable.",
					},
				},
				Computed:    true,
				Description: "The external IdP, if applicable.",
			},
			"recovery": schema.BoolAttribute{
				Computed:    true,
				Description: "Indicates whether to allow account recovery within the admin policy.",
			},
		},
	}
}

func (state *administratorSecurityDataSourceModel) readClientResponse(response *management.AdministratorSecurity) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// allowed_methods
	allowedMethodsAttrTypes := map[string]attr.Type{
		"email": types.StringType,
		"fido2": types.StringType,
		"totp":  types.StringType,
	}
	var allowedMethodsValue types.Object
	if response.AllowedMethods == nil {
		allowedMethodsValue = types.ObjectNull(allowedMethodsAttrTypes)
	} else {
		allowedMethodsValue, diags = types.ObjectValue(allowedMethodsAttrTypes, map[string]attr.Value{
			"email": types.StringValue(response.AllowedMethods.EMAIL),
			"fido2": types.StringValue(response.AllowedMethods.FIDO2),
			"totp":  types.StringValue(response.AllowedMethods.TOTP),
		})
		respDiags.Append(diags...)
	}
	state.AllowedMethods = allowedMethodsValue
	// authentication_method
	authenticationMethodValue := types.StringValue(string(response.AuthenticationMethod))
	state.AuthenticationMethod = authenticationMethodValue
	// has_fido2_capabilities
	state.HasFido2Capabilities = types.BoolPointerValue(response.HasFido2Capabilities)
	// id
	idValue := framework.PingOneResourceIDToTF(state.EnvironmentId.ValueString())
	state.Id = idValue
	// is_pingid_in_bom
	state.IsPingIdInBom = types.BoolPointerValue(response.IsPingIDInBOM)
	// mfa_status
	mfaStatusValue := types.StringValue(string(response.MfaStatus))
	state.MfaStatus = mfaStatusValue
	// identity_provider
	providerAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var providerValue types.Object
	if response.Provider == nil {
		providerValue = types.ObjectNull(providerAttrTypes)
	} else {
		providerValue, diags = types.ObjectValue(providerAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.Provider.Id),
		})
		respDiags.Append(diags...)
	}
	state.IdentityProvider = providerValue
	// recovery
	state.Recovery = types.BoolValue(response.Recovery)
	return respDiags
}

func (r *administratorSecurityDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data administratorSecurityDataSourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	var responseData *management.AdministratorSecurity
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.AdministratorSecurityApi.ReadAdministratorSecurity(ctx, data.EnvironmentId.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"ReadAdministratorSecurity",
		framework.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
