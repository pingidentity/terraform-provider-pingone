// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package sso

import (
	"context"
	"fmt"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/customtypes/pingonetypes"
	"github.com/pingidentity/terraform-provider-pingone/internal/sdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/utils"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

var (
	_ resource.Resource                = &administratorSecurityResource{}
	_ resource.ResourceWithConfigure   = &administratorSecurityResource{}
	_ resource.ResourceWithImportState = &administratorSecurityResource{}
)

func NewAdministratorSecurityResource() resource.Resource {
	return &administratorSecurityResource{}
}

type administratorSecurityResource serviceClientType

func (r *administratorSecurityResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_administrator_security"
}

func (r *administratorSecurityResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client.API
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type administratorSecurityResourceModel struct {
	AllowedMethods       types.String                 `tfsdk:"allowed_methods"`
	AuthenticationMethod types.String                 `tfsdk:"authentication_method"`
	EnvironmentId        pingonetypes.ResourceIDValue `tfsdk:"environment_id"`
	MfaStatus            types.String                 `tfsdk:"mfa_status"`
	Policy               types.Object                 `tfsdk:"policy"`
	IdentityProvider     types.Object                 `tfsdk:"identity_provider"`
	Recovery             types.Bool                   `tfsdk:"recovery"`
}

func (r *administratorSecurityResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage the administrator security.",
		Attributes: map[string]schema.Attribute{
			"allowed_methods": schema.StringAttribute{
				Optional:            true,
				Description:         "Indicates the methods to enable or disable for admin sign-on. Possible values are \"TOTP\" (temporary one-time password), \"FIDO2\", or \"EMAIL\".",
				MarkdownDescription: "Indicates the methods to enable or disable for admin sign-on. Possible values are `TOTP` (temporary one-time password), `FIDO2`, or `EMAIL`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"TOTP",
						"FIDO2",
						"EMAIL",
					),
				},
			},
			"authentication_method": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether to use PingOne MFA, an external IdP, or a combination of both for admin sign-on. Possible values are \"PINGONE\", \"EXTERNAL\", or \"HYBRID\". The default is \"PINGONE\". The default value is \"PINGONE\".",
				MarkdownDescription: "Indicates whether to use PingOne MFA, an external IdP, or a combination of both for admin sign-on. Possible values are `PINGONE`, `EXTERNAL`, or `HYBRID`. The default is `PINGONE`. The default value is `PINGONE`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"PINGONE",
						"EXTERNAL",
						"HYBRID",
					),
				},
				Default: stringdefault.StaticString("PINGONE"),
			},
			"environment_id": framework.Attr_LinkID(
				framework.SchemaAttributeDescriptionFromMarkdown("The ID of the environment to create and manage the administrator_security in."),
			),
			"mfa_status": schema.StringAttribute{
				Computed:            true,
				Description:         "This applies only to the specified environment, and must be set to \"ENFORCE\".",
				MarkdownDescription: "This applies only to the specified environment, and must be set to `ENFORCE`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ENFORCE",
					),
				},
				Default: stringdefault.StaticString("ENFORCE"),
			},
			"policy": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed:    true,
						Description: "The admin sign-on policy ID.",
					},
				},
				Computed: true,
			},
			"identity_provider": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The UUID of the external IdP, if applicable.",
					},
				},
				Optional: true,
			},
			"recovery": schema.BoolAttribute{
				Required:    true,
				Description: "Indicates whether to allow account recovery within the admin policy.",
			},
		},
	}
}

func (model *administratorSecurityResourceModel) buildClientStruct() (*management.AdministratorSecurity, diag.Diagnostics) {
	result := &management.AdministratorSecurity{}
	var respDiags diag.Diagnostics
	// allowed_methods
	if !model.AllowedMethods.IsNull() {
		allowedMethodsValue, err := management.NewEnumAdministratorSecurityAllowedMethodsFromValue(model.AllowedMethods.ValueString())
		if err != nil {
			respDiags.AddAttributeError(
				path.Root("allowed_methods"),
				"Provided value is not valid",
				fmt.Sprintf("The value provided for allowed_methods is not valid: %s", err.Error()),
			)
		} else {
			result.AllowedMethods = allowedMethodsValue
		}
	}

	// authentication_method
	if !model.AuthenticationMethod.IsNull() {
		authenticationMethodValue, err := management.NewEnumAdministratorSecurityAuthenticationMethodFromValue(model.AuthenticationMethod.ValueString())
		if err != nil {
			respDiags.AddAttributeError(
				path.Root("authentication_method"),
				"Provided value is not valid",
				fmt.Sprintf("The value provided for authentication_method is not valid: %s", err.Error()),
			)
		} else {
			result.AuthenticationMethod = *authenticationMethodValue
		}
	}

	// mfa_status
	if !model.MfaStatus.IsNull() {
		mfaStatusValue := management.EnumAdministratorSecurityMfaStatus(model.MfaStatus.ValueString())
		result.MfaStatus = &mfaStatusValue
		/*mfaStatusValue, err := management.NewEnumAdministratorSecurityMfaStatusFromValue(model.MfaStatus.ValueString())
		if err != nil {
			respDiags.AddAttributeError(
				path.Root("mfa_status"),
				"Provided value is not valid",
				fmt.Sprintf("The value provided for mfa_status is not valid: %s", err.Error()),
			)
		} else {
			result.MfaStatus = mfaStatusValue
		}*/
	}

	// identity_provider
	if !model.IdentityProvider.IsNull() {
		identityProviderValue := &management.AdministratorSecurityProvider{}
		identityProviderAttrs := model.IdentityProvider.Attributes()
		identityProviderValue.Id = identityProviderAttrs["id"].(types.String).ValueString()
		result.Provider = identityProviderValue
	}

	// recovery
	result.Recovery = model.Recovery.ValueBool()
	return result, respDiags
}

// Build a default client struct to reset the resource to its default state
// If necessary, update this function to set any other values that should be present in the default state of the resource
func (model *administratorSecurityResource) buildDefaultClientStruct() *management.AdministratorSecurity {
	result := &management.AdministratorSecurity{}
	result.AuthenticationMethod = management.EnumAdministratorSecurityAuthenticationMethod("PINGONE")
	result.MfaStatus = utils.Pointer(management.EnumAdministratorSecurityMfaStatus("ENFORCE"))
	return result
}

func (state *administratorSecurityResourceModel) readClientResponse(response *management.AdministratorSecurity) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// allowed_methods
	var allowedMethodsPtrValue *string
	if response.AllowedMethods != nil {
		allowedMethodsStringValue := string(*response.AllowedMethods)
		allowedMethodsPtrValue = &allowedMethodsStringValue
	}
	allowedMethodsValue := types.StringPointerValue(allowedMethodsPtrValue)
	state.AllowedMethods = allowedMethodsValue
	// authentication_method
	authenticationMethodValue := types.StringValue(string(response.AuthenticationMethod))
	state.AuthenticationMethod = authenticationMethodValue
	// mfa_status
	var mfaStatusPtrValue *string
	if response.MfaStatus != nil {
		mfaStatusStringValue := string(*response.MfaStatus)
		mfaStatusPtrValue = &mfaStatusStringValue
	}
	mfaStatusValue := types.StringPointerValue(mfaStatusPtrValue)
	state.MfaStatus = mfaStatusValue
	// policy
	policyAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var policyValue types.Object
	if response.Policy == nil {
		policyValue = types.ObjectNull(policyAttrTypes)
	} else {
		policyValue, diags = types.ObjectValue(policyAttrTypes, map[string]attr.Value{
			"id": types.StringPointerValue(response.Policy.Id),
		})
		respDiags.Append(diags...)
	}
	state.Policy = policyValue
	// identity_provider
	identityProviderAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var identityProviderValue types.Object
	if response.Provider == nil {
		identityProviderValue = types.ObjectNull(identityProviderAttrTypes)
	} else {
		identityProviderValue, diags = types.ObjectValue(identityProviderAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.Provider.Id),
		})
		respDiags.Append(diags...)
	}
	state.IdentityProvider = identityProviderValue
	// recovery
	state.Recovery = types.BoolValue(response.Recovery)
	return respDiags
}

func (r *administratorSecurityResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data administratorSecurityResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic, since this is a singleton resource
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var responseData *management.AdministratorSecurity
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.AdministratorSecurityApi.UpdateAdministratorSecurity(ctx, data.EnvironmentId.ValueString()).AdministratorSecurity(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateAdministratorSecurity-Create",
		framework.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *administratorSecurityResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data administratorSecurityResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	var responseData *management.AdministratorSecurity
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.AdministratorSecurityApi.ReadAdministratorSecurity(ctx, data.EnvironmentId.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"ReadAdministratorSecurity",
		framework.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Remove from state if resource is not found
	if responseData == nil {
		resp.State.RemoveResource(ctx)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *administratorSecurityResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data administratorSecurityResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var responseData *management.AdministratorSecurity
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.AdministratorSecurityApi.UpdateAdministratorSecurity(ctx, data.EnvironmentId.ValueString()).AdministratorSecurity(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateAdministratorSecurity-Update",
		framework.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *administratorSecurityResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource is singleton, so it can't be deleted from the service.
	// Instead this delete method will attempt to set the resource to its default state on the service.
	var data administratorSecurityResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic to reset to default
	clientData := r.buildDefaultClientStruct()
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.AdministratorSecurityApi.UpdateAdministratorSecurity(ctx, data.EnvironmentId.ValueString()).AdministratorSecurity(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateAdministratorSecurity",
		framework.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		nil,
	)...)
}

func (r *administratorSecurityResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	idComponents := []framework.ImportComponent{
		{
			Label:     "environment_id",
			Regexp:    verify.P1ResourceIDRegexp,
			PrimaryID: true,
		},
	}

	attributes, err := framework.ParseImportID(req.ID, idComponents...)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			err.Error(),
		)
		return
	}

	for _, idComponent := range idComponents {
		pathKey := idComponent.Label

		if idComponent.PrimaryID {
			pathKey = "id"
		}

		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root(pathKey), attributes[idComponent.Label])...)
	}
}
