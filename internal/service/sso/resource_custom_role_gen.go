// Code generated by ping-terraform-plugin-framework-generator

package sso

import (
	"context"
	"fmt"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/customtypes/pingonetypes"
	"github.com/pingidentity/terraform-provider-pingone/internal/sdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

var (
	_ resource.Resource                = &customRoleResource{}
	_ resource.ResourceWithConfigure   = &customRoleResource{}
	_ resource.ResourceWithImportState = &customRoleResource{}
)

func NewCustomRoleResource() resource.Resource {
	return &customRoleResource{}
}

type customRoleResource serviceClientType

func (r *customRoleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_custom_role"
}

func (r *customRoleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client.API
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type customRoleResourceModel struct {
	ApplicableTo    types.Set                    `tfsdk:"applicable_to"`
	CanAssign       types.Set                    `tfsdk:"can_assign"`
	CanBeAssignedBy types.Set                    `tfsdk:"can_be_assigned_by"`
	Description     types.String                 `tfsdk:"description"`
	EnvironmentId   pingonetypes.ResourceIDValue `tfsdk:"environment_id"`
	Id              pingonetypes.ResourceIDValue `tfsdk:"id"`
	Name            types.String                 `tfsdk:"name"`
	Permissions     types.Set                    `tfsdk:"permissions"`
	Type            types.String                 `tfsdk:"type"`
}

func (r *customRoleResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a custom administrator role in an environment.",
		Attributes: map[string]schema.Attribute{
			"applicable_to": schema.SetAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "The scope types to which the role can be applied. Supported values are \"ENVIRONMENT\", \"ORGANIZATION\", and \"POPULATION\". At least one value must be set.",
				MarkdownDescription: "The scope types to which the role can be applied. Supported values are `ENVIRONMENT`, `ORGANIZATION`, and `POPULATION`. At least one value must be set.",
				Validators: []validator.Set{
					setvalidator.SizeAtLeast(1),
					setvalidator.ValueStringsAre(
						stringvalidator.OneOf("ENVIRONMENT", "ORGANIZATION", "POPULATION"),
					),
				},
			},
			"can_assign": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: "The ID of a role that can be assigned by an actor assigned the current custom role.",
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							CustomType: pingonetypes.ResourceIDType{},
						},
					},
				},
				Computed:            true,
				Description:         "A relationship that specifies if an actor is assigned the current custom role for a jurisdiction, then the actor can assign any of this set of roles to another actor for the same jurisdiction or sub-jurisdiction. This capability is derived from the \"can_be_assigned_by\" property.",
				MarkdownDescription: "A relationship that specifies if an actor is assigned the current custom role for a jurisdiction, then the actor can assign any of this set of roles to another actor for the same jurisdiction or sub-jurisdiction. This capability is derived from the `can_be_assigned_by` property.",
			},
			"can_be_assigned_by": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Required:    true,
							Description: "The ID of the role that can assign the current custom role.",
						},
					},
				},
				Required:    true,
				Description: "A relationship that determines whether a user assigned to one of this set of roles for a jurisdiction can assign the current custom role to another user for the same jurisdiction or sub-jurisdiction.",
			},
			"description": schema.StringAttribute{
				Optional:    true,
				Description: "The description of the role.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"environment_id": framework.Attr_LinkID(
				framework.SchemaAttributeDescriptionFromMarkdown("The ID of the environment to create and manage the custom role in."),
			),
			"id": framework.Attr_ID(),
			"name": schema.StringAttribute{
				Required:    true,
				Description: "The role name.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"permissions": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Description: "The ID of the permission assigned to this role.",
							Required:    true,
							Validators: []validator.String{
								stringvalidator.LengthAtLeast(1),
							},
						},
					},
				},
				Required:    true,
				Description: "The set of permissions assigned to the role. For possible values, see the [list of available permissions](https://apidocs.pingidentity.com/pingone/platform/v1/api/#pingone-permissions-by-identifier). At least one permission must be set.",
				Validators: []validator.Set{
					setvalidator.SizeAtLeast(1),
				},
			},
			"type": schema.StringAttribute{
				Computed:            true,
				Default:             stringdefault.StaticString("CUSTOM"),
				Description:         "A value that indicates whether the role is a built-in role or a custom role. Options are \"PLATFORM\" and \"CUSTOM\". This will always be \"CUSTOM\" for custom roles.",
				MarkdownDescription: "A value that indicates whether the role is a built-in role or a custom role. Options are `PLATFORM` and `CUSTOM`. This will always be `CUSTOM` for custom roles.",
			},
		},
	}
}

func (model *customRoleResourceModel) buildClientStruct() (*management.CustomAdminRole, diag.Diagnostics) {
	result := &management.CustomAdminRole{}
	var diags diag.Diagnostics
	// applicable_to
	if !model.ApplicableTo.IsNull() {
		result.ApplicableTo = []management.EnumCustomAdminRoleApplicableTo{}
		for _, applicableToElement := range model.ApplicableTo.Elements() {
			enumVal, err := management.NewEnumCustomAdminRoleApplicableToFromValue(applicableToElement.(types.String).ValueString())
			if err != nil {
				diags.AddAttributeError(
					path.Root("applicable_to"),
					"Provided value is not valid",
					fmt.Sprintf("The applicable_to value provided %s is not valid: %s", applicableToElement.(types.String).ValueString(), err.Error()),
				)
			}
			result.ApplicableTo = append(result.ApplicableTo, *enumVal)
		}
	}

	// can_be_assigned_by
	result.CanBeAssignedBy = []management.CustomAdminRoleCanAssignInner{}
	for _, canBeAssignedByElement := range model.CanBeAssignedBy.Elements() {
		canBeAssignedByValue := management.CustomAdminRoleCanAssignInner{}
		canBeAssignedByAttrs := canBeAssignedByElement.(types.Object).Attributes()
		canBeAssignedByValue.Id = canBeAssignedByAttrs["id"].(types.String).ValueString()
		result.CanBeAssignedBy = append(result.CanBeAssignedBy, canBeAssignedByValue)
	}

	// description
	result.Description = model.Description.ValueStringPointer()
	// name
	result.Name = model.Name.ValueString()
	// permissions
	result.Permissions = []management.CustomAdminRolePermissionsInner{}
	for _, permissionsElement := range model.Permissions.Elements() {
		permissionsValue := management.CustomAdminRolePermissionsInner{}
		permissionsAttrs := permissionsElement.(types.Object).Attributes()
		permissionsValue.Id = permissionsAttrs["id"].(types.String).ValueString()
		result.Permissions = append(result.Permissions, permissionsValue)
	}

	return result, nil
}

func (state *customRoleResourceModel) readClientResponse(response *management.CustomAdminRole) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// applicable_to
	state.ApplicableTo, diags = types.SetValueFrom(context.Background(), types.StringType, response.ApplicableTo)
	respDiags.Append(diags...)
	// can_assign
	canAssignAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	canAssignElementType := types.ObjectType{AttrTypes: canAssignAttrTypes}
	var canAssignValues []attr.Value
	for _, canAssignResponseValue := range response.CanAssign {
		canAssignValue, diags := types.ObjectValue(canAssignAttrTypes, map[string]attr.Value{
			"id": types.StringValue(canAssignResponseValue.Id),
		})
		respDiags.Append(diags...)
		canAssignValues = append(canAssignValues, canAssignValue)
	}
	canAssignValue, diags := types.SetValue(canAssignElementType, canAssignValues)
	respDiags.Append(diags...)

	state.CanAssign = canAssignValue
	// can_be_assigned_by
	canBeAssignedByAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	canBeAssignedByElementType := types.ObjectType{AttrTypes: canBeAssignedByAttrTypes}
	var canBeAssignedByValues []attr.Value
	for _, canBeAssignedByResponseValue := range response.CanBeAssignedBy {
		canBeAssignedByValue, diags := types.ObjectValue(canBeAssignedByAttrTypes, map[string]attr.Value{
			"id": types.StringValue(canBeAssignedByResponseValue.Id),
		})
		respDiags.Append(diags...)
		canBeAssignedByValues = append(canBeAssignedByValues, canBeAssignedByValue)
	}
	canBeAssignedByValue, diags := types.SetValue(canBeAssignedByElementType, canBeAssignedByValues)
	respDiags.Append(diags...)

	state.CanBeAssignedBy = canBeAssignedByValue
	// description
	state.Description = types.StringPointerValue(response.Description)
	// id
	idValue := framework.PingOneResourceIDToTF(response.GetId())

	state.Id = idValue
	// name
	state.Name = types.StringValue(response.Name)
	// permissions
	permissionsAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	permissionsElementType := types.ObjectType{AttrTypes: permissionsAttrTypes}
	var permissionsValues []attr.Value
	for _, permissionsResponseValue := range response.Permissions {
		permissionsValue, diags := types.ObjectValue(permissionsAttrTypes, map[string]attr.Value{
			"id": types.StringValue(permissionsResponseValue.Id),
		})
		respDiags.Append(diags...)
		permissionsValues = append(permissionsValues, permissionsValue)
	}
	permissionsValue, diags := types.SetValue(permissionsElementType, permissionsValues)
	respDiags.Append(diags...)

	state.Permissions = permissionsValue
	// type
	if response.Type != nil {
		state.Type = types.StringValue(string(*response.Type))
	} else {
		state.Type = types.StringNull()
	}
	return respDiags
}

func (r *customRoleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data customRoleResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var response *management.CustomAdminRole
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.CustomAdminRolesApi.CreateCustomAdminRole(ctx, data.EnvironmentId.ValueString()).CustomAdminRole(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"CreateCustomAdminRole",
		framework.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&response,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(response)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *customRoleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data customRoleResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	var response *management.CustomAdminRole
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.CustomAdminRolesApi.ReadOneCustomAdminRole(ctx, data.EnvironmentId.ValueString(), data.Id.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"ReadOneCustomAdminRole",
		framework.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		&response,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Remove from state if resource is not found
	if response == nil {
		resp.State.RemoveResource(ctx)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(response)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *customRoleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data customRoleResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var response *management.CustomAdminRole
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.CustomAdminRolesApi.UpdateCustomAdminRole(ctx, data.EnvironmentId.ValueString(), data.Id.ValueString()).CustomAdminRole(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateCustomAdminRole",
		framework.DefaultCustomError,
		nil,
		&response,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(response)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *customRoleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data customRoleResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fR, fErr := r.Client.ManagementAPIClient.CustomAdminRolesApi.DeleteCustomAdminRole(ctx, data.EnvironmentId.ValueString(), data.Id.ValueString()).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, fR, fErr)
		},
		"DeleteCustomAdminRole",
		framework.CustomErrorResourceNotFoundWarning,
		nil,
		nil,
	)...)
}

func (r *customRoleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	idComponents := []framework.ImportComponent{
		{
			Label:  "environment_id",
			Regexp: verify.P1ResourceIDRegexp,
		},
		{
			Label:     "role_id",
			Regexp:    verify.P1ResourceIDRegexp,
			PrimaryID: true,
		},
	}

	attributes, err := framework.ParseImportID(req.ID, idComponents...)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			err.Error(),
		)
		return
	}

	for _, idComponent := range idComponents {
		pathKey := idComponent.Label

		if idComponent.PrimaryID {
			pathKey = "id"
		}

		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root(pathKey), attributes[idComponent.Label])...)
	}
}
