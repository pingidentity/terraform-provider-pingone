// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package base

import (
	"context"
	"fmt"
	"net/http"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/customtypes/pingonetypes"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/legacysdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/sdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

var (
	_ resource.Resource              = &languageTranslationResource{}
	_ resource.ResourceWithConfigure = &languageTranslationResource{}
)

func NewLanguageTranslationResource() resource.Resource {
	return &languageTranslationResource{}
}

type languageTranslationResource serviceClientType

func (r *languageTranslationResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_language_translation"
}

func (r *languageTranslationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(legacysdk.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client.API
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type languageTranslationResourceModel struct {
	Key            types.String `tfsdk:"key"`
	ReferenceText  types.String `tfsdk:"reference_text"`
	ShortKey       types.String `tfsdk:"short_key"`
	TranslatedText types.String `tfsdk:"translated_text"`
}

type languageTranslationsResourceModel struct {
	EnvironmentId pingonetypes.ResourceIDValue `tfsdk:"environment_id"`
	Locale        types.String                 `tfsdk:"locale"`
	Translations  types.Set                    `tfsdk:"translations"`
}

func (r *languageTranslationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage localized translations in an environment.",
		Attributes: map[string]schema.Attribute{
			"environment_id": framework.Attr_LinkID(
				framework.SchemaAttributeDescriptionFromMarkdown("The ID of the environment to create and manage the language_translation in."),
			),
			"locale": schema.StringAttribute{
				Required:    true,
				Description: fmt.Sprintf("An ISO standard language code. For more information about standard language codes, see [ISO Language Code Table](http://www.lingoes.net/en/translator/langcode.htm).  The following language codes are supported: %s.", verify.FullIsoListString()),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(
						verify.FullIsoList()...,
					),
				},
			},
			"translations": schema.SetNestedAttribute{
				Description: "A list of translations for the specified locale.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required:    true,
							Description: "The page and name of the interface element to be localized (for example, `flow-ui.button.cancel`). Keys for a locale can be found using the [PingOne Platform API](https://apidocs.pingidentity.com/pingone/platform/v1/api/#get-read-translation).",
						},
						"reference_text": schema.StringAttribute{
							Computed:    true,
							Description: "The English string text associated with the UI element.",
						},
						"short_key": schema.StringAttribute{
							Computed:    true,
							Description: "The interface element only (for example, `button.cancel`).",
						},
						"translated_text": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: "The translated string text associated with the UI element. Excluding this attribute will reset the translation to its original configuration.",
						},
					},
				},
				Required: true,
				Validators: []validator.Set{
					setvalidator.SizeAtLeast(1),
				},
			},
		},
	}
}

func (model *languageTranslationsResourceModel) buildClientStruct() (*[]management.LocaleTranslation, diag.Diagnostics) {
	var diags diag.Diagnostics
	localeTranslationSlice := &[]management.LocaleTranslation{}

	if !model.Translations.IsNull() || !model.Translations.IsUnknown() {
		for _, translation := range model.Translations.Elements() {
			innerLocaleTranslation := management.LocaleTranslation{}
			innerTranslationAttrs := translation.(types.Object).Attributes()

			if innerTranslationAttrs["translated_text"] != nil &&
				!innerTranslationAttrs["translated_text"].(types.String).IsNull() &&
				!innerTranslationAttrs["translated_text"].(types.String).IsUnknown() {
				innerLocaleTranslation.TranslatedText = innerTranslationAttrs["translated_text"].(types.String).ValueString()
			}
			innerLocaleTranslation.Key = innerTranslationAttrs["key"].(types.String).ValueString()
			innerLocaleTranslation.ReferenceText = innerTranslationAttrs["reference_text"].(types.String).ValueStringPointer()
			innerLocaleTranslation.ShortKey = innerTranslationAttrs["short_key"].(types.String).ValueStringPointer()

			*localeTranslationSlice = append(*localeTranslationSlice, innerLocaleTranslation)
		}
	}

	return localeTranslationSlice, diags
}

// Build a default client struct to reset the resource to its default state
func (model *languageTranslationResource) buildDefaultClientStruct(p languageTranslationsResourceModel) *[]management.LocaleTranslation {
	// Sending only the key will reset the translation to its original configuration - per API documentation
	result := &[]management.LocaleTranslation{}
	for _, translation := range p.Translations.Elements() {
		innerTranslationAttrs := translation.(types.Object).Attributes()
		innerLocaleTranslation := management.LocaleTranslation{
			Key: innerTranslationAttrs["key"].(types.String).ValueString(),
		}

		*result = append(*result, innerLocaleTranslation)
	}

	return result
}

func (state *languageTranslationsResourceModel) readClientResponse(response []management.LocaleTranslation) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics

	translations := []attr.Value{}
	attrTypes := map[string]attr.Type{
		"key":             types.StringType,
		"reference_text":  types.StringType,
		"short_key":       types.StringType,
		"translated_text": types.StringType,
	}

	if len(state.Translations.Elements()) != 0 {
		missingKeys := make([]string, 0)

		for _, elem := range state.Translations.Elements() {
			found := false
			for _, translationObj := range response {
				// match the key from the plan with the key from the response
				if elem.(types.Object).Attributes()["key"].(types.String).ValueString() == translationObj.Key {
					translations = append(translations, types.ObjectValueMust(attrTypes, map[string]attr.Value{
						"key":             types.StringValue(translationObj.Key),
						"reference_text":  types.StringPointerValue(translationObj.ReferenceText),
						"short_key":       types.StringPointerValue(translationObj.ShortKey),
						"translated_text": types.StringValue(translationObj.TranslatedText),
					}))
					// mark the key as found
					found = true
				}
			}
			if !found {
				// if the key from the response is not found in the plan, we will add it to the missing keys
				missingKeys = append(missingKeys, elem.(types.Object).Attributes()["key"].(types.String).ValueString())
			}
		}

		if len(missingKeys) > 0 {
			// if there are missing keys, we will return an error
			respDiags.AddAttributeError(
				path.Root("translations"),
				"Missing Translations",
				fmt.Sprintf("Verify your desired configuration contains valid keys.\nThe following translation keys are not supported by PingOne: %s", strings.Join(missingKeys[:], ", ")),
			)
			return respDiags
		}

	} else if state.Translations.IsNull() || state.Translations.IsUnknown() {
		// if there are no translations in the plan or state, we will return all - this is used for import state
		for _, translationObj := range response {
			translations = append(translations, types.ObjectValueMust(attrTypes, map[string]attr.Value{
				"key":             types.StringValue(translationObj.Key),
				"reference_text":  types.StringPointerValue(translationObj.ReferenceText),
				"short_key":       types.StringPointerValue(translationObj.ShortKey),
				"translated_text": types.StringValue(translationObj.TranslatedText),
			}))
		}
	}

	state.Translations, diags = types.SetValue(types.ObjectType{AttrTypes: attrTypes}, translations)
	respDiags.Append(diags...)
	return diags
}

func (r *languageTranslationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data languageTranslationsResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic, since this is a singleton resource
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// The UpdateTranslations API call does not return a response
	resp.Diagnostics.Append(legacysdk.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.TranslationsApi.UpdateTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).LocaleTranslation(*clientData).Execute()

			return legacysdk.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateTranslations-Create",
		legacysdk.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		nil,
	)...)

	// Subsequent read needed as the API does not return the full object on any create or update operation.
	var responseData *[]management.LocaleTranslation
	resp.Diagnostics.Append(legacysdk.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			pagedIterator := r.Client.ManagementAPIClient.TranslationsApi.ReadTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).Execute()
			var initialHttpResponse *http.Response

			translationsSlice := make([]management.LocaleTranslation, 0)
			for pageCursor, err := range pagedIterator {
				if err != nil {
					return legacysdk.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
				}

				if initialHttpResponse == nil {
					initialHttpResponse = pageCursor.HTTPResponse
				}

				if translations, ok := pageCursor.EntityArray.Embedded.GetTranslationsOk(); ok {
					// Append the translations to the slice
					translationsSlice = append(translationsSlice, translations...)
				} else {
					return nil, pageCursor.HTTPResponse, fmt.Errorf("no translations found in response")
				}
			}
			return &translationsSlice, initialHttpResponse, nil
		},
		"UpdateTranslations-Create-SubsequentRead",
		legacysdk.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(*responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *languageTranslationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data languageTranslationsResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	var responseData *[]management.LocaleTranslation
	resp.Diagnostics.Append(legacysdk.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			pagedIterator := r.Client.ManagementAPIClient.TranslationsApi.ReadTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).Execute()
			var initialHttpResponse *http.Response

			translationsSlice := make([]management.LocaleTranslation, 0)
			for pageCursor, err := range pagedIterator {
				if err != nil {
					return legacysdk.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
				}

				if initialHttpResponse == nil {
					initialHttpResponse = pageCursor.HTTPResponse
				}

				if translations, ok := pageCursor.EntityArray.Embedded.GetTranslationsOk(); ok {
					// Append the translations to the slice
					translationsSlice = append(translationsSlice, translations...)
				} else {
					return nil, pageCursor.HTTPResponse, fmt.Errorf("no translations found in response")
				}
			}

			return &translationsSlice, initialHttpResponse, nil
		},
		"ReadTranslations",
		legacysdk.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Remove from state if resource is not found
	if responseData == nil {
		resp.State.RemoveResource(ctx)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(*responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *languageTranslationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data languageTranslationsResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// The UpdateTranslations API call does not return a response
	resp.Diagnostics.Append(legacysdk.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.TranslationsApi.UpdateTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).LocaleTranslation(*clientData).Execute()
			return legacysdk.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateTranslations-Update",
		legacysdk.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		nil,
	)...)

	// Subsequent read needed as the API does not return the full object on any create or update operation.
	var responseData *[]management.LocaleTranslation
	resp.Diagnostics.Append(legacysdk.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			pagedIterator := r.Client.ManagementAPIClient.TranslationsApi.ReadTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).Execute()
			var initialHttpResponse *http.Response

			translationsSlice := make([]management.LocaleTranslation, 0)
			for pageCursor, err := range pagedIterator {
				if err != nil {
					return legacysdk.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
				}

				if initialHttpResponse == nil {
					initialHttpResponse = pageCursor.HTTPResponse
				}

				if translations, ok := pageCursor.EntityArray.Embedded.GetTranslationsOk(); ok {
					// Append the translations to the slice
					translationsSlice = append(translationsSlice, translations...)
				} else {
					return nil, pageCursor.HTTPResponse, fmt.Errorf("no translations found in response")
				}
			}

			return &translationsSlice, initialHttpResponse, nil
		},
		"UpdateTranslations-Update-SubsequentRead",
		legacysdk.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(*responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *languageTranslationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource is pre-defined in PingOne, so it can't be deleted from the service.
	// Instead this delete method will attempt to set the resource to its default state on the service.
	var data languageTranslationsResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic to reset to default
	clientData := r.buildDefaultClientStruct(data)
	resp.Diagnostics.Append(legacysdk.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.TranslationsApi.UpdateTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).LocaleTranslation(*clientData).Execute()
			return legacysdk.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateTranslations",
		legacysdk.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		nil,
	)...)
}

func (r *languageTranslationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	idComponents := []framework.ImportComponent{
		{
			Label:  "environment_id",
			Regexp: verify.P1ResourceIDRegexp,
		},
		{
			Label:  "locale",
			Regexp: verify.LocaleValidator(),
		},
	}

	attributes, err := framework.ParseImportID(req.ID, idComponents...)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			err.Error(),
		)
		return
	}

	for _, idComponent := range idComponents {
		pathKey := idComponent.Label

		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root(pathKey), attributes[idComponent.Label])...)
	}
}
