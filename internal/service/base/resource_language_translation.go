// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package base

import (
	"context"
	"fmt"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework"
	"github.com/pingidentity/terraform-provider-pingone/internal/framework/customtypes/pingonetypes"
	"github.com/pingidentity/terraform-provider-pingone/internal/sdk"
	"github.com/pingidentity/terraform-provider-pingone/internal/verify"
)

var (
	_ resource.Resource                = &languageTranslationResource{}
	_ resource.ResourceWithConfigure   = &languageTranslationResource{}
	_ resource.ResourceWithImportState = &languageTranslationResource{}
)

func NewLanguageTranslationResource() resource.Resource {
	return &languageTranslationResource{}
}

type languageTranslationResource serviceClientType

func (r *languageTranslationResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_language_translation"
}

func (r *languageTranslationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(framework.ResourceType)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected the provider client, got: %T. Please report this issue to the provider maintainers.", req.ProviderData),
		)

		return
	}

	r.Client = resourceConfig.Client.API
	if r.Client == nil {
		resp.Diagnostics.AddError(
			"Client not initialised",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.",
		)
		return
	}
}

type languageTranslationResourceModel struct {
	EnvironmentId  pingonetypes.ResourceIDValue `tfsdk:"environment_id"`
	Id             pingonetypes.ResourceIDValue `tfsdk:"id"`
	Key            types.String                 `tfsdk:"key"`
	Locale         types.String                 `tfsdk:"locale"`
	ReferenceText  types.String                 `tfsdk:"reference_text"`
	ShortKey       types.String                 `tfsdk:"short_key"`
	TranslatedText types.String                 `tfsdk:"translated_text"`
}

func (r *languageTranslationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {

	resp.Schema = schema.Schema{
		Description: "Resource to create and manage the language translation.",
		Attributes: map[string]schema.Attribute{
			"environment_id": framework.Attr_LinkID(
				framework.SchemaAttributeDescriptionFromMarkdown("The ID of the environment to create and manage the language_translation in."),
			),
			"id": framework.Attr_ID(),
			"key": schema.StringAttribute{
				Required:    true,
				Description: "The page and name of the interface element to be localized (for example, `flow-ui.button.cancel`).",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"locale": schema.StringAttribute{
				Required:    true,
				Description: fmt.Sprintf("An ISO standard language code. For more information about standard language codes, see [ISO Language Code Table](http://www.lingoes.net/en/translator/langcode.htm).  The following language codes are reserved as they are created automatically in the environment: %s.", verify.IsoReservedListString()),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(
						verify.ReservedIsoList()...,
					),
				},
			},
			"reference_text": schema.StringAttribute{
				Computed:    true,
				Description: "The English string text associated with the interface element.",
			},
			"short_key": schema.StringAttribute{
				Computed:    true,
				Description: "The interface element only (for example, `button.cancel`).",
			},
			"translated_text": schema.StringAttribute{
				Required:    true,
				Description: "The translated string text associated with the interface element.",
			},
		},
	}
}

func (model *languageTranslationResourceModel) buildClientStruct() (*[]management.LocaleTranslation, diag.Diagnostics) {
	var diags diag.Diagnostics
	localeTranslationSlice := &[]management.LocaleTranslation{}
	innerLocaleTranslation := &management.LocaleTranslation{}

	// Validate and set the Key field
	if model.Key.IsNull() || model.Key.IsUnknown() {
		diags.AddAttributeError(
			path.Root("key"),
			"Missing Key",
			"The `key` attribute is required. Please set this value in your configuration.",
		)
		return nil, diags
	}
	innerLocaleTranslation.Key = model.Key.ValueString()

	// Validate and set the TranslatedText field
	if model.TranslatedText.IsNull() || model.TranslatedText.IsUnknown() {
		diags.AddAttributeError(
			path.Root("translated_text"),
			"Missing Translated Text",
			"The `translated_text` attribute is required. Please set this value in your configuration.",
		)
		return nil, diags
	}
	innerLocaleTranslation.TranslatedText = model.TranslatedText.ValueString()

	// Add the innerLocaleTranslation to the slice
	*localeTranslationSlice = append(*localeTranslationSlice, *innerLocaleTranslation)

	return localeTranslationSlice, diags
}

// Build a default client struct to reset the resource to its default state
// If necessary, update this function to set any other values that should be present in the default state of the resource
func (model *languageTranslationResource) buildDefaultClientStruct(p languageTranslationResourceModel) *[]management.LocaleTranslation {
	// Sending only the key will reset the translation to its original configuration - per API documentation
	result := []management.LocaleTranslation{
		{
			Key: p.Key.ValueString(),
		},
	}
	return &result
}

func (state *languageTranslationResourceModel) readClientResponse(response []management.LocaleTranslation, data languageTranslationResourceModel) diag.Diagnostics {
	for _, translation := range response {
		state.EnvironmentId = framework.PingOneResourceIDToTF(data.EnvironmentId.ValueString())
		idValue := framework.PingOneResourceIDToTF(*translation.Id)
		state.Id = idValue
		state.Locale = data.Locale
		state.Key = types.StringValue(translation.Key)
		state.ReferenceText = types.StringPointerValue(translation.ReferenceText)
		state.ShortKey = types.StringPointerValue(translation.ShortKey)
		state.TranslatedText = types.StringValue(translation.TranslatedText)
	}

	return nil
}

func (r *languageTranslationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data languageTranslationResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic, since this is a singleton resource
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var responseData []management.LocaleTranslation
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.TranslationsApi.UpdateTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).LocaleTranslation(*clientData).Execute()

			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateTranslations-Create",
		framework.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	// Subsequent read needed as the API does not return the full object on any create or update operation.
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			pagedIterator := r.Client.ManagementAPIClient.TranslationsApi.ReadTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).Execute()
			var initialHttpResponse *http.Response

			for pageCursor, err := range pagedIterator {
				if err != nil {
					return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
				}

				if initialHttpResponse == nil {
					initialHttpResponse = pageCursor.HTTPResponse
				}

				if translations, ok := pageCursor.EntityArray.Embedded.GetTranslationsOk(); ok {
					for _, translation := range translations {
						if v, ok := translation.GetKeyOk(); ok && *v == data.Key.ValueString() {
							localeTranslationSlice := []management.LocaleTranslation{}
							localeTranslationSlice = append(localeTranslationSlice, translation)
							return localeTranslationSlice, pageCursor.HTTPResponse, nil
						}
					}
				}
			}

			return nil, initialHttpResponse, nil
		},
		"UpdateTranslations-Create-SubsequentRead",
		framework.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData, data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *languageTranslationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data languageTranslationResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	var responseData []management.LocaleTranslation
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			pagedIterator := r.Client.ManagementAPIClient.TranslationsApi.ReadTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).Execute()
			var initialHttpResponse *http.Response

			for pageCursor, err := range pagedIterator {
				if err != nil {
					return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
				}

				if initialHttpResponse == nil {
					initialHttpResponse = pageCursor.HTTPResponse
				}

				if translations, ok := pageCursor.EntityArray.Embedded.GetTranslationsOk(); ok {
					for _, translation := range translations {
						if v, ok := translation.GetIdOk(); ok && *v == data.Id.ValueString() {
							localeTranslationSlice := []management.LocaleTranslation{}
							localeTranslationSlice = append(localeTranslationSlice, translation)
							return localeTranslationSlice, pageCursor.HTTPResponse, nil
						}
					}
				}
			}

			return nil, initialHttpResponse, nil
		},
		"ReadTranslations",
		framework.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Remove from state if resource is not found
	if responseData == nil {
		resp.State.RemoveResource(ctx)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData, data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *languageTranslationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data languageTranslationResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var responseData []management.LocaleTranslation
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.TranslationsApi.UpdateTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).LocaleTranslation(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateTranslations-Update",
		framework.DefaultCustomError,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	// Subsequent read needed as the API does not return the full object on any create or update operation.
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			pagedIterator := r.Client.ManagementAPIClient.TranslationsApi.ReadTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).Execute()
			var initialHttpResponse *http.Response

			for pageCursor, err := range pagedIterator {
				if err != nil {
					return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), nil, pageCursor.HTTPResponse, err)
				}

				if initialHttpResponse == nil {
					initialHttpResponse = pageCursor.HTTPResponse
				}

				if translations, ok := pageCursor.EntityArray.Embedded.GetTranslationsOk(); ok {
					for _, translation := range translations {
						if v, ok := translation.GetKeyOk(); ok && *v == data.Key.ValueString() {
							localeTranslationSlice := []management.LocaleTranslation{}
							localeTranslationSlice = append(localeTranslationSlice, translation)
							return localeTranslationSlice, pageCursor.HTTPResponse, nil
						}
					}
				}
			}

			return nil, initialHttpResponse, nil
		},
		"UpdateTranslations-Create-SubsequentRead",
		framework.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		&responseData,
	)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData, data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *languageTranslationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource is pre-defined in PingOne, so it can't be deleted from the service.
	// Instead this delete method will attempt to set the resource to its default state on the service.
	var data languageTranslationResourceModel

	if r.Client == nil || r.Client.ManagementAPIClient == nil {
		resp.Diagnostics.AddError(
			"Client not initialized",
			"Expected the PingOne client, got nil.  Please report this issue to the provider maintainers.")
		return
	}

	// Read Terraform state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic to reset to default
	clientData := r.buildDefaultClientStruct(data)
	resp.Diagnostics.Append(framework.ParseResponse(
		ctx,

		func() (any, *http.Response, error) {
			fO, fR, fErr := r.Client.ManagementAPIClient.TranslationsApi.UpdateTranslations(ctx, data.EnvironmentId.ValueString(), data.Locale.ValueString()).LocaleTranslation(*clientData).Execute()
			return framework.CheckEnvironmentExistsOnPermissionsError(ctx, r.Client.ManagementAPIClient, data.EnvironmentId.ValueString(), fO, fR, fErr)
		},
		"UpdateTranslations",
		framework.CustomErrorResourceNotFoundWarning,
		sdk.DefaultCreateReadRetryable,
		nil,
	)...)
}

func (r *languageTranslationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	idComponents := []framework.ImportComponent{
		{
			Label:  "environment_id",
			Regexp: verify.P1ResourceIDRegexp,
		},
		{
			Label:  "locale",
			Regexp: verify.LocaleValidator(),
		},
		{
			Label:     "translation_id",
			Regexp:    verify.P1ResourceIDRegexp,
			PrimaryID: true,
		},
	}

	attributes, err := framework.ParseImportID(req.ID, idComponents...)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			err.Error(),
		)
		return
	}

	for _, idComponent := range idComponents {
		pathKey := idComponent.Label

		if idComponent.PrimaryID {
			pathKey = "id"
		}

		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root(pathKey), attributes[idComponent.Label])...)
	}
}
