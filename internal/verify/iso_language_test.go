package verify

import (
	"testing"

	"golang.org/x/exp/slices"
)

func TestIsoList_Success(t *testing.T) {

	isoList := IsoList()
	slices.Sort(isoList)

	expectedIsoList := []string{
		"af",
		"af-ZA",
		"ar",
		"ar-AE",
		"ar-BH",
		"ar-DZ",
		"ar-EG",
		"ar-IQ",
		"ar-JO",
		"ar-KW",
		"ar-LB",
		"ar-LY",
		"ar-MA",
		"ar-OM",
		"ar-QA",
		"ar-SA",
		"ar-SY",
		"ar-TN",
		"ar-YE",
		"az",
		"az-AZ",
		"be",
		"be-BY",
		"bg",
		"bg-BG",
		"bs-BA",
		"ca",
		"ca-ES",
		"cs",
		"cs-CZ",
		"cy",
		"cy-GB",
		"da",
		"da-DK",
		"de-AT",
		"de-CH",
		"de-DE",
		"de-LI",
		"de-LU",
		"dv",
		"dv-MV",
		"el",
		"el-GR",
		"en-AU",
		"en-BZ",
		"en-CA",
		"en-CB",
		"en-GB",
		"en-IE",
		"en-JM",
		"en-NZ",
		"en-PH",
		"en-TT",
		"en-US",
		"en-ZA",
		"en-ZW",
		"eo",
		"es-AR",
		"es-BO",
		"es-CL",
		"es-CO",
		"es-CR",
		"es-DO",
		"es-EC",
		"es-ES",
		"es-GT",
		"es-HN",
		"es-MX",
		"es-NI",
		"es-PA",
		"es-PE",
		"es-PR",
		"es-PY",
		"es-SV",
		"es-UY",
		"es-VE",
		"et",
		"et-EE",
		"eu",
		"eu-ES",
		"fa",
		"fa-IR",
		"fi",
		"fi-FI",
		"fo",
		"fo-FO",
		"fr-BE",
		"fr-CH",
		"fr-FR",
		"fr-LU",
		"fr-MC",
		"gl",
		"gl-ES",
		"gu",
		"gu-IN",
		"he",
		"he-IL",
		"hi",
		"hi-IN",
		"hr",
		"hr-BA",
		"hr-HR",
		"hu",
		"hu-HU",
		"hy",
		"hy-AM",
		"id",
		"id-ID",
		"is",
		"is-IS",
		"it-CH",
		"it-IT",
		"ja-JP",
		"ka",
		"ka-GE",
		"kk",
		"kk-KZ",
		"kn",
		"kn-IN",
		"ko-KR",
		"kok",
		"kok-IN",
		"ky",
		"ky-KG",
		"lt",
		"lt-LT",
		"lv",
		"lv-LV",
		"mi",
		"mi-NZ",
		"mk",
		"mk-MK",
		"mn",
		"mn-MN",
		"mr",
		"mr-IN",
		"ms",
		"ms-BN",
		"ms-MY",
		"mt",
		"mt-MT",
		"nb",
		"nb-NO",
		"nl-BE",
		"nl-NL",
		"nn-NO",
		"ns",
		"ns-ZA",
		"pa",
		"pa-IN",
		"pl",
		"pl-PL",
		"ps",
		"ps-AR",
		"pt-BR",
		"pt-PT",
		"qu",
		"qu-BO",
		"qu-EC",
		"qu-PE",
		"ro",
		"ro-RO",
		"ru-RU",
		"sa",
		"sa-IN",
		"se",
		"se-FI",
		"se-FI",
		"se-FI",
		"se-NO",
		"se-SE",
		"se-SE",
		"se-SE",
		"sk",
		"sk-SK",
		"sl",
		"sl-SI",
		"sq",
		"sq-AL",
		"sr-BA",
		"sr-SP",
		"sv",
		"sv-FI",
		"sv-SE",
		"sw",
		"sw-KE",
		"syr",
		"syr-SY",
		"ta",
		"ta-IN",
		"te",
		"te-IN",
		"th-TH",
		"tl",
		"tl-PH",
		"tn",
		"tn-ZA",
		"tr-TR",
		"tt",
		"tt-RU",
		"ts",
		"uk",
		"uk-UA",
		"ur",
		"ur-PK",
		"uz",
		"uz-UZ",
		"uz-UZ",
		"vi",
		"vi-VN",
		"xh",
		"xh-ZA",
		"zh-CN",
		"zh-HK",
		"zh-MO",
		"zh-SG",
		"zh-TW",
		"zu",
		"zu-ZA",
	}
	slices.Sort(expectedIsoList)

	if !slices.Equal(isoList, expectedIsoList) {
		t.Fatalf("Expected %v, got %v.", expectedIsoList, isoList)
	}

}

func TestIsoReservedListString_Success(t *testing.T) {

	expectedIsoList := "`de`, `en`, `es`, `fr`, `fr-CA`, `it`, `ja`, `ko`, `nl`, `pt`, `ru`, `th`, `tr`, `zh`"

	isoList := IsoReservedListString()

	if isoList != expectedIsoList {
		t.Fatalf("Expected %s, got %s.", expectedIsoList, isoList)
	}

}
